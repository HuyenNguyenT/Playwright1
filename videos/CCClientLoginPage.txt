package com.frame;

import com.google.common.collect.Lists;
import com.lib.EnvSetup;
import com.lib.UtilityFun;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jsoup.Jsoup;
import org.openqa.selenium.Point;
import org.openqa.selenium.*;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.FindBys;
import org.openqa.selenium.support.ui.*;
import org.testng.Assert;
import ru.yandex.qatools.allure.annotations.Step;

import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static java.lang.Math.abs;

public class CCClientLoginPage extends UtilityFun {

    protected Logger log = LogManager.getLogger(this.getClass().getName());
    EmailChannelFunctions emailChannelFunctions = new EmailChannelFunctions();
    UtilityFun objUtil = new UtilityFun();
    public String sItem, sItem1;
    public static String sValue, sValue1;
    private static JavascriptExecutor js;
    private String sUname;
    private String sUfullname;
    @FindBy(id = "username")
    public WebElement txtUsername;

    @FindBy(xpath = "//*[@id='ow_open_Welcome_Page']")
    public WebElement btnopenWelcomePage;

    @FindBy(xpath = "//*[@id='ow_open_Customer_Search']")
    public WebElement btnopenCustomerSearch;

    @FindBy(xpath = "//*[@id='ow_open_Customer_Details']")
    public WebElement btnopenCustomerDetails;

    @FindBy(id = "ow_open_My_Agents")
    public WebElement myAgentsTab;

    @FindBy(xpath = "//*[@id='ow_open_Customer_Journey']")
    public WebElement btnopenCustomerJourney;

    @FindBy(xpath = "//*[@id='ow_open_Chat']")
    public WebElement btnopenchat;

    @FindBy(xpath = "//*[@id='ow_open_Screenpop']")
    public WebElement btnopenScreenpop;

    @FindBy(xpath = "//*[@id='ow_open_Settings']")
    public WebElement btnopenSettings;

    @FindBy(xpath = "//*[@id='ow_open_help']")
    public WebElement btnopenHelp;

    @FindBy(xpath = "//*[@id='ow_open_SMS']")
    public WebElement btnopensms;

    @FindBy(xpath = "//*[@id='ow_open_Co-Browse']")
    public WebElement btnCobrowse;

    @FindBy(xpath = "//*[@puppeteer-id='cobrowse-session-key']")
    public WebElement keyCobrowseSession;

    @FindBy(xpath = "//*[@id='ow_open_Email']")
    public WebElement btnopenemail;
    @FindBy(xpath = "//*[@id='ow_start-work--go-ready']")
    public WebElement btnWorkStartButton;

    @FindBy(xpath = "//button[@aria-label='Start Work']")
    public WebElement btnWorkStartButton2;

    @FindBy(xpath = "//button[@aria-label='Activate']")
    public WebElement btnAcivateButton;


    @FindBy(id = "password")
    public WebElement txtPassword;

    @FindBy(id = "ow_extension")
    public WebElement txtExtention;

    @FindBy(xpath = "//button[@type='submit']")
    public WebElement btnSignIn;

    @FindBy(xpath = "//button[@ng-click='$mdTabsCtrl.select(tab.getIndex())']")
    public WebElement btnPhrases;

    @FindBy(xpath = "//button[@ng-click='reply()']")
    public WebElement EmailReply;


    @FindBy(xpath = "//button[span[text()='CONNECTED']]")
    public WebElement btnConnectedButton;

    @FindBy(xpath = "//md-menu-bar[@class='agent-dropdown-menu _md _md-open']/md-menu[@class='md-menu ng-scope _md _md-open']/button")
    public WebElement mnuAgentDropDwnMenu;

    @FindBy(xpath = "//button[span[text()='Settings']]")
    public WebElement btnSeetingButton;

    @FindBy(xpath = "//button[span[text()='Exit']]")
    public WebElement btnExitButton;

    @FindBy(xpath = "//div[@ng-if='interactionMissed']//span")
    public WebElement frmNewNotify;

    @FindBy(xpath = "//button[@ng-click='logout()']")
    public WebElement btnFinishWork;

    @FindBy(xpath = "//button[@ng-click='exit()']")
    public WebElement btnExit;

    @FindBy(xpath = "//div[@ng-switch-when='ACTIVE']")
    public WebElement workcardActive;

    @FindBy(xpath = "//button[@class='card-button md-icon-button aoc-customer-consult js-consult md-button']")
    public WebElement btnConsultOnConsultingAgent;

    @FindBy(xpath = "//button[@class='card-button md-icon-button aoc-transfer-forward js-transfer md-button']")
    public WebElement btnTransferOnConsultingAgent;

    @FindBy(xpath = "//card-container[1]//button[@ng-click='hold()']")
    public WebElement btnHoldOnConsultingAgent;

    @FindBy(xpath = "//card-container[1]//button[@ng-click='unhold()']")
    public WebElement btnUnholdOnConsultingAgent;

    @FindBy(xpath = "//input[@aria-label='Enter extension']")
    public WebElement txtEnterExt;

    // Call button against the consulted extension - to transfer
    @FindBy(xpath = "//button[@class='card-button md-icon-button aoc-transfer-forward js-transfer md-button']")
    public WebElement btnClickToCallTransfer;

    @FindBy(xpath = "//button[contains(@puppeteer-id,'consult-menu__services-Transfer')]")
    public WebElement btnServicesTransfer;

    @FindBy(xpath = "//md-menu-item[@class='services-list-item']")
    public List<WebElement> listItemsServicesTransfer;

    // Call button against the consulted extension - to consult
    @FindBy(xpath = "//button[@class='card-button md-icon-button aoc-customer-consult js-consult md-button")
    public WebElement btnClickToCallConsult;

    @FindBy(xpath = "//button[@aria-label='Open Dialpad']")
    public WebElement btnOpenDialPad;

    // Card Header title of the consulting agent)
    @FindBy(xpath = "//card-container[1]//card-header/span/span[@class='card__header-title']")
    public WebElement lblConsultingAgentCardHeaderTitle;

    @FindBy(xpath = "//card-container[1]//card-content/span[@class='card__details-text']")
    public WebElement lblConsultingAgentCardDetail;

    // Drop down button on conference call (to view the list of participants)
    @FindBy(xpath = "//card-header/span/span/button")
    public WebElement dropdownConferenceParticipants;

    @FindBys(@FindBy(xpath = "//card-header/span/span/ul/li"))
    public List<WebElement> conferenceParticipant;

    @FindBy(xpath = ".//card-group/card-container[2]/ng-switch/div/ng-include/div/card-content/span[2]")
    public WebElement lblConsultedExt;

    @FindBy(xpath = ".//card-container[2]//button[@aria-label='Transfer']")
    public WebElement btnTransferOnConsultedAgent;

    @FindBy(xpath = ".//card-container[2]//button[@aria-label='Consult']")
    public WebElement btnConsultOnConsultedAgent;

    @FindBy(xpath = ".//card-container[2]//button[@aria-label='Hold']")
    public WebElement btnHoldOnConsultedAgent;

    @FindBy(xpath = ".//card-container[2]//button[@ng-click='unhold()']")
    public WebElement btnUnholdOnConsultedAgent;

    @FindBy(xpath = "//card-container[2]//card-header/span/span[@class='card__header-title']")
    public WebElement lblConsultedAgentCardHeaderTitle;

    @FindBy(xpath = "//card-container[2]//card-content/span[@class='card__details-text']")
    public WebElement lblConsultedAgentCardDetail;

    @FindBy(xpath = "//button[@ng-if='card.capabilities.canEnd']")
    public WebElement btnEndCall;

    @FindBy(xpath = "//button[@ng-click='completeACW()']")
    public WebElement btnACW;

    @FindBy(xpath = "//button[@ng-click='extendACW()']")
    public WebElement btnExtendACW;

    @FindBy(xpath = "//button[@puppeteer-id='agent--dropdown-button']")
    public WebElement btnmenu;

    @FindBy(xpath = "//*[@id='ow_open_Social']")
    public WebElement btnopensocial;

    @FindBy(xpath = "//button[@ng-click='completeConference()']")
    public WebElement btnCompleteConsultAsConference;

    @FindBy(xpath = "(//button[@ng-click='completeTransfer()'])[1]")
    public WebElement btnCompleteConsultAsTransfer;

    @FindBy(xpath = "//div[@class='widget widget--suggested-content']")
    public WebElement suggestedContent;

    @FindBy(xpath = "//button[@class=\"trunk-access-code-button trunk-access-code-button-enabled\"]")
    public WebElement BtnEnableTrunkAccess;

    @FindBy(xpath = "//span[normalize-space()='Start Work & Go Ready']")
    public WebElement btnStartWorkGoReady;

    @FindBy(xpath = "//span[normalize-space()='Start Work & Go Not Ready']")
    public WebElement btnStartWorkGoNotReady;

    HashMap<Integer, String> DispositonCode = new HashMap<Integer, String>();
    HashMap<Integer, String> chatCards = new HashMap<Integer, String>();
    HashMap<Integer, String> chatURLs = new HashMap<Integer, String>();
    HashMap<Integer, String> chatPhrases = new HashMap<Integer, String>();
    HashMap<Integer, Integer> chatURLsWidth = new HashMap<Integer, Integer>();
    HashMap<Integer, Integer> chatPhrasesWidth = new HashMap<Integer, Integer>();

    @FindBy(xpath = "//button[@ng-click='accept()']")
    public WebElement ChatAcceptButton;

    @FindBy(xpath = "//button[@ng-click='end()']")
    public WebElement ChatEndButton;

    @FindBy(xpath = "//*[@aria-label ='Chat']")
    public WebElement SelectChat;

    @FindBy(xpath = "//textarea[contains(@placeholder, 'Type a message...')]")
    public WebElement ChatReplyAgentTextMessageBox;

    @FindBy(xpath = "//md-content[@cc-scrollbar='vertical']")
    public WebElement ChatMessageContainer;

    @FindBy(xpath = "//button[@ng-click='sendMessage(messageInput)']")
    public WebElement ChatSendMessageButton;

    @FindBy(xpath = "//md-icon[@flex='initial']")
    public WebElement ChatCardIdentificaiton;

    @FindBy(xpath = "//button[@ng-click='sendUrl(pagePushUrl.data.url)']")
    public WebElement ChatPagePushURLs;

    @FindBy(xpath = "//md-tab-item[text()='URLs']")
    public WebElement ChatPagePushURLsTab;

    @FindBy(xpath = "//md-tab-item[text()='Phrases']")
    public WebElement ChatSuggestedPhrasesTab;

    @FindBy(xpath = "//button[@ng-click='sendPhrase(phrase.data.text)']")
    public WebElement ChatSuggestedPhrases;

    @FindBy(xpath = "//button[@ng-click='completeACW()']")
    public WebElement ChatACWButton;

    @FindBy(xpath = ".//button[@id='ow_navigate_next']//span[contains(.,'Services')]")
    public WebElement btnServices;

    @FindBy(xpath = "//button[@ng-click='end()']")
    public WebElement btnCloseCall;

    @FindBy(xpath = "//md-icon[@class='color-white aoc-email']")
    public WebElement EmailCard;

    @FindBy(xpath = "//md-icon[@class='card__actions-icon--start aoc-email']")
    public WebElement AcceptEmail;

    @FindBy(xpath = "//md-icon[@class='card__actions-icon--end aoc-end ng-scope material-icons']")
    public WebElement EndEmail;

    @FindBy(xpath = "//button[@ng-click='reply()']")
    public WebElement EmailReplyButton;

    @FindBy(xpath = "//button[@ng-click='send()']")
    public WebElement EmailSendButton;

    @FindBy(xpath = "//button[@ng-click='cancel()']")
    public WebElement EmailCancelButton;

    @FindBy(xpath = "//div[@class='md-button _md-no-style']")
    public WebElement SelectSuggestedReply;

    @FindBy(xpath = "//button[@ng-click='completeACW()']")
    public WebElement btnWrapCall;
    // for SMS

    @FindBy(xpath = "//button[@ng-click='card.interactionType === 'OBSERVING' ? endObserve() : end()']")
    public WebElement Endmessage;

    @FindBy(xpath = "//button[@ng-click='accept()']")
    public WebElement Acceptmessage;

    @FindBy(xpath = "/html/body/div[1]/div[2]/md-content/cc-card[1]/md-card/md-card-header/md-card-header-text")
    public WebElement user1;

    @FindBy(id = "input_34")
    public WebElement MessageArea;

    @FindBy(xpath = "//button[@ng-click='sendUrl(pagePushUrl.data.url)']")
    public WebElement pagepushURLs;

    @FindBy(xpath = "//textarea[@ng-model='messageInput']")
    public WebElement messageinput;

    @FindBy(xpath = "//span[contains(text(),'URLs')]")
    public WebElement urls;

    @FindBy(xpath = "//button[@ng-click='sendPhrase(phrase.data.text)']")
    public WebElement autophrase;

    @FindBy(xpath = "//*[@id='ow_Icon_State2']")
    public WebElement lblAgentState;

    @FindBy(xpath = "//*[@id='ow_Icon_State1']")
    public WebElement lblAgentState1;

    @FindBy(xpath = ".//button[@aria-label='Generate Co-Browse Key']")
    public WebElement tabGetCobrowseSessionKey;

    @FindBy(xpath = ".//button[@title='Refresh']")
    public WebElement btnCobrowseSessionRefresh;

    @FindBy(xpath = ".//button[@aria-label='Request Control']")
    public WebElement btnRequestControlFromCustomer;

    @FindBy(xpath = ".//button[@ng-click='endCobrowse()']")
    public WebElement btnEndCobrowse;

    @FindBy(xpath = ".//input[@id='first_name']")
    public WebElement txtBoxFirstName;

    @FindBy(xpath = ".//input[@id='last_name']")
    public WebElement txtBoxLastName;

    @FindBy(xpath = ".//input[@id='ssn']")
    public WebElement txtBoxSocialSecurityNumber;

    @FindBy(xpath = "//div[@class='widget__header-controls']")
    public WebElement frameCobrowseForAgent;

    @FindBy(xpath = ".//button[@ng-click='requestControl()']")
    public WebElement btnrequestControlCobrowse;

    @FindBy(xpath = ".//button[@ng-click='resyncView()']")
    public WebElement btnRefreshCobrowse;

    @FindBy(xpath = "//h5[@class='widget__header aoc-chat']")
    public WebElement txtCobrowse;

    @FindBy(xpath = "//*[@id='cobrowse']/md-list/md-list-item[1]/div/button")
    public WebElement lnkTxtCobrowseURL;

    @FindBy(xpath = "//select[@id='name_prefix']")
    public WebElement drpdwnPrefix;

    @FindBy(xpath = "//input[@id='middle_name']")
    public WebElement txtBoxMiddleName;

    @FindBy(xpath = "//textarea[@id='address']")
    public WebElement txtBoxAddress;

    @FindBy(xpath = ".//select[@id='home_address_building_description']")
    public WebElement txtBoxBuildingDescription;

    @FindBy(xpath = "//input[@id='home_address_apartment_number']")
    public WebElement txtBoxHouseNumber;

    @FindBy(xpath = "//input[@id='city']")
    public WebElement txtBoxCity;

    @FindBy(xpath = "//input[@id='home_address_zip']")
    public WebElement txtBoxZipCode;

    @FindBy(xpath = ".//select[@id='home_address_state']")
    public WebElement drpdwnState;

    @FindBy(xpath = "//input[@id='home_phone']")
    public WebElement txtBoxContactNo;

    @FindBy(xpath = "//*[@aria-label ='Force end']")
    public WebElement ForceEndButton;

    @FindBy(xpath = "//input[@id='email']")
    public WebElement txtBoxEmail;

    @FindBy(xpath = "//input[@id='ssn']")
    public WebElement txtBoxSocialSecurityNo;

    @FindBy(xpath = "//select[@id='citizenship_code']")
    public WebElement drpdwnCitizenship;

    @FindBy(xpath = "//input[@id='dob_month']")
    public WebElement txtboxDOBMonth;

    @FindBy(xpath = "//input[@id='dob_day']")
    public WebElement txtboxDOBDay;

    @FindBy(xpath = "//input[@id='dob_year']")
    public WebElement txtboxDOBYear;

    @FindBy(id = "submitButton")
    public WebElement btnSubmit;

    @FindBy(xpath = "//*[@class='widget widget--cobrowse']")
    public WebElement cobrowseContainer;

    @FindBy(xpath = "//div[@class='limited-input ng-pristine ng-untouched ng-valid ps-always-show ps flex-grow ng-not-empty ps--active-y']//div[@class='ps__thumb-y']")
    public WebElement scrollbarInputTextbox;

    @FindBy(id = "ow_calcel_activate")
    public WebElement btnCancel;

    @FindBy(xpath = "//span[@aria-label='Agent ID']/following-sibling::span")
    public WebElement agentID;

    @FindBy(xpath = "//span[@id='ow_Icon_Sms']")
    public WebElement btnSMSChannelIcon;

    @FindBy(xpath = "//span[@id='ow_Icon_Voice']")
    public WebElement btnVOICEChannelIcon;

    @FindBy(xpath = "//span[@id='ow_Icon_Chat']")
    public WebElement btnCHATChannelIcon;

    @FindBy(xpath = "//span[@id='ow_Icon_Email']")
    public WebElement btnEMAILChannelIcon;

    @FindBy(xpath = "//span[@id='ow_Icon_Social']")
    public WebElement btnSOCIALChannelIcon;

    @FindBy(xpath = "//span[@id='ow_Icon_Messaging']")
    public WebElement btnMESSAGINGChannelIcon;

    @FindBy(xpath = "//button[@ng-click='select($index)']")
    public WebElement btnCustomerDetails;

    @FindBy(xpath = "//button[@id='ow_calcel_activate']")
    public WebElement CancelLogin;

    @FindBy(id = "tab__2")
    public WebElement btnCustomer_number;

    @FindBy(xpath = "//span[@ng-if='state.active && !isCobrowseActiveForCurrentInteraction']")
    public WebElement txtCobrowseSessionActive;

    @FindBy(xpath = "//div[text()='Denied control on Co-Browse session']")
    public WebElement tooltipControlRequestDenied;

    @FindBy(xpath = "//div[text()='Granted control on Co-Browse session']")
    public WebElement tooltipControlRequestGranted;

    @FindBy(xpath = "//span[text()='Session Closed by the Agent']")
    public WebElement diagBoxSessionClosedByAgent;

    @FindBy(xpath = "//span[text()='Co-Browse Session Dropped']")
    public WebElement tooltipCbSessionDropped;

    @FindBy(xpath = "//*[@id='ow_Card_Transfer_eabd5b37-143a-4abc-b565-4878d8996c56_btn']")
    public WebElement btnTransfer;

    @FindBy(xpath = "//form[@ng-submit='onUsersSearchInputSubmit()']//input[@aria-label='Search']")
    public WebElement inputSearchUserForTransfer;

    @FindBy(xpath = "//button[@class='card-button md-icon-button aoc-more js-more md-button md-ink-ripple']")
    public WebElement btnMore;

    @FindBy(xpath = "//work-code[@type='DISPOSITION']")
    public WebElement btntoShowDispositionCode;

    @FindBy(xpath = "//span[@aria-label='Alerting SMS Interaction']")
    public WebElement AlertingSMSInteraction;

    @FindBy(xpath = "//span[@aria-label='Alerting Chat Interaction']")
    public WebElement AlertingChatInteraction;

    @FindBy(xpath = "//span[@aria-label='Alerting Voice Interaction']")
    public WebElement AlertingVoiceInteraction;

    @FindBy(xpath = "//*[@id='ow_open_Chat']")
    public WebElement btnOpenChatWindowOnWorkspace;

    @FindBy(xpath = "//button[@ng-click='end()']")
    public WebElement EndButton;

    @FindBy(xpath = "//button[@id='ow_open_notifications']")
    public WebElement BtnNotifications;

    @FindBy(xpath = "//label[@aria-label='Import Dashboard']")
    public WebElement btnImportDashboard;

    @FindBy(xpath = "//@[@id='tab-content-88']")
    public WebElement CharactersLeft;

    @FindBy(xpath = "//*[@id='tab__2']/div/div[1]/div/div[1]/strong")
    public WebElement socialchannel;

    @FindBy(xpath = "//*[@id='tab__2']/div/div[1]/div/div[1]/span")
    public WebElement socialmode;

    @FindBy(xpath = "//button[normalize-space()='Upload All']")
    public WebElement btnUploadAll;
    @FindBy(xpath = "//div[@class='aoc-error-filled error-msg']")
    public WebElement messageAddAttachFile;

    @FindBy(xpath = "//input[@class='service-search-input ng-pristine ng-valid md-autofocus md-input ng-empty ng-touched']")
    public WebElement SearchService;

    @FindBy(xpath = "//*[@id='ow_open_Admin_Settings']")
    public WebElement btnAdminSettings;

    WebDriver driver;
    Wait<WebDriver> wait;
    Duration timeout = Duration.ofSeconds(120);
    Duration polling = Duration.ofSeconds(2);

    @FindBy(xpath = "//div[@ng-if='!card.isNailedUpCall']")
    public WebElement POMNailedUpCall;

    @FindBy(xpath = "//*[@aria-label='Active Outbound POM Interaction']")
    public WebElement POMWorkcard;


    @FindBy(xpath = "//span[@class='click-to-call__clickable-number']")
    public WebElement POM_CustomerNumber;

    @FindBy(xpath = "//*[@id='ow_open_My_Agents']")
    public WebElement btnopenagents;

    @FindBy(xpath = "//*[@id='input_28']")
    public WebElement searchagent;

    //Web Elements for Email approval and rejection
    @FindBy(xpath = "//button[span[text()='Review']]")

    public WebElement review_Button;

    @FindBy(xpath = "//div[@class=\"email-rejected-panel\"]//button[@aria-label=\"Details\"]")
    public WebElement btnDetailRejectEmail;

    @FindBy(xpath = "//*[@aria-label=\"Approve\"]")
    public WebElement radio_approve;

    @FindBy(xpath = "//*[@ng-click=\"sendEmail()\"]")
    public WebElement final_approve;

    @FindBy(xpath = "//*[@id=\"ow_Email_Field_CC\"]")
    public WebElement cc_button;

    @FindBy(xpath = "//*[@ng-click=\"toggleBcc()\"]")
    public WebElement add_bcc;

    @FindBy(xpath = "/html/body/div[1]/div/div[1]/context-canvas/div[2]/div[2]/div/div[1]/div/div/div/div/ng-form/fieldset/div[4]/md-chips/md-chips-wrap/div/div/input")
    public WebElement bcc_button;

    @FindBy(xpath = "//*[@ aria-label=\"Reject\"]")
    public WebElement radio_Reject;

    @FindBy(xpath = "//*[@id=\"tab__2\"]/div/div[1]/div/div/div/div/div[2]/md-menu/md-menu-button/button")
    public WebElement drop_down_reject;

    @FindBy(xpath = "/html/body/div[4]/md-menu-content/md-menu-item[1]/button")
    public WebElement Email_incomplete_info;

    @FindBy(xpath = "//*[@ ng-click=\"sendEmail()\"]")
    public WebElement reject_button;

    @FindBy(xpath = "//*[@ng-click=\"replyAll()\"]")
    public WebElement Email_Reply_all;

    @FindBy(xpath = "//*[@ng-click=\"sendEmail()\"]")
    public WebElement email_send;


    @FindBy(xpath = "//md-select[@ng-model='fontSize']//span//div[text()='Small']")
    public WebElement btnSmallFontSize;
    @FindBy(xpath = "(//md-select[@ng-model='fontSize']//span//div[text()='Normal'])[2]")
    public WebElement btnNormalFontSize;
    @FindBy(xpath = "//md-select[@ng-model='fontSize']//span//div[text()='Large']")
    public WebElement btnLargeFontSize;
    @FindBy(xpath = "//md-select[@ng-model='fontSize']//span//div[text()='Huge']")
    public WebElement btnHugeFontSize;

    //Web Elements for Defer Email
    @FindBy(xpath = "(//button[@class='card-button md-icon-button aoc-defer-in js-defer-in md-button md-ink-ripple'])[last()]")
    public WebElement Defer;

    @FindBy(xpath = "//*[@aria-label='Custom']")
    public WebElement CustomDefer;

    @FindBy(xpath = "//input[@aria-label='Enter date']")
    public WebElement Enterdate;

    @FindBy(xpath = "//*[@placeholder='HH']")
    public WebElement Enterhour;

    @FindBy(xpath = "//*[@placeholder='MM']")
    public WebElement Enterminutes;

    @FindBy(xpath = "//button[@ng-click='defer()']")
    public WebElement ClickDefer;

    @FindBy(xpath = "//button[@class='widget__button email-forward-button md-button_high-contrast md-button md-ink-ripple']")
    public WebElement ForwardEmail;

    @FindBy(xpath = "//cc-consult-menu[@menu-type='Transfer']/md-menu/button")
    public WebElement transferButton;

    @FindBy(xpath = "//*[@id='tab__2']/div/div[1]/div/div/div")
    public WebElement SelectEmailbox;

    @FindBy(xpath = "//*[@id='ow_Email_Field_To']")
    public WebElement ForwardTo;

    @FindBy(xpath = "//button[@class='widget__button email-send-button md-button_high-contrast md-button md-ink-ripple']")
    public WebElement Send;

    @FindBy(xpath = "//button[@aria-label='Open Deferred Interaction List']")
    public WebElement DeferEmailList;

    @FindBy(xpath = "//div[@id=\"count\" and @class=\"new-badge\"]")
    public WebElement deferEmailCount;

    @FindBy(xpath = "(//button[starts-with(@puppeteer-id,'retrieve-btn-')])[last()]")
    public WebElement retrievEmail;

    @FindBy(xpath = "//button[@id='ow_search_button_call']")
    private WebElement outboundCallButton;

    @FindBy(xpath = "//button[starts-with(@puppeteer-id,'consult-menu__team_Consult')]/span[text()='Team']")
    private WebElement team;

    @FindBy(xpath = "//a[@puppeteer-id='exit-redirect--link']")
    public WebElement loginRedirect;


    @FindBy(xpath = "//button[@aria-label='Start Work']/span")
    WebElement startWorkbtn;

    @FindBy(xpath = "//button[@ng-click='completeACW()']")
    public WebElement completeACW;

    @FindBy(xpath = "//div[contains(@class,'file-attachment__name')]")
    public List<WebElement> elAttachments;

    //Web Elements for open Customer History
    @FindBy(xpath = "*//div[contains(@class,'widget widget--customer-history-search')]//md-select[contains(@placeholder,'Search by')]")
    public WebElement searchByCHS;

    @FindBy(xpath = "*//div[text()='Date']")
    public WebElement searchByDate;

    @FindBy(xpath = "*//input[contains(@placeholder,'From')]")
    public WebElement inputDateFrom;

    @FindBy(xpath = "*//input[contains(@placeholder,'To')]")
    public WebElement inputDateTo;

    @FindBy(xpath = "*//div[text()='Customer Email']")
    public WebElement searchByCustomerEmail;

    @FindBy(xpath = "//div[@class=\"md-select-menu-container md-active md-clickable\"]//div[text()='Customer Email']")
    public WebElement searchByCustomerEmailCH;

    @FindBy(xpath = "*//input[contains(@placeholder,'Customer Email')]")
    public WebElement inputCustomerEmail;

    @FindBy(xpath = "*//div[contains(@class,'widget widget--customer-history-search')]//span[text()='Search']")
    public WebElement btnSearchCHS;

    @FindBy(xpath = "*//button[@ng-click=\"toggleSearchField('lastName')\"]")
    public WebElement surnameBtnCustomerSearch;

    @FindBy(xpath = "*//button[@aria-label=\"Add search by Name\"]")
    public WebElement nameBtnCustomerSearch;

    @FindBy(xpath = "*//button[@aria-label=\"Add search by Email\"]")
    public WebElement emailBtnCustomerSearch;

    @FindBy(xpath = "*//button[@aria-label=\"Add search by Phone\"]")
    public WebElement phoneBtnCustomerSearch;

    @FindBy(xpath = "*//button[@aria-label=\"Add search by Social handle\"]")
    public WebElement socialBtnCustomerSearch;

    @FindBy(xpath = "*//input[@ng-model=\"search.query.lastName\"]")
    public WebElement inputSurname;

    @FindBy(xpath = "*//input[@ng-model=\"search.query.firstName\"]")
    public WebElement inputName;

    @FindBy(xpath = "*//input[@ng-model=\"search.query.emailAddress\"]")
    public WebElement inputEmail;

    @FindBy(xpath = "*//input[@ng-model=\"search.query.phoneNumber\"]")
    public WebElement inputPhone;

    @FindBy(xpath = "*//input[@ng-model=\"search.query.socialMediaHandle\"]")
    public WebElement inputSocial;

    @FindBy(xpath = "*//input[contains(@placeholder,'Customer')]")
    public WebElement inputCustomer;

    @FindBy(xpath = "*//button[contains(@class,'ch-filter-btn')]")
    public WebElement btnSearchCustomer;

    @FindBy(xpath = "(//button[@class=\"aoc-history-search md-button md-ink-ripple\"])[1]")
    public WebElement btnShowHistoryCustomerSearch;

    @FindBy(xpath = "//md-input-container[@class=\"ch-type-selector md-input-has-placeholder md-input-has-value\"]//md-select[@ng-change=\"resetUserInput(searchField)\"]")
    public WebElement searchFieldCustomerHistory;

    @FindBy(xpath = "//md-option[@puppeteer-id=\"history-search_search-type-option__byCustomerId\"]")
    public WebElement searchByCustomer;

    @FindBy(xpath = "//cc-history-search[@widget=\"customerHistory\"]//button[@class=\"ch-filter-btn md-button md-ink-ripple\"]")
    public WebElement btnSearchCH;

    @FindBy(xpath = "//md-select[@ng-model=\"pagination.recordsPerPage\"]")
    public WebElement fieldPaginationPage;

    @FindBy(xpath = "(//span[@class=\"aoc-email\"])[1]/../..//button[contains(@type,'button')]")
    public WebElement btnOpenDetailEmail;

    @FindBy(xpath = "//span[@ng-if='detail.to']")
    public WebElement lblToInCustomerHistory;

    //    @FindBy(xpath = "//div[@class='text-editor layout-column flex']//div[@id='email--textarea']")
    @FindBy(xpath = "(//div[@class='text-editor__squire-container flex']//div[@id='email--textarea'])[3]")
    public WebElement getBodyContent;

    @FindBy(xpath = "(//div[@class='text-editor__squire-container flex']//div[@id='email--textarea'])[4]")
    public WebElement getBodyContentSignature;

    @FindBy(xpath = "(//button[@class=\"toolbar-actions__item aoc-link add-link\"])[2]")
    public WebElement elBtnInsertLink;


    @FindBy(xpath = "//button[@class=\"toolbar-actions__item aoc-link add-link toolbar-actions__item--highlight\"]")
    public WebElement elBtnUpdateLink;


    @FindBy(xpath = "//input[@puppeteer-id=\"text-to-display--insert-link\"]")
    public WebElement elTextToDisplay;

    @FindBy(xpath = "//input[@puppeteer-id=\"link-address--insert-link\"]")
    public WebElement elLinkAddress;

    @FindBy(xpath = "//input[@puppeteer-id=\"update-link--link-address\"]")
    public WebElement elUpdateLinkAddress;

    @FindBy(xpath = "//button[@puppeteer-id=\"insert-link-button--insert-link\"]")
    public WebElement elBtnSubmitInsertLink;

    @FindBy(xpath = "//button[@puppeteer-id=\"update-link--update-link-button\"]")
    public WebElement elBtnSubmitUpdateLink;
    @FindBy(xpath = "//md-dialog-content[@class=\'md-dialog-content\']")
    public WebElement getCloseConfirmMess;

    @FindBy(xpath = "//button[@ng-click='dialog.abort()']")
    public WebElement getCancelConfirmEndContact;

    @FindBy(xpath = "//button[@ng-click='dialog.hide()']")
    public WebElement getAcceptConfirmEndContact;

    @FindBy(xpath = "(//button[@class='toolbar-actions__item aoc-screen-captures'])[2]")
    public WebElement insertBtn;

    @FindBy(xpath = "(//button[@class='toolbar-actions__item aoc-screen-captures'])[1]")
    public WebElement insertBtn1;

    @FindBy(xpath = "//button[@puppeteer-id='image-pool__upload-new-file-button']")
    public WebElement uploadBtn;

    @FindBy(xpath = "//button[@puppeteer-id='image-pool__insert-selected-image-button']")
    public WebElement seleteImageBtn;

    @FindBy(xpath = "//md-grid-tile")
    public List<WebElement> existImageList;

    @FindBy(xpath = "//span[text()='Reply']")
    public List<WebElement> replyEmailBtn;

    @FindBy(xpath = "//span[contains(text(),'Send')]")
    public List<WebElement> sendEmailBtn;

    @FindBy(xpath = "//button[@ng-disabled='imageInUse']")
    public WebElement imageInUse;

    @FindBy(xpath = "//div[@id='email--textarea']/div[2]")
    public WebElement bodyEmailText;

    @FindBy(xpath = "//*[@puppeteer-id=\"email-attach-file-button\"]")
    public WebElement attachBtn;

    @FindBy(xpath = "//button[contains(text(),'Select Files')]")
    public WebElement seleteAttachmentBtn;

    @FindBy(xpath = "//button[contains(text(),'Upload All')]")
    public WebElement uploadAttachmentBtn;

    @FindBy(xpath = "//img[@data-url]")
    public WebElement imgSignleFromCust;

    @FindBy(xpath = "//button[@class='trunk-access-code-button trunk-access-code-button-enabled']")
    public WebElement btnNavAccessCode;

    @FindBy(xpath = "//button[@id='ow_search_button_call']")
    public WebElement btnNavCall;

    @FindBy(xpath = "//button[@id='ow_redial_last_number']")
    public WebElement btnNavLastNumber;

    @FindBy(xpath = "//button[@id='ow_call_supervisor']")
    public WebElement btnNavCallSup;

    @FindBy(xpath = "//button[@id='ow_create_email']")
    public WebElement btnNavCreatAdhoc;

    @FindBy(xpath = "//button[contains(@class,'toolbar__button-icon defer-button')]")
    public WebElement btnNavDeferredList;

    @FindBy(xpath = "(//div[@puppeteer-id='email-widget--textarea'])")
    public List<WebElement> bodyAdhoc;

    @FindBy(xpath = "//div[@id='ow_Email_Outbound_To']//input")
    public WebElement toEmailAdhoc;

    @FindBy(xpath = "//div[@id='ow_Email_Outbound_To']//md-chip[@index='0']//button")
    public WebElement clearToAddress;

    @FindBy(xpath = "//div[@id='ow_Email_Outbound_CC']//input")
    public WebElement ccEmailAdhoc;

    @FindBy(xpath = "//div[@id='ow_Email_Outbound_CC']//md-chip[@index='0']//button")
    public WebElement clearCCAdhoc;

    @FindBy(xpath = "//div[@ng-if='showBcc']//input")
    public WebElement bccEmailAdhoc;

    @FindBy(xpath = "//div[@ng-if='showBcc']//md-chip[@index='0']//button")
    public WebElement clearBCCAdhoc;

    @FindBy(xpath = "//input[@id='ow_Email_Field_Subject']")
    public WebElement subjFill;

    @FindBy(xpath = "//button[@ng-show='visibleButtons.quote']")
    public List<WebElement> getQuoteBtn;

    @FindBy(xpath = "//button[contains(@class,'quote toolbar-actions__item--highlight')]")
    public WebElement getHighLightQuote;

    @FindBy(xpath = "//div[@id='email--textarea']/blockquote")
    public WebElement getQuoteOnBody;

    @FindBy(xpath = "(//div[@puppeteer-id='email-widget--textarea'])")
    public List<WebElement> getEmailBody;

    @FindBy(xpath = "(//button[@puppeteer-value-id=\"suggested-content__response-phrase-\"])[1]")
    public WebElement elBtnSuggest;

    @FindBy(xpath = "(//div[@contenteditable=\"true\"])[2]")
    public WebElement elBodyReplyContent;

    @FindBy(xpath = "//input[@style='border-color: rgb(255, 255, 255);'][@placeholder='Enter date']")
    public WebElement checkValidDeferDate;

    @FindBy(xpath = "//input[@style='border-color: rgb(255, 255, 255);'][@placeholder='HH']")
    public WebElement checkValidDeferHour;

    @FindBy(xpath = "//input[@style='border-color: rgb(255, 255, 255);'][@placeholder='MM']")
    public WebElement checkValidDeferMin;

    @FindBy(xpath = "//input[@style='border-color: rgb(213, 0, 0);'][@placeholder='Enter date']")
    public WebElement checkInvalidDeferDate;

    @FindBy(xpath = "//input[@style='border-color: rgb(213, 0, 0);'][@placeholder='HH']")
    public WebElement checkInvalidDeferHour;

    @FindBy(xpath = "//input[@style='border-color: rgb(213, 0, 0);'][@placeholder='MM']")
    public WebElement checkInvalidDeferMin;

    @FindBy(xpath = "//span[@class='card__header-icon aoc-channel']")
    public WebElement getWorkcards;

    @FindBy(xpath = "//*[@ng-click=\"replyAll()\"]")
    public List<WebElement> email_Reply_all;

    @FindBy(xpath = "//button[@class=\"toolbar-actions__item aoc-link add-link\"]")
    public List<WebElement> btnInsertLink;

    @FindBy(xpath = "//button[contains(text(),'Retrieve draft email')]")
    public WebElement getRetrieveDraftEmail;

    @FindBy(xpath = "//*[contains(@class,'aoc-end md-icon-button')]")
    public WebElement btnDelete;

    @FindBy(xpath = "(//div[@puppeteer-id='email-widget--textarea'])")
    public List<WebElement> elEmailBody;

    @FindBy(xpath = "(//div[@puppeteer-id='email-widget--textarea'])[3]//div[3]")
    public WebElement div3InEmailBody;

    @FindBy(xpath = "//div[@class='widget widget--email-templates']")
    public WebElement widgetTemplate;

    @FindBy(xpath = "//span[contains(text(),'Forward')]")
    public WebElement btnForward;

    @FindBy(xpath = "//div[@class='search-line']//input")
    public WebElement inputSearchCategory;

    @FindBy(xpath = "//button[@ng-click='cancelTemplateView()']")
    public WebElement btnCancelTemplateView;

    @FindBy(xpath = "//button[@ng-click='insertTemplate(selectedTemplate)']")
    public WebElement btnInsertTemplate;

    @FindBy(xpath = "//button[@ng-click='cancelTemplateView()']")
    public WebElement btnCancelTemplate;

    @FindBy(xpath = "//button[@id='ow_Email_Cancel_btn']")
    public WebElement btnCancelEmailAdhoc;

    @FindBy(xpath = "(//*[@ng-model=\"autoInsert\"])[1]")
    public WebElement autoInsertSignature;

    @FindBy(xpath = "//md-content[@id='templates-md-content']//div[@class='md-virtual-repeat-scroller']")
    public WebElement scrollBarEmailTemplates;

    @FindBy(xpath = "//span//a[text()='Insert Signature']")
    public WebElement insertSignature;

    @FindBy(xpath = "//*[contains(@class,'widget__header aoc-settings')]")
    public WebElement widgetSettingsHeader;

    @FindBy(xpath = "//div[@id=\"email--textarea\"]//img")
    public WebElement imgContenSignature;

    @FindBy(xpath = "(//div[@id='email--textarea'])[1]")
    public WebElement htmlTextAreas;

    @FindBy(xpath = "(//textarea[@aria-label=\"Email signature text editor\"])[2]")
    public WebElement plainTextAreas;

    @FindBy(xpath = "//progress-button[@puppeteer-id='email-signature-html--save-button']//button[@type='button']")
    public WebElement saveHtmlSignaturesBtn;

    @FindBy(xpath = "(//md-content[@class=\"email-signature-composer _md\"]//text-idle[text()=\"Save\"])[2]")
    public WebElement savePlainSignaturesBtn;

    @FindBy(xpath = "//md-tab-item/span[text()=\"HTML\"]")
    public WebElement htmlSignatures;

    @FindBy(xpath = "//*[contains(text(),'Characters left')]/..")
    public WebElement charactersLeft;

    //    @FindBy(xpath = "//div[@ng-if='isTemplateView']//div[@id='email--textarea']/following-sibling::textarea")
    @FindBy(xpath = "//div[@ng-if='isTemplateView']//div[@id='email--textarea']")
//    @FindBy(xpath = "//cc-email-editor[@ng-model='selectedTemplate.content']")
    public WebElement bodyTemplate;

    @FindBy(xpath = "//div[@ng-if='isTemplateView']//textarea[@class='text-editor--textarea']")
    public WebElement bodyTemplatePlainText;

    @FindBy(xpath = "//div[@puppeteer-id='template-details__attachments-container']")
    public WebElement attachmentTemplate;

    @FindBy(xpath = "//md-checkbox[@type='checkbox' and @aria-label='Confirm Before Sending Email']")
    public WebElement checkBoxs;

    @FindBy(xpath = "//img[@data-hash]")
    public WebElement elInlineImageInsert;

    //    @FindBy(xpath = "//img[@data-url]")
    @FindBy(xpath = "//img[@alt=\"image\"]")
    public WebElement elInlineImageTranscript;

    @FindBy(xpath = "//button[@puppeteer-id=\"customer-history_toggle-interaction-details__1\"]")
    public WebElement btnOpenPreviousCHSEmail;

    @FindBy(xpath = "//button[@class=\"close close-modal\"]")
    public WebElement btnCloseCustomerJourney;

    @FindBy(xpath = "//*[@aria-label=\"Re-draw Journey\"]")
    public WebElement btnRedrawJourney;

    @FindBy(xpath = "//div[@class='timelineContent-StatusRow']//label[text()='Approval Required']")
    public WebElement labelApprovalRequired;

    @FindBy(xpath = "//span[contains(text(),\"Addresses must adhere to standard email format, containing '@' and domain name\")]")
    public WebElement emailsIncorrectAddressWarning;

    @FindBy(xpath = "//div[@class='widget widget--email']//button[contains(@class,'widget__button email-send-button')]")
    public WebElement sendAdhocEmailBtn;

    @FindBy(xpath = "//button[@class='md-primary md-raised margin-right md-button md-ink-ripple']")
    public WebElement btnRemoveinPool;

    @FindBy(xpath = "(//button[@class='toolbar-actions__item aoc-bold bold'])[2]")
    public WebElement btnBold;

    @FindBy(xpath = "(//button[@class='toolbar-actions__item aoc-italics italic'])[2]")
    public WebElement btnItalic;

    @FindBy(xpath = "//*[@puppeteer-id='email-signature--html']//button[@aria-label='Undo']")
    public WebElement undoBtn;

    @FindBy(xpath = "//textarea[@aria-label=\"Type a message...\"]")
    public List<WebElement> messageArea;

    @FindBy(xpath = "//button[@class=\"messenger-input__button md-icon-button aoc-send-chat md-button md-ink-ripple flex-none\"]")
    public List<WebElement> btnSendMessage;

    @FindBy(xpath = "//*[@ng-if=\"::inboundEmail.to\"]/span//strong[1]")
    public List<WebElement> getToAddress;

    @FindBy(xpath = "//button[contains(text(),'Cancel')]")
    public WebElement adHocCancelButton;

    @FindBy(xpath = "//h5[@class='widget__header aoc-home']")
    public WebElement txtWelcome;

    @FindBy(xpath = "//div[@id='ow_Email_Outbound_From']//div[@class='md-text']")
    public WebElement txtEmailFromFieldAdhoc;

    @FindBy(xpath = "(//div[@class='email-details layout-row']/table/tbody)//*[contains(text(),\"Date:\")]/parent::td//following-sibling::*/span")
    public WebElement dateDetail;
    @FindBy(xpath = "(//div[@class='email-details layout-row']/table/tbody)//*[contains(text(),\"From:\")]/parent::td//following-sibling::*/span")
    public WebElement fromDetail;

    @FindBy(xpath = "(//div[@class='email-details layout-row']/table/tbody)//*[contains(text(),\"To:\")]/parent::td//following-sibling::*/span")
    public WebElement toDetail;

    @FindBy(xpath = "//a[contains(text(),'Show Details')]")
    public WebElement detailBtn;

    @FindBy(xpath = "//cc-iframe-loader[@ng-show=\"currentPopId === pop.id\"]")
    public List<WebElement> iframes;

    @FindBy(xpath = "//div[@class='card__details-description']")
    public WebElement messageInWorkcard;

    @FindBy(xpath = "//tr[@ng-if=\"context.originatingAddress\"]/td[2]")
    public List<WebElement> originatingAddresses;

    @FindBy(xpath = "//tr[@ng-if=\"promptedDigits\"]/td[2]")
    public WebElement collectedDigit;

    @FindBy(xpath = "//div[@class='toolbar-actions__item toolbar-actions__group']//md-select[contains(@class,'ng-touched')]//span[@class='md-select-icon']/preceding-sibling::span")
    public WebElement txtFontSize;

    @FindBy(xpath = "//button[@puppeteer-id='update-link--remove-link-button']")
    public WebElement BtnRemoveLink;

    @FindBy(xpath = "//div[@id='email--textarea']//img")
    public List<WebElement> listImgBodySignature;

    @FindBy(xpath = "*//div[text()='Subject']")
    public WebElement searchBySubject;

    @FindBy(xpath = "*//div[text()='To address']")
    public WebElement searchByToAddress;

    @FindBy(xpath = "*//input[contains(@placeholder,'Subject')]")
    public WebElement inputSubject;

    @FindBy(xpath = "*//input[contains(@placeholder,'To Address')]")
    public WebElement inputToAddress;

    @FindBy(xpath = "//button[@puppeteer-id='customer-history_open-search-button']")
    public WebElement btnSearchCustomerHistory;

    @FindBy(xpath = "//button[@class=\"md-icon-button aoc-chevron-bidi-base-dir md-button md-ink-ripple\"]")
    public WebElement btnNextPageCH;

    @FindBy(xpath = "//div[@class=\"ch-results-container\"]//div[contains(@class,\"ch-scrollable-area\")]//table//tbody")
    public WebElement tableCHResult;

    @FindBy(xpath = "//button[@puppeteer-id='customer-history_close-search-button']")
    public WebElement btnCloseSearchCustomerHistory;

    @FindBy(xpath = "//div[@class='widget widget--customer-history']//form[contains(@class,'ch-search-input')]")
    public WebElement searchingFormCustomerHistory;

    @FindBy(xpath = "(//div[@class='scroller-item'])[1]")
    public WebElement btnBeforeItem;

    @FindBy(xpath = "//span[@class=\"toast__heading--text\"]")
    public List<WebElement> toastMessages;

    @FindBy(xpath = "//div[@class=\"text-editor layout-column flex text-editor--readonly\"]//div[@class=\"text-editor__squire\"]")
    public WebElement emailBodyInPreviewMode;

    @FindBy(xpath = "//span[@class='email-header-date flex']")
    public List<WebElement> listTimestampTsCH;

    @FindBy(xpath = "//cc-email-editor[@ng-model='msg.text']")
    public WebElement emailContentOfTranScript;

    @FindBy(xpath = "//input[@class=\"data-card-filter\"]")
    public WebElement searchBoxOnTranscript;

    @FindBy(xpath = "//*[@class='modal-body ps']")
    public WebElement contentOnCustomerJourney;

    @FindBy(xpath = "//*[@class='data-card-filter-matchResult']")
    public WebElement getFilterResult;

    @FindBy(xpath = "(//div[@puppeteer-id='email-widget--textarea'])")
    public List<WebElement> getReplyEmailBody;

    @FindBy(xpath = "//cc-email-editor[@ng-model='outboundEmail.body']//div[@class='text-editor__squire-container flex']/div[@id='email--textarea']")
    //cc-email-editor[@ng-model='outboundEmail.body']//div[@id=\"email--textarea\"]
    //cc-email-editor[@ng-model='outboundEmail.body']//textarea
    ////cc-email-editor[@ng-model='outboundEmail.body']//div[@class='text-editor__squire-container flex']//textarea
    public WebElement bodyEmailReply;

    @FindBy(xpath = "//cc-email-editor[@ng-model='outboundEmail.body']//textarea")
    public WebElement bodyEmailPlainTextReply;

    @FindBy(xpath = "//input[@placeholder='Search by phrase']")
    public WebElement searchPhrases;

    @FindBy(xpath = "//input[@placeholder='Search by url description or address']")
    public WebElement searchPPUrl;

    @FindBy(xpath = "//md-tab-item[text()='Phrases']")
    public WebElement widgetChatPhrases;

    @FindBy(xpath = "//md-tab-item[text()='URLs']")
    public WebElement widgetChatURLs;

    @FindBy(xpath = "//md-menu[@ng-if='canAddAttachment()']")
    public List<WebElement> btnTransferFile;

    @FindBy(xpath = "//button[contains(text(),'Select File')]")
    public WebElement btnSelectFile;

    @FindBy(xpath = "//button[contains(text(),'Upload File')]")
    public WebElement btnUploadFile;

    @FindBy(xpath = "//i[@aria-label='Cancel']")
    public WebElement btnCloseUploadFileWindow;

    @FindBy(xpath = "//button[contains(text(),'Preview draft email')]")
    public WebElement getPreviewDraftEmail;

    @FindBy(xpath = "//md-content[@class=\"draft__popover _md\"]")
    public WebElement previewDraftPopOver;

    @FindBy(xpath = "//md-menu[@ng-if='canAddAttachment()']")
    public WebElement buttonTransferFile;

    @FindBy(xpath = "//*[@puppeteer-id=\"messenger-status__char-counter\"]")
    public WebElement getCharactersLeft;

    @FindBy(xpath = "//span[text()='Close interaction']")
    public WebElement closeInteraction;

    @FindBy(xpath = "//button[text()='Close Interaction']")
    public WebElement endInteraction;

    @FindBy(xpath = "//span[contains(text(),'Review')]")
    public WebElement reviewBtn;

    @FindBy(xpath = "//div[@master='true']//div[@class='widget__content ps']")
    public WebElement ChatMessageContainerCoach;

    @FindBy(xpath = "//span[contains(text(),'Participants')]")
    public WebElement labelParticipant;

    @FindBy(xpath = "//button[@class='messenger-input__button md-icon-button aoc-send-chat md-button md-ink-ripple flex-none']")
    public List<WebElement> buttonSendMessage;

    @FindBy(xpath = "//*[@class='limited-input__exceeding']")
    public WebElement excessInputLimitSMS;

    @FindBy(xpath = "//div[contains(@class,'tab__CUSTOMER')]//md-content[@class='messenger-messages__inner _md ps ps--active-y']//div[@class='ps__thumb-y']")
    public WebElement verticalScrollbarMsgTabCus;

    @FindBy(xpath = "//div[contains(@class,'tab__MENTOR')]//md-content[@class='messenger-messages__inner _md ps ps--active-y']//div[@class='ps__thumb-y']")
    public WebElement verticalScrollbarMsgTabCOACH;

    @FindBy(xpath = "//div[contains(text(),'New Message')]")
    public List<WebElement> notificationNewMsg;

    @FindBy(xpath = "//div[@class='context-widget layout-row flex']//md-icon[@class='aoc-chevron-down aoc']")
    public WebElement dropdownNewMsg;

    @FindBy(xpath = "//div[@class='cc-tooltip top'][text()='End Co-Browse']")
    public WebElement tooltipEndCobrowse;

    @FindBy(xpath = "//div[@class='cc-tooltip right'][text()='Co-Browse']")
    public WebElement tooltipBtnCobrowseEnable;

    @FindBy(xpath = "//div[@class='cc-tooltip right'][text()='Co-Browse is disabled on passive interaction']")
    public WebElement tooltipBtnCobrowseDisable;

    @FindBy(xpath = "//button[@aria-label=\"Add more search parameters\"]")
    public WebElement btnAddMoreSearchParameters;

    @FindBy(xpath= "//a[@ng-click='closeCustomerDetails()']")
    public WebElement closeCustomerDetails;

    @FindBy(xpath = "//p[@class=\"email-body-content\"]")
    public WebElement journey_transcript_email_content;
    @FindBy(xpath = "//div[@class='email-info__subject email-no-hide-whitespaces']")
    public WebElement getSubject;

    @FindBy(xpath = "//label[normalize-space()='Automation']")
    public WebElement pointAutoInCusJourney;

    @FindBy(xpath = "//label[normalize-space()='Agent answered']")
    public WebElement pointAnsweredInCusJourney;

    @FindBy(xpath = "//label[@class='timelineContentStatus-Label'][normalize-space()='Contact Ended']")
    public WebElement pointEndedInCusJourney;

    @FindBy(xpath = "//*[@class='summaryRow']//*[text()='AccountId']//..//label[@class='summaryHeaderContent']")
    public WebElement accountIdVoice;

    @FindBy(xpath = "//*[@class='summaryRow']//*[text()='Topic']//..//label[@class='summaryHeaderContent']")
    public WebElement topicVoice;

    @FindBy(xpath = "//md-icon[@class='icon-block aoc-chevron-down aoc']")
    public WebElement dropdownConferenceParticipant;

    @FindBy(xpath = "//md-tab-item[text()='COACHED ']")
    public WebElement coachingTab;

    @FindBy(xpath = "//md-tab-item[text()='COACHED ']")
    public WebElement bargeinTab;

    @FindBy(xpath = "//label[normalize-space()='Transferred To Service']")
    public WebElement pointTransferToService;

    @FindBy(xpath = "//span[contains(text(),'View this external window')]")
    public List <WebElement> btnViewExternalWindows;

    @FindBy(xpath = "//span[contains(text(),'Open this external window')]")
    public List <WebElement> btnOpenExternalWindows;

    @FindBy(xpath = "//span[contains(text(),'Close this external window')]")
    public WebElement btnCloseExternalWindowScreepop;

    @FindBy(xpath = "//button[@aria-label='Open in new window']")
    public WebElement btnOpenExternalWindowScreepop;

    @FindBy(xpath = "//label[normalize-space()='Assisted Service']")
    public WebElement pointAssistedService;

    @FindBy(xpath = "//label[@class='timelineContentStatus-Label'][normalize-space()='Customer abandoned']")
    public WebElement pointCustomerAbandoned;

    @FindBy(xpath = "//div[@class='transcriptButtonContainer transcriptLabel']")
    public WebElement transcripIcon;

    @FindBy(xpath = "//div[@cc-tooltip= 'top'][@aria-label='AUX Reason Code']")
    public WebElement lblReasonCode;

    @FindBy(xpath = "//div[@class='transcript-container transcript-container-right']")
    public WebElement transcripCustomerJourney;

    @FindBy(xpath = "//label[@class='timelineContentStatus-Label'][normalize-space()='Customer abandoned']")
    public WebElement pointCustomerAbandonedCusJourney;

    @FindBy(xpath = "//div[@class=\"footer-label footer-label--aux\"]")
    public WebElement footLabelReasonCode;

    @FindBy(xpath = "//span[@puppeteer-id='email-to__incorrect-address-2']")
    public WebElement errorToAddressEmail;

    @FindBy(xpath = "//span[@puppeteer-id='email-cc__incorrect-address']")
    public WebElement errorFormatCcAddressEmail;

    @FindBy(xpath = "//span[@puppeteer-id='email-to__incorrect-address-1']")
    public WebElement errorFormatToAddressEmail;

    @FindBy(xpath = "//span[@puppeteer-id='email-bcc__incorrect-address']")
    public WebElement errorFormatBccAddressEmail;

    @FindBy(xpath = "//span[contains(text(),'Invalid date or time')]")
    public WebElement messInvalidDateTime;

    @FindBy(xpath = "//button[@aria-label='Cancel']")
    public WebElement cancelActivateAgent;

    @FindBy(xpath = "//span[normalize-space()='Go Ready']")
    public WebElement btnGoReady;

    @FindBy(xpath = "//span[normalize-space()='Go Not Ready']")
    public WebElement btnGoNotReady;

    @FindBy(xpath = "//a[@ng-click='makeOutboundCall(address)']")
    public WebElement makeOutboundCall_CustomerDetail;

    @FindBy(xpath = "//*[@aria-label='Active Outbound Voice Interaction']")
    public WebElement Workcard_voice;

    @FindBy(xpath = "//button[@aria-label='Start Work']//span[contains(text(),'Start Work')]")
    public WebElement btnStartWork;

    @FindBy(xpath = "//span[@aria-label=\"Missed Messages\"]")
    public List<WebElement> missedIcon;

    @FindBy(xpath = "//strong[@class=\"message-info__participantName\"]")
    public List<WebElement> nameOfMessageSender;

    @FindBy(xpath = "//a[@ng-click='makeOutboundCall(address)']")
    public List<WebElement> btnmakeOutboundCall;

    @FindBy(xpath = "//button[@ng-click='end()']")
    public List<WebElement> btn_End;

    @FindBy(xpath = "//div[@class='toolbar toolbar--ready']")
    public WebElement toolbarAgent;

    @FindBy(xpath = "//button[normalize-space()='More information']")
    public WebElement moreInfoCustomerDetail;

    @FindBy(xpath = "//span[@class='click-to-call__clickable-number']")
    public List<WebElement> clickAbleNumber;

    @FindBy(xpath = "//button[@aria-label='Disable Trunk Access']")
    public WebElement btn8438;

    @FindBy(xpath = "//button[@aria-label='Enable Trunk Access']")
    public WebElement btnEnable8438;

    @FindBy(xpath = "//input[@placeholder='Enter phone number']")
    public WebElement inputCallOutbound;

    @FindBy(xpath = "//md-icon[@class='aoc-voice-active aoc']")
    public WebElement btnCallOutbound;

    @FindBy(xpath = "//h4[@ng-if='!isAdministrator']")
    public WebElement getLayOutNameInAgent;

    @FindBy(xpath = "//md-tab-item/span[contains(text(),'Layout')]")
    public List<WebElement> LayoutTab;

    @FindBy(xpath = "//span[@ng-if='detail.latestActionId']")
    public WebElement detailID;

    @FindBy(xpath = "//md-menu[@ng-if='isCompressed']")
    public WebElement InitiateInteractionButton;

    @FindBy(xpath = "//cc-initiate-interaction[@ng-if='!isCompressed']")
    public WebElement isNotCompressed;

    @FindBy(xpath = "//md-content[@puppeteer-id='interaction-log__all-interaction-list']//span[@aria-label='Forwarded Email']")
    public WebElement iconForwardEmailInteractionLog;

    @FindBy(xpath = "//button[@aria-label='Open Interaction Log']")
    public WebElement openInteractionLog;

    @FindBy(xpath = "//div[@ng-switch-when='ACTIVE']//button[contains(@aria-label,'Complete as Conference')]")
    public WebElement completeasConference;

    @FindBy(xpath = "//div[@puppeteer-id='interaction-log__empty-all']//p[contains(text(),'No interactions to display')]")
    public WebElement txtNoInteractionsDisplay;

    @FindBy(xpath = "//span[@puppeteer-id='interaction-log__all-tab']")
    public WebElement interactionLogAllTab;

    @FindBy(xpath = "//span[@puppeteer-id='interaction-log__missed-tab']")
    public WebElement interactionLogMissedTab;

    @FindBy(xpath = "//span[@puppeteer-id='interaction-log__incoming-tab']")
    public WebElement interactionLogIncomingTab;

    @FindBy(xpath = "//span[@puppeteer-id='interaction-log__outgoing-tab']")
    public WebElement interactionLogOutgoingTab;

    @FindBy(xpath = "//md-next-button[@aria-label='Next Page']")
    public WebElement interactionBtnNextTab;

    @FindBy(xpath = "//md-content[@aria-label='Interaction Log']//md-tab-item[contains(@class,'md-active')]//..//..//..//..//md-tab-content[contains(@class,'md-active')]//div[@class='ps__rail-y']")
    public WebElement scrollbarInteractionlog;

    @FindBy(xpath = "//button[@aria-label='Clear All']")
    public WebElement btnClearInteractionLog;

    @FindBy(xpath = "//button[@id='ow_clear_all']")
    public WebElement btnClearNotification;

    @FindBy(xpath = "//div[@class='message']")
    public List<WebElement> messageNotifications;

    @FindBy(xpath = "//*[contains(@id,'ow_card_timer')]")
    public WebElement acwTimer;

    @FindBy(xpath = "//span[@ng-bind-html=\"card.summaryMessage | EmojiDisplay\"]")
    public WebElement labelExtendedACW;

    @FindBy(xpath = "//div[@id='ow_Email_Outbound_From']//span[text()='Select Value']")
    public WebElement selectValueFromAddressEmail;

    @FindBy(xpath = "//div[@class='cjv-errorContent errorDirection-ltr']//h2")
    public WebElement customerJourneyErrorContainer;

    @FindBy(xpath = "//md-option[contains(@ng-repeat,'address in fromAddresses')]//div[@class='md-text']")
    public List<WebElement> listAddressInFromAddresses;

    @FindBy(xpath = "//div[@class='footer-label']")
    public WebElement footLabel;

    @FindBy(xpath = "//card-header//span[@class='card__header-conference-title-text']")
    public WebElement cardHeaderLabel;

    @FindBy(xpath = "//div[@id='ow_Email_Outbound_From']//md-select-value//div[@class=\"md-text\"]")
    public WebElement valueEmailOutboundFrom;

    @FindBy(xpath = "//cc-notifications-log")
    public List<WebElement> bannerNotifications;

    @FindBy(xpath = "//button[@class=\"toolbar__button-icon aoc-worklog md-button md-ink-ripple\"]")
    public WebElement btnInteractionLog;

    @FindBy(xpath = "//div[contains(@class,'card--alerting')]")
    public WebElement cardAlert;

    @FindBy(xpath = "//cc-cards-area//card-group")
    public WebElement cardGroup;

    @FindBy(xpath = "//*[@id='ow_open_Welcome_Page']")
    public List<WebElement> btnWelcomePage;

    @FindBy(xpath = "//div[@class=\"widget__content ps\"]//div[@class=\"header\"]//strong")
    public WebElement customerNameCustomerDetail;

    @FindBy(xpath = "//span[@class=\"card__header-icon aoc-auto-answer\"]")
    public WebElement autoAnswerIcon;

    @FindBy(xpath = "//*[@class=\"card__header-auto-indicator\"]")
    public WebElement autoIndicator;

    @FindBy(xpath = "//*[contains(@ng-if, 'card.isAutoAnswerEnabled') and contains(@id,'ow_card_timer')]")
    public WebElement autoAnswerTimer;

    @FindBy(xpath = "//div[@class='widget widget--email-templates']//span[contains(text(),'Subject')]")
    public WebElement subjectTemplate;

    @FindBy(xpath = "//cc-email-editor[@ng-model='selectedTemplate.content']//div[@class='text-editor__squire-container flex']")
    public WebElement scrollBarPreviewTemplates;

    @FindBy(xpath = "//md-checkbox[contains(@aria-label,'Automatically insert my signature in all emails')]")
    public WebElement ckbAutoInsertEmail;

    @FindBy(xpath = "//div[@class='limit']")
    public WebElement charactersLeftSignature;

    @FindBy(xpath = "//span[@class=\"summaryHeaderText summaryHeaderCloseButton\"]")
    public WebElement closeTouchPointCJ;

    @FindBy(xpath = "//md-icon[@class=\"service-icon aoc-transfer-forward aoc\"]/..")
    public WebElement workCardTransferIcon;

    @FindBy(xpath = "//div[contains(@class,'ng-not-empty')]//*[@class='limited-input__content']")
    public WebElement inputContent;


    /**
     * <h1>RefreshWS</h1> This method is used for refresh Workspaces
     *
     * @throws AWTException
     */
    @Step("Refresh Workspaces")
    public void RefreshWS() throws AWTException {
        {
            driver.navigate().refresh();
            try {
                WebDriverWait wait = new WebDriverWait(driver, 10);
                wait.until(ExpectedConditions.alertIsPresent());
                Alert alert = driver.switchTo().alert();
                alert.accept();
                Thread.sleep(10 * 1000);
            } catch (Exception e) {
                //exception handling
            }
        }
    }

    /**
     * <h1>CCClientLoginPage</h1> Contructor
     *
     * @throws TimeoutException
     */
    public CCClientLoginPage(WebDriver driver) {
        this.driver = driver;
        wait = new FluentWait<WebDriver>(this.driver).withTimeout(timeout).pollingEvery(polling).ignoring(StaleElementReferenceException.class).ignoring(NoSuchElementException.class).ignoring(UnknownError.class);
    }

    /**
     * <h1>CCClient_Open_Page</h1> This method is used for launching Workspace URL on browser
     *
     * @param cclientURL  URL of Workspace
     * @param browserName Browser type
     */
    @Step("Launching Workspace URL on browser")
    public void CCClient_Open_Page(String cclientURL, String browserName) {

        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        log.info("Launching Agent WorkSpace " + cclientURL + " and accepting necessary certificates ");
        if (browserName.equalsIgnoreCase("IE")) {
            JavascriptExecutor js = (JavascriptExecutor) driver;
            js.executeScript("window.location=arguments[0]; ", cclientURL);
            this.wait(5);
        } else {
                                                /*String URL1 = "https://" + EnvSetup.CoBrowseClusterName + "/services/CoBrowse/";
                                                driver.get(URL1);*/
            driver.manage().deleteAllCookies();
            wait(3);
            driver.get(cclientURL);
            this.wait(2);
            try{
                driver.manage().window().maximize();
            } catch (UnhandledAlertException e) {
                Alert alert = driver.switchTo().alert();
                alert.dismiss();
            }
        }
        if (cclientURL.contains("https")) {
            this.setBrowserSSLCertificate(driver, browserName);
        }
        wait.until(ExpectedConditions.elementToBeClickable(btnSignIn));

    }

    /**
     * <h1>alertExists</h1> This method is used for checking any alert dialog on browser
     *
     * @param driver Selenium WebDriver object
     * @return true/false , false if there is exception, else return true
     */
    @Step("Checking any alert dialog on browser")
    public boolean alertExists(WebDriver driver) {
        try {
            log.info("Entering into Method : " + Thread.currentThread().getStackTrace()[1].getMethodName());
            driver.switchTo().alert();
            System.out.println("An Alert message appears");
            return true;
        } catch (Exception e) {
            log.info("Exception occurred in {alertExists} method...");
            return false;
        }
    }

    /**
     * <h1>appState</h1> This method is for coming back to the base state of the program for Workspace
     *
     * @param browser is browser type
     */
    @Step("Refresh Workspaces")
    public void appState(String browser) {
        try {
            Alert alert = driver.switchTo().alert();
            driver.switchTo().alert().dismiss();
            String alertText = alert.getText();
            System.out.println("Alert text is " + alertText);
            alert.dismiss();
        } catch (Exception e) {
        }
        this.CCClient_Open_Page(EnvSetup.CC_CLIENT_URL, browser);
    }

    /**
     * <h1>CCClient_Login</h1> This method is for login agent on Workspaces
     *
     * @param AgentName Agent username
     * @param pwd       Password
     * @return CCClientLoginPage class
     */
    @Step("Login agent on Workspace")
    public CCClientLoginPage CCClient_Login(String AgentName, String pwd) {
        if ((driver.findElements(By.xpath("//*[@id='ow_open_Welcome_Page']"))).size() == 0) { //the agent did not login on WS yet
            log.info("__________________________________________________________________________________________________________________");
            try {
                log.info("Logging in agent " + AgentName + " with Password " + pwd);
                wait.until(ExpectedConditions.elementToBeClickable(txtUsername)).clear();
                txtUsername.sendKeys(AgentName.trim());
                sUname = AgentName;
                txtPassword.clear();
                txtPassword.sendKeys(pwd.trim());
                btnSignIn.sendKeys(Keys.ENTER);
            } catch (Exception e) {
                log.info("Exception occured while logging in the agent even before activating it. Refer to the vodeo captured");
                //Assert.fail();}
            }
            try {

                WebDriverWait wait1 = new WebDriverWait(driver, 8000);
                wait1.until(ExpectedConditions.elementToBeClickable(btnAcivateButton));
                if ((driver.findElements(By.xpath("//button[@aria-label='Activate']"))).size() == 0) {
                    wait.until(ExpectedConditions.elementToBeClickable(txtUsername)).clear();
                    txtUsername.sendKeys(AgentName.trim());
                    sUname = AgentName;
                    txtPassword.clear();
                    txtPassword.sendKeys(pwd.trim());
                    btnSignIn.sendKeys(Keys.ENTER);
                }
                btnAcivateButton.click();
                /*wait.until(ExpectedConditions.elementToBeClickable(btnAcivateButton)).click();
                 */
            } catch (Exception e) {
                log.info("Exception Occured while activating the user succesfully logged in trying to click on the activate button again");
                btnAcivateButton.click();

            }

            log.info("Agent " + AgentName + " successfully logged in");
            log.info("_______________________________________________________________________________________________________________________________");
        }
        return this;
    }

    public void clickOnLoginRedirectLink() {
        List<WebElement> loginRedirects = driver.findElements(By.xpath("//a[@puppeteer-id='exit-redirect--link']"));
        if(loginRedirects.size() != 0) {
            click(driver, loginRedirect);
        }
    }

    @Step("Login agent on Workspace")
    public CCClientLoginPage CCClient_Login_Without_Acivate(String AgentName, String pwd) {
        if ((driver.findElements(By.xpath("//*[@id='ow_open_Welcome_Page']"))).size() == 0) { //the agent did not login on WS yet
            log.info("__________________________________________________________________________________________________________________");
            try {
                log.info("Logging in agent" + AgentName + "with Password " + pwd);
                wait.until(ExpectedConditions.elementToBeClickable(txtUsername)).clear();
                txtUsername.sendKeys(AgentName.trim());
                sUname = AgentName;
                txtPassword.clear();
                txtPassword.sendKeys(pwd.trim());
                btnSignIn.sendKeys(Keys.ENTER);
            } catch (Exception e) {
                log.info("Exception occured while logging in the agent even before activating it. Refer to the vodeo captured");
                //Assert.fail();}
            }
            try {

                WebDriverWait wait1 = new WebDriverWait(driver, 8000);
                wait1.until(ExpectedConditions.elementToBeClickable(btnAcivateButton));
                if ((driver.findElements(By.xpath("//button[@aria-label='Activate']"))).size() == 0) {
                    wait.until(ExpectedConditions.elementToBeClickable(txtUsername)).clear();
                    txtUsername.sendKeys(AgentName.trim());
                    sUname = AgentName;
                    txtPassword.clear();
                    txtPassword.sendKeys(pwd.trim());
                    btnSignIn.sendKeys(Keys.ENTER);
                }
                /*wait.until(ExpectedConditions.elementToBeClickable(btnAcivateButton)).click();
                 */
            } catch (Exception e) {
                log.info("Exception Occured while activating the user succesfully logged in trying to click on the activate button again");

            }

            log.info("Agent " + AgentName + " successfully logged in");
            log.info("_______________________________________________________________________________________________________________________________");
        }
        return this;
    }

    /**
     * <h1>Click_Widget</h1> This method is for clicking widget
     *
     * @param widget Widget name
     * @return Widget name
     */
    @Step("Click widget on Workspaces")
    public String Click_Widget(String widget) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        log.info("Clicking on the Channel widget to reply in case the default widget is not as required");
        switch (widget) {
            case "Welcome_Page":
//                wait(3);
                wait.until(ExpectedConditions.elementToBeClickable(btnopenWelcomePage));
                btnopenWelcomePage.click();
                break;

            case "Customer_Search":
//                wait(3);
                wait.until(ExpectedConditions.elementToBeClickable(btnopenCustomerSearch));
                btnopenCustomerSearch.click();
                break;

            case "Customer_Details":
//                wait(3);
                wait.until(ExpectedConditions.elementToBeClickable(btnopenCustomerDetails));
                wait(1);
                btnopenCustomerDetails.click();
                break;

            case "Cobrowse":
//                wait(3);
                wait.until(ExpectedConditions.elementToBeClickable(btnopenCustomerDetails));
                btnCobrowse.click();
                break;

            case "Customer_Journey":
//                wait(3);
                wait.until(ExpectedConditions.elementToBeClickable(btnopenCustomerJourney));
                btnopenCustomerJourney.click();
                break;

            case "SMS":
//                wait(5);
                wait.until(ExpectedConditions.elementToBeClickable(btnopensms));
                btnopensms.click();
                break;

            case "EMAIL":
//                wait(3);
                wait.until(ExpectedConditions.elementToBeClickable(btnopenemail));
                btnopenemail.click();
                break;

            case "CHAT":
//                wait(3);
                wait.until(ExpectedConditions.elementToBeClickable(btnopenchat));
                btnopenchat.click();
                break;
            case "Screenpop":
//                wait(3);
                wait.until(ExpectedConditions.elementToBeClickable(btnopenCustomerDetails));
                btnopenScreenpop.click();
                break;
            case "Settings":
                wait(2);
                wait.until(ExpectedConditions.elementToBeClickable(btnopenSettings));
                btnopenSettings.click();
                break;

            case "Help":
//                wait(3);
                wait.until(ExpectedConditions.elementToBeClickable(btnopenHelp));
                btnopenHelp.click();
                break;

            case "Social":
//                wait(3);
                wait.until(ExpectedConditions.elementToBeClickable(btnopensocial));
                btnopensocial.click();
                break;

            case "MYAGENTS":
//                wait(3);
                wait.until(ExpectedConditions.elementToBeClickable(btnopenagents));
                btnopenagents.click();
                break;

            default:
                log.info("Widget Not Found");

        }
        return widget;
    }

    /**
     * <h1>Make_Agent_Available</h1> This method is for make agent available
     *
     * @param ufullname Agent fullname
     * @return true/false , true if status is connected, else return false
     */
    @Step("Make agent available on Workspaces")
    public boolean Make_Agent_Available(String ufullname) {

        String AgentState = null;
        log.info("------------------------Setting Agent " + ufullname + " to AVAILABLE STATE------------------------------------------------");
        try {
//            Thread.sleep(5000);
            AgentState = Get_Agent_State();

            if (AgentState.equalsIgnoreCase("Logged_Out")) {
                if ((Put_Agent_In_Ready_State()) != true) {
                    return false;
                }
                log.info(ufullname + " Is now in AVAILABLE state");
                return true;
            }

            if (AgentState.equalsIgnoreCase("Connected")) {
                if ((Put_Agent_In_Ready_State()) != true) {
                    return false;
                }
                wait(5);
                boolean b = true;
                while (b != false) {
                    b = checkingForAlreadyPresentWorkCard();
                }
                b = true;
                wait(5);
                while (b != false) {
                    b = checkingForAlertingWorkCard();
                }
                wait(1);
                return true;
            }

            if (AgentState.equalsIgnoreCase("Not_Ready")) {
                if ((Put_Agent_In_Available_State_from_ACW()) != true) {
                    return false;
                }
//                return true;
            }

            if (AgentState.equalsIgnoreCase("Not_Ready_pending")) {
                log.info("-------------------------Agent was in Not Ready Pending state-----------------------------------");
                boolean b = true;
                while (b != false) {
                    b = checkingForAlreadyPresentWorkCard();
                }
                if ((Put_Agent_In_Available_State_from_ACW()) != true) {
                    return false;
                }
            }

            if (AgentState.equalsIgnoreCase("Ready")) {
                log.info("-------------------------Agent was already in available state-----------------------------------");
                if (checkStatusOfAgentChannels()) {
                    Put_Agent_In_Available_State_from_ACW();
                }
                wait(5);
                boolean b = true;
                while (b != false) {
                    b = checkingForAlreadyPresentWorkCard();
                }
                b = true;
                wait(5);
                while (b != false) {
                    b = checkingForAlertingWorkCard();
                }
                wait(1);
                try {
                    Finish_Work_For_Agent();
                    wait(1);
                    try {
                        btnWorkStartButton.click();
                    } catch (Exception e) {
                        btnWorkStartButton2.click();
                    }
                } catch (Exception e) {
                }
                return true;
            }
            if (AgentState.equalsIgnoreCase("Logout_Pending")) {
                Finish_Work_For_Agent();
                if ((Put_Agent_In_Ready_State()) != true) {
                    return false;
                }
                log.info("Agent is now in ready state");
//                return true;

            }
            if (AgentState.equalsIgnoreCase("Login_Pending")) {
                log.error("Agent state is Login_Pending, try to logout and login again");
                Finish_Work_For_Agent();
                RefreshWS();
                AgentState = Get_Agent_State();
                if (AgentState.equalsIgnoreCase("Connected")) {
                    if ((Put_Agent_In_Ready_State()) != true) {
                        return false;
                    }
                } else {
                    log.error("Agent state is Login_Pending, please check the configuration of Agent");
                    return false;
                }
            }
            if (AgentState.equalsIgnoreCase("null")) {
                log.info("Agent state is null");
                return false;
            }
            wait(5);
            boolean b = true;
            while (b != false) {
                b = checkingForAlreadyPresentWorkCard();
            }
            b = true;
            wait(5);
            while (b != false) {
                b = checkingForAlertingWorkCard();
            }
            wait(1);
            Finish_Work_For_Agent();
            wait(1);
            try {
                btnWorkStartButton.click();
            } catch (Exception e) {
                btnWorkStartButton2.click();
            }
            log.info("------------------------Agent made to Available state successfully------------------------");
            return true;
        } catch (Exception e) {
            log.info("Exception occured in Making the  Agent to  Available State", e);
//            Assert.fail("Exception occured in Making the  Agent to  Available State");
            return false;
        }

    }//Make_Agent_Available


    /**
     * <h1>checkingForAlreadyPresentWorkCard</h1> This method is for checking the working workcard is presenting on Workspaces, then close it
     *
     * @return true/false false if there is exception ,else return true
     * @throws ElementNotVisibleException
     */
    @Step("Checking the working workcard is presenting on Workspaces, then close it")
    public boolean checkingForAlreadyPresentWorkCard() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        boolean b = true;
        try {
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            log.info(EndButton.isDisplayed());
            if (driver.findElements(By.xpath("//div[@aria-label='Your email was rejected']")).size() == 1) {
                log.info("This is an rejected email.");
                Click_Widget("EMAIL");
                log.info("Click Close Interaction button");
                executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button/span[.='Close interaction']")));
                wait(1);
                executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button[.='Close Interaction']")));
            }
            if (driver.findElements(By.xpath("//div[@aria-label='E-mail verification is required']")).size() == 1) {
                log.info("This is an approval email.");
                Click_Widget("EMAIL");
                log.info("Click Review email");
                executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button/span[.='Review']")));
                log.info("Approve the Email");
                email_approval_feature();
            }

            if (EndButton.isDisplayed()) {
                log.info("End button displayed");
                EndButton.click();
                if (driver.findElements(By.xpath("//button[.='End Interaction']")).size() == 1) {
                    log.info("This is an adhoc email.");
                    log.info("Click End Interaction");
                    driver.findElement(By.xpath("//button[.='End Interaction']")).click();
                } else
                    Wrap_call();
            }
            log.info(ForceEndButton.isDisplayed());
            if (ForceEndButton.isDisplayed()) {
                log.info("Force End button displayed");
                ForceEndButton.click();
                Wrap_call();
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.info("No extra Active work card found");
            b = false;
        }

        return b;
    }

    /**
     * <h1>checkingForAlertingWorkCard</h1> This method is for checking the alerting workcard is presenting on Workspaces, accept it then close it
     *
     * @return true/false ,false if there is exception , else return true
     * @throws NoSuchElementException
     */
    @Step("Checking the alerting workcard is presenting on Workspaces, accept it then close it")
    public boolean checkingForAlertingWorkCard() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        boolean b = true;
        try {
            while (Acceptmessage.isDisplayed()) {
                boolean rejected = false;
                log.info("WorkCard found");
                if (driver.findElements(By.xpath("//div[@aria-label='Your email was rejected']")).size() == 1) {
                    log.info("This is an rejected email.");
                    rejected = true;
                }
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button[@ng-click='accept()']")));
                wait(2);
                log.info("Accepted contact successfully");
                if (rejected) {//This is rejected email
                    Click_Widget("EMAIL");
                    log.info("Click Close Interaction button");
                    executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button/span[.='Close interaction']")));
                    wait(1);
                    executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button[.='Close Interaction']")));
                } else { //normal contact
                    EndButton.click();
                }
                Wrap_call();
                log.info("Release contact successfully");
                wait(2);
            }
        } catch (Exception e) {
            log.info("No extra Alerting work card found");
            b = false;
        }
        return b;
    }

    /**
     * <h1>VerifyifNewUnwantedWorkCardPresent</h1> This method is for checking the alerting workcard is presenting on Workspaces, accept it then close it
     */
    @Step("Checking the alerting workcard is presenting on Workspaces, accept it then close it")
    public void VerifyifNewUnwantedWorkCardPresent() {

        try {


            if (Acceptmessage.isDisplayed()) {
                Acceptmessage.click();
                wait.until(ExpectedConditions.elementToBeClickable(EndButton));
                EndButton.click();
                Wrap_call();
                wait(2);
                try {
                    if (Acceptmessage.isDisplayed())
                        Acceptmessage.click();
                    wait.until(ExpectedConditions.elementToBeClickable(EndButton));
                    EndButton.click();
                    Wrap_call();
                } catch (Exception e) {
                    log.info("No extra new workcard present");
                }
            }

            if (EndButton.isDisplayed()) {
                wait.until(ExpectedConditions.elementToBeClickable(EndButton));
                EndButton.click();
                Wrap_call();

            }
            try {
                if (EndButton.isDisplayed()) {
                    wait.until(ExpectedConditions.elementToBeClickable(EndButton));
                    EndButton.click();
                    Wrap_call();

                }
            } catch (Exception e) {
                log.info("No extra active workcard found");
            }


        } catch (Exception e) {
            log.info("no more Unwanted workCard  present");

        }


    }

    /**
     * <h1>AcceptAllContatcsForCleanup</h1> This method is for checking the alerting workcard is presenting on Workspaces, accept it then close it
     */
    @Step("Checking the alerting workcard is presenting on Workspaces, accept it then close it")
    public void AcceptAllContatcsForCleanup() throws AWTException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        switch (checkStatusOfAllAgentChannels()) {
            case 1://not ready
                Put_Agent_In_Available_State_from_ACW();
                break;
            case 2://logout
                Put_Agent_In_Ready_State();
                break;
        }
        wait(2);
        RefreshWS();
        try {
            log.info("Cleaning up alerting workcards.");
            if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), 60) != null)) {
                int numOfContacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']")).size();
                while (numOfContacts > 0) {
                    log.info("WorkCard found while logging out: " + numOfContacts);
                    List<WebElement> contacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']"));
                    List<WebElement> workcards = driver.findElements(By.xpath("//card-container[@interaction-state='ALERTING']"));
                    for (int i = 0; i <= contacts.size(); i++) {
                        boolean rejected = false;
                        String channelType = workcards.get(i).getAttribute("interaction-channel");
                        if (channelType.equals("VOICE")) {
                            channelType = "Voice";
                        } else if (channelType.equals("EMAIL")) {
                            channelType = "Email";
                        } else if (channelType.equals("CHAT")) {
                            channelType = "Chat";
                        } else if (channelType.equals("MESSAGING")) {
                            channelType = "Messaging";
                        }
                        log.info("Accept contact " + channelType);
                        String ID = GETIDS(channelType);
                        contacts.get(i).click();
                        wait(1);
                        log.info("Accepted contact successfully. Getting service name: ");
                        WebElement serviceName = driver.findElement(By.xpath("//div[@id='ow_Service_Name_" + ID + "']/span"));
                        log.info(serviceName.getText());
                        if (driver.findElements(By.xpath("//div[@aria-label='Your email was rejected']")).size() == 1) {
                            log.info("This is an rejected email.");
                            rejected = true;
                        }
                        JavascriptExecutor executor = (JavascriptExecutor) driver;
                        if (rejected) {//This is rejected email
                            Click_Widget("EMAIL");
                            log.info("Click Close Interaction button");
                            executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button/span[.='Close interaction']")));
                            wait(1);
                            executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button[.='Close Interaction']")));
                        } else { //normal contact
                            EndButton.click();
                        }
                        Wrap_call();
                        wait(1);
                    }
                    numOfContacts = 0;
                    wait(2);
                    if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), 10) != null)) {
                        numOfContacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']")).size();
                    } else {
                        numOfContacts = 0;
                    }
                }
            }
        } catch (Exception e) {
            log.info("Extra WorkCard not found");
        }

    }

    /**
     * <h1>Get_Agent_State</h1> This method is for getting current state of agent
     *
     * @return agent state as Connected or Ready...
     */
    @Step("Getting current state of agent")
    public String Get_Agent_State() {
        String State = "null";
        for(int i = 0; i < 10; i++) {
            if (driver.findElements(By.xpath("//*[@id='ow_Icon_State2']")).size()> 0){
                break;
            }
            wait(1);
        }
        wait.until(ExpectedConditions.visibilityOf(lblAgentState));
        String a1state = lblAgentState.getText();
        String[] a2state1 = a1state.split("\\(");
        String agentState = a2state1[0].toString().trim();
        if ((agentState.equalsIgnoreCase(EnvSetup.CC_CLIENT_CONNECTED_STATE.toString().trim()))) {
            State = "Connected";
            log.info("Agent current state : " + State);
            return State;
        }

        if ((agentState.equalsIgnoreCase(EnvSetup.CC_CLIENT_NOT_READY_STATE.toString().trim()))) {
            State = "Not_Ready";
            log.info("Agent current state : " + State);
            return State;
        }
        if ((agentState.equalsIgnoreCase(EnvSetup.CC_CLIENT_READY_STATE.toString().trim()))) {
            State = "Ready";
            log.info("Agent current state : " + State);
            return State;
        }
        if ((agentState.equalsIgnoreCase(EnvSetup.CC_CLIENT_LOGGED_OUT_STATE.toString().trim()))) {
            State = "Logged_Out";
            log.info("Agent current state : " + State);
            return State;
        }//LOGIN PENDING
        if ((agentState.equalsIgnoreCase(EnvSetup.CC_CLIENT_LOGIN_PENDING_STATE.toString().trim()))) {
            State = "Login_Pending";
            log.info("Agent current state : " + State);
            return State;
        }
        if ((agentState.equalsIgnoreCase(EnvSetup.CC_CLIENT_LOGOUT_PENDING_STATE.toString().trim()))) {
            State = "Logout_pending";
            log.info("Agent current state : " + State);
            return State;
        }
        if (agentState.equalsIgnoreCase("NOT READY PENDING")) {
            State = "Not_Ready_pending";
            log.info("Agent current state : " + State);
            return State;
        }


        return State;
    } // Get_Agent_State

    /**
     * <h1>Put_Agent_In_Available_State_from_ACW</h1> This method is for put agent on ready state when on not ready state or ACW
     *
     * @return true/false true if agent is ready state, else return false
     */
    @Step("Put agent on ready state when on not ready state or ACW")
    public boolean Put_Agent_In_Available_State_from_ACW() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        log.info("Setting Agent State from ACW to Ready");
        try {
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@class='toolbar__button-dropdown md-button md-ink-ripple']"))).click();
            wait(1);
            executor.executeScript("arguments[0].click();",
                    driver.findElement(By.xpath("//button[@id='ow_go_ready']")));
            return true;
        } catch (Exception e) {
            try {
                RefreshWS();
            } catch (AWTException e1) {
                e1.printStackTrace();
            }
            try {
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@class='toolbar__button-dropdown md-button md-ink-ripple']"))).click();
                wait(1);
                executor.executeScript("arguments[0].click();",
                        driver.findElement(By.xpath("//button[@id='ow_go_ready']")));
                return true;
            } catch (Exception e2) {
                log.info("Exception occured in PutAgentIn available state function ");
                return false;
            }

        }
    }

    /**
     * <h1>SetAgentReadyAfterACW</h1> This method is for put agent on ready state when on not ready state or ACW, and store timestamp
     *
     * @param formatTime format of datetime
     * @return sstring of timestamp , the timestamp when agent is set to ready
     */
    @Step("Put agent on ready state when on not ready state or ACW, and store timestamp")
    public String SetAgentReadyAfterACW(String formatTime) { //Set agent ready when agent is Not Ready state, and note time
        log.info("Setting Agent State from ACW to Ready");
        try {
//            JavascriptExecutor executor = (JavascriptExecutor) driver;
//            executor.executeScript("arguments[0].click();",
//                    driver.findElement(By.xpath("//button[@puppeteer-id='agent--dropdown-button']")));
            WebElement btnDropdown = driver.findElement(By.xpath("//button[@puppeteer-id='agent--dropdown-button']"));
            wait(1);
            Actions actions = new Actions(driver);
            log.info("Click on dropdown button ");
            actions.moveToElement(btnDropdown).click().perform();
            wait(2);
            log.info("Click on Ready");
            actions.moveToElement(driver.findElement(By.xpath("//button[@puppeteer-id='go-ready--dropdown-button']"))).click().perform();
            String time = getCurrentTimeByFormat(formatTime);
            return time;
        } catch (Exception e) {
            log.info("Exception occured in PutAgentIn available state function ");
            return null;
        }
    }

    /**
     * <h1>makeAgentGoReady</h1> This method is for put agent on ready state
     */
    @Step("Put agent on ready state")
    public void makeAgentGoReady() {
        try {
            log.info("Make agent ready");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@class='toolbar__button-dropdown md-button md-ink-ripple']"))).click();
            WebElement element1 = driver.findElement(By.xpath("//button[@ng-click='goReady()']"));
            element1.click();
            log.info("Agent state changed to ACW state");
            wait(3);
        } catch (Exception e) {
            log.info("Exception occured in make agent ready");
        }
    }

    /**
     * <h1>clickOnStartWorkBtn</h1> this method is use to click on start work button..
     */
    public void clickOnStartWorkBtn() {
        wait(3);
        click(driver, startWorkbtn);
    }

    /**
     * <h1>Put_Agent_In_Ready_State</h1> This method is for put agent on ready state
     *
     * @return true/false , true if agent is put to ready state, else return false
     */
    @Step("Put agent on ready state")
    public boolean Put_Agent_In_Ready_State() {
        if (EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        log.info("Agent start work");
        try {
            wait.until(ExpectedConditions.elementToBeClickable(btnWorkStartButton2)).click();

        } catch (Exception e) {
            wait.until(ExpectedConditions.elementToBeClickable(btnWorkStartButton)).click();
        }
        return true;
    }

    /**
     * <h1>Put_Agent_In_ACWState</h1> This method is for put agent on ACW state
     *
     * @return true/false , true if agent is put to ACW state, else return false
     */
    @Step("Put agent on ACW state")
    public boolean Put_Agent_In_ACWState() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            wait.until(ExpectedConditions.visibilityOf(btnmenu));
            btnmenu.click();
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();",
                    driver.findElement(By.xpath("//button[@ng-click='goNotReady(acw.code)']")));
            log.info("-----------------------------------Agent state changed to ACW state--------------------------------------------");
            return true;
        } catch (Exception e) {
            log.info("Exception occured in PutAgentIn ACW state function ");
            return false;
        }
    }

    /**
     * <h1>Check_For_Call_Alert_And_AcceptCall</h1> This method is for check the contact is alerting then accept it
     *
     * @param secs time to wait
     * @return true/false , true if the contact can be accepted, else return false
     */
    @Step("Check the contact is alerting then accept it")
    public boolean Check_For_Call_Alert_And_AcceptCall(int secs) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        switch (checkStatusOfAllAgentChannels()) {
            case 1://not ready
                Put_Agent_In_Available_State_from_ACW();
                break;
            case 2://logout
                Put_Agent_In_Ready_State();
                break;
        }
        try {

            // wait.until(ExpectedConditions.refreshed(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.xpath("//button[@ng-click='accept()']"))));
            if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), secs) != null)) {
                log.info("call alert displayed");
                String channelType = getChannelTypeOfAlertingContact();
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();",
                        driver.findElement(By.xpath("//button[@ng-click='accept()']")));
                log.info("call is answered successfully");
                if (!channelType.equals("")) {
                    String ID = GETIDS(channelType);
                    log.info("Getting service name: ");
                    WebElement serviceName = driver.findElement(By.xpath("//div[@id='ow_Service_Name_" + ID + "']/span"));
                    log.info(serviceName.getText());
                }
                return true;
            } else {
                RefreshWS();
                if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), secs) != null)) {
                    log.info("call alert displayed");
                    String channelType = getChannelTypeOfAlertingContact();
                    JavascriptExecutor executor = (JavascriptExecutor) driver;
                    executor.executeScript("arguments[0].click();",
                            driver.findElement(By.xpath("//button[@ng-click='accept()']")));
                    log.info("call is answered successfully");
                    if (!channelType.equals("")) {
                        String ID = GETIDS(channelType);
                        log.info("Getting service name: ");
                        WebElement serviceName = driver.findElement(By.xpath("//div[@id='ow_Service_Name_" + ID + "']/span"));
                        log.info(serviceName.getText());
                    }
                    return true;
                } else {
                    log.info("call alert is not display");
                    return false;
                }
            }

        } catch (Exception e) {
            log.info("Exception occurs in Accepting call function ");
            return false;
        }

    }

    /**
     * <h1>getChannelTypeOfAlertingContact</h1> This method is for getting channel type of alerting contact
     *
     * @return channel type as Voice/Email...
     */
    @Step("Getting channel type of alerting contact")
    public String getChannelTypeOfAlertingContact() {
        String channelType = "";
        WebElement workcard = driver.findElement(By.xpath("//card-container[@interaction-state='ALERTING']"));

        channelType = workcard.getAttribute("interaction-channel");
        if (channelType.equals("VOICE")) {
            channelType = "Voice";
        } else if (channelType.equals("EMAIL")) {
            channelType = "Email";
        } else if (channelType.contains("CHAT")) {
            channelType = "Chat";
        } else if (channelType.equals("MESSAGING")) {
            channelType = "Messaging";
        }
        log.info("Accept contact " + channelType);

        return channelType;
    }

    /**
     * <h1>Put_Agent_In_Not_Ready_State</h1> This method is to put agent on not ready state
     *
     * @param idx index of Not Ready code on list
     * @return true/false , true if agent can be put in ready state, else return false
     */
    @Step("Set Agent not ready with code")
    public boolean Put_Agent_In_Not_Ready_State(int idx) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            log.info("Make agent not ready with reason code.");
            wait(1);
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();",
                    driver.findElement(By.xpath("//button[@class='toolbar__button-dropdown md-button md-ink-ripple']")));
            executor.executeScript("arguments[0].click();",
                    driver.findElement(By.xpath("//button[@puppeteer-id='go-not-ready--dropdown-button']")));
            List<WebElement> element1 = driver.findElements(By.xpath("//button[@ng-click='goNotReady(reason.code)']"));
            WebElement e = element1.get(idx);
            e.click();
            log.info("Agent state changed to ACW state");
            wait(7);
            return true;

        } catch (Exception e) {
            log.info("Exception occured in PutAgentIn ACW state function ");
            e.printStackTrace();
            return false;
        }
    }

    /**
     * <h1>Put_Agent_In_Not_Ready_State</h1> This method is for setting agent not ready with code, and store timestamp
     *
     * @param codeNumber Not Ready code number
     * @param formatTime Format datetime
     * @return string of timestamp , the timestamp when agent is set as Not ready state
     */
    @Step("Setting agent not ready with code, and store timestamp")
    public String setAgentNotReadyCode(String codeNumber, String formatTime) { //Set agent not ready with reason code and note time
        try {
            if (EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
                driver.switchTo().window(driver.getWindowHandle());
            driver.findElement(By.xpath("//button[@puppeteer-id='agent--dropdown-button']")).click();
            wait(1);
            driver.findElement(By.xpath("//button[@puppeteer-id='go-not-ready--dropdown-button']")).click();
            log.info("Clicking on Search field, then input not ready code");
            Actions actions = new Actions(driver);
            WebElement inputSearch = driver.findElement(By.xpath("//input[@puppeteer-id='not-ready__reason-codes-search-input']"));
            wait(1);
            actions.moveToElement(inputSearch).doubleClick().perform();
            wait(1);
            actions.moveToElement(inputSearch).sendKeys(Keys.BACK_SPACE).perform();
            inputSearch.clear();
            wait(1);
            actions.moveToElement(inputSearch).sendKeys(codeNumber).perform();
            wait(3);
            log.info("Clicking on code for set not ready");
            if (driver.findElements(By.xpath("//div[contains(text(),'" + codeNumber + "')]")).size() > 1) {
                List<WebElement> codes = driver.findElements(By.xpath("//div[contains(text(),'" + codeNumber + "')]"));
                WebElement code = codes.get(codes.size() - 1);
                wait(1);
                actions.moveToElement(code).click().perform();
            } else {
                WebElement code = driver.findElement(By.xpath("//div[contains(text(),'" + codeNumber + "')]")); // old xpath ="//div[@title='" + codeNumber + "']/.."
                wait(1);
                actions.moveToElement(code).click().perform();
            }


            String NRRCDate2 = getCurrentTimeByFormat(formatTime);
            log.info("Agent state changed to Not Ready state with code " + codeNumber);
            return NRRCDate2;

        } catch (Exception e) {
            log.info("Exception occured in set agent not ready code ");
            return null;
        }
    }

    /**
     * <h1>putAgentAdditionalWork</h1> This method is for put agent on Additional work state, and store timestamp
     *
     * @param formatTime Format datetime
     * @return string of timestamp , the timestamp when agent is put to Additional work
     */
    @Step("Put agent on Additional work state, and store timestamp")
    public String putAgentAdditionalWork(String formatTime) { //Put agent on Additional Work state and note time
        try {
            if (EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
                driver.switchTo().window(driver.getWindowHandle());
            driver.findElement(By.xpath("//button[@puppeteer-id='agent--dropdown-button']")).click();
            wait(1);
            driver.findElement(By.xpath("//button[@puppeteer-id='additional-work--dropdown-button']")).click();
            String Date = getCurrentTimeByFormat(formatTime);
            log.info("Agent state changed to Additional Work");
            return Date;

        } catch (Exception e) {
            log.info("Exception occured in put agent Additional Work");
            return null;
        }
    }

    /**
     * <h1>putAgentAdditionalWork</h1> This method is for put agent on Additional work state
     */
    @Step("Put agent on Additional work state")
    public void putAgentAdditionalWork() { //Put agent on Additional Work state and note time
        try {
            if (EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
                driver.switchTo().window(driver.getWindowHandle());
            driver.findElement(By.xpath("//button[@puppeteer-id='agent--dropdown-button']")).click();
            wait(2);
            driver.findElement(By.xpath("//button[@puppeteer-id='additional-work--dropdown-button']")).click();
            log.info("Agent state changed to Additional Work");

        } catch (Exception e) {
            log.info("Exception occured in put agent Additional Work");
        }
    }

    /**
     * <h1>getCurrentTimeByFormat</h1> This method is for getting current datetime
     *
     * @param format Format datetime
     * @return string of timestamp , the timestamp of current local time
     */
    @Step("Getting current datetime")
    public String getCurrentTimeByFormat(String format) {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(format);
        LocalDateTime now = LocalDateTime.now();
        return dtf.format(now);
    }

    public String getCurrentTimeByFormat(String format, long addseconds) {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(format);
        LocalDateTime now = LocalDateTime.now();
        return dtf.format(now.plusSeconds(addseconds));
    }

    /**
     * <h1>Finish_Work_For_Agent</h1> This method is for finish work on agent
     */
    @Step("Agent finishes work")
    public void Finish_Work_For_Agent() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            log.info("Complete ACW if any");
            List<WebElement> acwLst = driver.findElements(By.xpath("//button[@ng-click='completeACW()']"));
            for (WebElement acw : acwLst) {
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                if ((this.eXISTs(driver, btnACW, 2) != null)) {
                    executor.executeScript("arguments[0].click();", btnACW);
                    log.info("Complete ACW successfully");
                }
            }
        } catch (Exception e) {
        }

        log.info("Clicking on finish work");
        try {
            Thread.sleep(4000);
        } catch (InterruptedException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        if (btnmenu.getAttribute("aria-expanded").equals("false")) {
            wait.until(ExpectedConditions.elementToBeClickable(btnmenu)).click();
        }
        wait(2);
        //get exception, refresh workspace thu lai
        try {
            wait.until(ExpectedConditions.elementToBeClickable(btnFinishWork)).click();
        } catch (Exception e){
            e.printStackTrace();
        }
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }


    }

    /**
     * <h1>Agent_Exit_Click</h1> This method is for exit work on agent
     */
    @Step("Exit work on agent")
    public void Agent_Exit_Click() {
        //     log.info("Agent_Exit_Click: Clicking on Exit button");
        try {
            wait.until(ExpectedConditions.elementToBeClickable(btnmenu)).click();
            wait.until(ExpectedConditions.elementToBeClickable(btnExit)).click();

        } catch (Exception e) {

        }

    }//Agent_Exit_Click


    /**
     * <h1>Agent_Finish_Work_Click</h1> This method is for finish work on agent
     */
    @Step("Agent finishes work")
    public void Agent_Finish_Work_Click() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            log.info("Clicking on finish work");
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();",
                    driver.findElement(By.xpath("//button[@ng-click='logout()']")));
        } catch (Exception e) {
            log.info("Exception occured in Clicking Finish Work button");
        }
    }

    /**
     * <h1>Put_Agent_In_Available_State</h1> This method is for put agent on ready state
     *
     * @return true/false , true if agent is put to available state, else return false
     */
    @Step("Set agent ready")
    public boolean Put_Agent_In_Available_State() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            JavascriptExecutor executor = (JavascriptExecutor) driver;


            executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button[@puppeteer-id='agent--dropdown-button']")));
            executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button[@ng-click='goReady()']")));

            return true;

        } catch (Exception e) {
            log.info("Exception occurred in PutAgentIn availabe state function ");
            return false;
        }
    }


    /**
     * <h1>Check_For_Call_Alert</h1> This method is for checking the workcard is alerting on Workspaces
     *
     * @param secs time for waiting
     * @return true/false , true if there is alerted call, else return false
     */
    @Step("Checking the workcard is alerting on Workspaces")
    public boolean Check_For_Call_Alert(int secs) {
        if (EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        switch (checkStatusOfAllAgentChannels()) {
            case 1://not ready
                Put_Agent_In_Available_State_from_ACW();
                break;
            case 2://logout
                Put_Agent_In_Ready_State();
                break;
        }
        try {
            if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), secs) != null)) {
                log.info("call alert displayed");
                return true;
            } else {
                RefreshWS();
                if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), secs) != null)) {
                    log.info("call alert displayed");
                    return true;
                } else {
                    log.info("call alert is not displayed");
                    return false;
                }
            }

        } catch (Exception e) {
            log.info("Exception occured in Accepting call function ");
            return false;
        }

    }

    public boolean Check_For_Call_Alert(String channel, int secs) {
        switch (checkStatusOfAgentChannel(channel)) {
            case 1://not ready
                Put_Agent_In_Available_State_from_ACW();
                break;
            case 2://logout
                Put_Agent_In_Ready_State();
                break;
        }
        try {
            if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), secs) != null)) {
                log.info("call alert displayed");
                return true;
            } else {
                RefreshWS();
                if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), secs) != null)) {
                    log.info("call alert displayed");
                    return true;
                } else {
                    log.info("call alert is not displayed");
                    return false;
                }
            }

        } catch (Exception e) {
            log.info("Exception occured in Accepting call function ");
            return false;
        }

    }

    /**
     * <h1>acceptAnyAlertingContact</h1> This method is for accept any alerting workcard on Workspaces
     */
    @Step("Accept any alerting workcard on Workspaces")
    public void acceptAnyAlertingContact() {
        switch (checkStatusOfAllAgentChannels()) {
            case 1://not ready
                Put_Agent_In_Available_State_from_ACW();
                break;
            case 2://logout
                Put_Agent_In_Ready_State();
                break;
        }
        try {
            if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), 300) != null)) {
                int numOfContacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']")).size();
                while (numOfContacts > 0) {
                    List<WebElement> contacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']"));
                    for (WebElement contact : contacts) {
                        contact.click();
                    }
                    wait(5);
                    numOfContacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']")).size();
                }
            } else {
                RefreshWS();
                if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), 300) != null)) {
                    int numOfContacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']")).size();
                    while (numOfContacts > 0) {
                        List<WebElement> contacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']"));
                        for (WebElement contact : contacts) {
                            contact.click();
                        }
                        wait(5);
                        numOfContacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']")).size();
                    }
                } else {
                    Assert.fail("ERROR: No alerting workcard on Workspaces");
                }
            }

        } catch (Exception e) {
            log.info("Exception occured in Accepting call function ");
        }

    }

    public void acceptAnyAlertingContactWithoutChannelStatus() {

        try {
            if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), 300) != null)) {
                int numOfContacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']")).size();
                while (numOfContacts > 0) {
                    List<WebElement> contacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']"));
                    for (WebElement contact : contacts) {
                        contact.click();
                    }
                    wait(5);
                    numOfContacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']")).size();
                }
            } else {
                RefreshWS();
                if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), 300) != null)) {
                    int numOfContacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']")).size();
                    while (numOfContacts > 0) {
                        List<WebElement> contacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']"));
                        for (WebElement contact : contacts) {
                            contact.click();
                        }
                        wait(5);
                        numOfContacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']")).size();
                    }
                } else {
                    Assert.fail("ERROR: No alerting workcard on Workspaces");
                }
            }

        } catch (Exception e) {
            log.info("Exception occured in Accepting call function ");
        }

    }

    /**
     * <h1>Check_For_Active_Work_Card</h1> This method is for check if there is active work card on Workspaces
     *
     * @param secs time for waiting
     * @return true/false , true if there is activated work card, else return false
     */
    @Step("Check if there is active work card on Workspaces")
    public boolean Check_For_Active_Work_Card(int secs) {

        try {
            if ((this.eXISTs(driver, By.xpath("//button[@ng-click='end()']"), secs) != null)) {
                log.info("Active call/work card  is  displayed");
                return true;
            } else {
                log.info("Active call or work card not present");
                return false;
            }

        } catch (Exception e) {
            log.info("Exception occured in Check_For_Active_Work_Card call function ");
            return false;
        }

    }

    /**
     * <h1>Select_channel_WorkCard</h1> This method is for selecting a workcard on Workspaces by Channel type
     *
     * @param channel_to_be_selected Channel type
     */
    @Step("Selecting a workcard on Workspaces by Channel type")
    public void Select_channel_WorkCard(String channel_to_be_selected) {
        List<WebElement> WorkCards = driver.findElements(By.xpath("//span[@class='card__header-icon aoc-channel']"));
        for (WebElement we : WorkCards) {
            String channel = we.getAttribute("aria-label");
            if (channel.contains(channel_to_be_selected)) {
                log.info("Selecting " + channel_to_be_selected + " channel workcard");
                we.click();
            }
        }
    }

    /**
     * <h1>End_Call</h1> This method is for closing contact then complete ACW
     *
     * @return CCClientLoginPage as class object
     */
    @Step("Closing contact then complete ACW")
    public CCClientLoginPage End_Call() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            if ((this.eXISTs(driver, By.xpath("//button[@ng-click='end()']"), 2) != null)) {
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();",
                        driver.findElement(By.xpath("//button[@ng-click='end()']")));
                log.info("call is successfully dropped");
                wait(3);
                if ((this.eXISTs(driver, btnACW, 5) != null)) {
                    executor.executeScript("arguments[0].click();", btnACW);
                }
            } else {
                log.info("No active call to end");
            }

        } catch (Exception e) {
            log.info("Exception occured in end call function");
        }
        return this;
    }


    /**
     * <h1>End_Call_Without_Complete</h1> This method is for closing contact but not complete ACW
     *
     * @return CCClientLoginPage as class object
     */
    @Step("Closing contact but not complete ACW")
    public CCClientLoginPage End_Call_Without_Complete() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());

        System.out.println("********************************" + isElementExit(driver, driver.findElement(By.xpath("//button[@ng-click='end()']"))));
        if ((this.eXISTs(driver, By.xpath("//button[@ng-click='end()']"), 5) != null)) {
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();",
                    driver.findElement(By.xpath("//button[@ng-click='end()']")));
            log.info("call is successfully dropped");
        }
        return this;
    }

    /**
     * <h1>End_Call_And_Complete_ACW_By_Interaction_Id</h1> This method is for searching workcard by Interation Id, then close it and complete ACW
     *
     * @param strInteractionId Interaction Id of work card
     */
    @Step("Searching workcard by Interation Id, then close it and complete ACW")
    public void End_Call_And_Complete_ACW_By_Interaction_Id(String strInteractionId) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            WebElement btnEnd = driver.findElement(By.id("ow_Card_End_btn_" + strInteractionId));
            if ((this.eXISTs(driver, By.id("ow_Card_End_btn_" + strInteractionId), 2) != null)) {
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();",
                        btnEnd);
                wait(1);
                log.info("call is successfully dropped");
                if ((this.eXISTs(driver, btnACW, 3) != null)) {
                    executor.executeScript("arguments[0].click();", btnACW);
                    Thread.sleep(1000);
                }
            } else {
                log.info("No active contact to end");
            }
        } catch (Exception e) {
            log.info("Exception occured in end contact function");
        }
    }

    /**
     * <h1>End_Call_And_Complete_ACW_By_Interaction_Id</h1> This method is for searching workcard by Interation Id, then close it and complete ACW, and store timestamp
     *
     * @param strInteractionId Interaction Id
     * @param formatTime       Format datetime
     * @return string of timestamp , the timestamp when agent completes the ACW by interaction ID
     */
    @Step("Searching workcard by Interation Id, then close it and complete ACW, and store timestamp")
    public String End_Call_And_Complete_ACW_By_Interaction_Id(String strInteractionId, String formatTime) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            WebElement btnEnd = driver.findElement(By.id("ow_Card_End_btn_" + strInteractionId));
            if ((this.eXISTs(driver, By.id("ow_Card_End_btn_" + strInteractionId), 2) != null)) {
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();",
                        btnEnd);
                log.info("call is successfully dropped");
                String time = getCurrentTimeByFormat(formatTime);
                if ((this.eXISTs(driver, btnACW, 3) != null)) {
                    executor.executeScript("arguments[0].click();", btnACW);
                    Thread.sleep(1000);
                }
                return time;
            } else {
                log.info("No active contact to end");
            }
        } catch (Exception e) {
            log.info("Exception occured in end contact function");
        }
        return null;
    }

    /**
     * <h1>End_Contact_By_Interaction_Id</h1> This method is for searching workcard by Interation Id, then close it
     *
     * @param strInteractionId Interaction Id
     */
    @Step("Searching workcard by Interation Id, then close it")
    public void End_Contact_By_Interaction_Id(String strInteractionId) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            WebElement btnEnd = driver.findElement(By.id("ow_Card_End_btn_" + strInteractionId));
            if ((this.eXISTs(driver, By.id("ow_Card_End_btn_" + strInteractionId), 2) != null)) {
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();",
                        btnEnd);
                log.info("call is successfully dropped");
            } else {
                log.info("No active contact to end");
            }
        } catch (Exception e) {
            log.info("Exception occured in end contact function");
        }
    }

    /**
     * <h1>Complete_ACW_By_Interaction_Id</h1> This method is for searching workcard by Interation Id, then complete ACW
     *
     * @param strInteractionId Interaction Id of work card
     */
    @Step("Searching workcard by Interation Id, then complete ACW")
    public void Complete_ACW_By_Interaction_Id(String strInteractionId) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            WebElement btnCompleteACW = driver.findElement(By.xpath("//button[@puppeteer-id='complete-acw-interaction--" + strInteractionId + "']"));
            if ((this.eXISTs(driver, By.xpath("//button[@puppeteer-id='complete-acw-interaction--" + strInteractionId + "']"), 2) != null)) {
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();",
                        btnCompleteACW);
                log.info("Complete ACW successfully");
            } else {
                log.info("No ACW found for interaction " + strInteractionId);
            }
        } catch (Exception e) {
            log.info("Exception occured in complete ACW");
        }
    }

    /**
     * <h1>Select_Workcard_By_Interaction_Id</h1> This method is for selecting workcard by Interation Id
     *
     * @param strInteractionId Interaction Id
     */
    @Step("Click to focus on the workcard with Interaction Id")
    public void Select_Workcard_By_Interaction_Id(String strInteractionId) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            WebElement workCard = driver.findElement(By.xpath("//card-container[@interaction-id='" + strInteractionId + "']"));
            if ((this.eXISTs(driver, workCard, 2) != null)) {
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();",
                        workCard);
                log.info("Click on workcard successfully ");
            } else {
                log.info("Workcard not found");
            }
        } catch (Exception e) {
            log.info("Exception occured when selecting workcard");
        }
    }

    /**
     * <h1>complete_ACW</h1> This method is to complete ACW
     *
     * @return CCClientLoginPage asc lass object
     */
    @Step("Complete ACW")
    public CCClientLoginPage complete_ACW() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        JavascriptExecutor executor = (JavascriptExecutor) driver;
        try {
            System.out.println("********************************" + isElementExit(driver, btnACW));
            if ((this.eXISTs(driver, btnACW, 5) != null)) {
                executor.executeScript("arguments[0].click();", btnACW);
                log.info("Complete ACW successfully");
            }
        } catch (Exception e) {
            log.info("Not found ACW button");
        }
        return this;
    }

    /**
     * <h1>Blind_Transfer</h1> This method is for blind transfer to user
     *
     * @param AgentExtensionOrID Agent extension or Agent ID for transfer
     * @param ID                 Interaction ID of workcard
     */
    @Step("Blind transfer to user")
    public void Blind_Transfer(String AgentExtensionOrID, String ID) {
        try {
            log.info("\nExecuting Blind Transfer to agent with ID: " + AgentExtensionOrID);
            WebDriverWait wait = new WebDriverWait(driver, 200);
            log.info("Clicking on transfer button");
            Thread.sleep(2000);
            //wait.until(ExpectedConditions.visibilityOf(element)
            //wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("ow_Card_Transfer_"+ID+"_btn")));
            log.info("//*[@id='ow_Card_Transfer_" + ID + "_btn']");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_Transfer_" + ID + "_btn']"))).click();

            log.info("Clicking the dial box");
            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//*[@id='ow_enter_extension_Transfer_" + ID + "']")))).click();

            log.info("Entering the digits in dial box");
            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//*[@id='ow_enter_extension_Transfer_" + ID + "']")))).sendKeys(AgentExtensionOrID);

            log.info("Sending Enter key in dial box");
            Thread.sleep(2000);
            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//*[@id='ow_enter_extension_Transfer_" + ID + "']")))).sendKeys(Keys.ENTER);
                                               /*
                                                int txtEnterExt_size = driver.findElements(By.xpath("//input[@aria-label='Enter extension']")).size();
                                                driver.findElements(By.xpath("//input[@aria-label='Enter extension']")).get(txtEnterExt_size - 1)
                                                                                .sendKeys(AgentExtensionOrID);

                                                log.info("\nClick To Call\n");
                                                btnClickToCallTransfer.click();*/

        } catch (Exception e) {

            log.info("Exception occured in executing Blind Transfer" + e);
            // Assert.fail();
        }
    }

    /**
     * <h1>Consult</h1> This method is used to initiate consult call
     *
     * @param sAgentExtensionOrID Agent extension or Agent ID for consult
     */
    @Step("Initiate consult call")
    public void Consult(String sAgentExtensionOrID) {
        try {
            wait(5);
            log.info("\nConsulting the desired agent. \n");
            WebDriverWait wait = new WebDriverWait(driver, 30);
            wait.until(ExpectedConditions.elementToBeClickable(btnConsultOnConsultingAgent)).click();
            //btnConsultOnConsultingAgent.click();
            wait(1);
            log.info("Enter the extension");
            int Element_size = driver.findElements(By.xpath("(//input[@aria-label='Enter extension'])")).size();
            if (Element_size != 0) {
                driver.findElements(By.xpath("(//input[@aria-label='Enter extension'])")).get(Element_size - 1)
                        .sendKeys(sAgentExtensionOrID);
                wait(1);
            } else {
                log.info("\nEnter the exetension\n");
                int iElement_size = driver.findElements(By.xpath("(//input[@aria-label='Enter extension'])[2]")).size();
                driver.findElements(By.xpath("(//input[@aria-label='Enter extension'])[2]")).get(iElement_size - 1)
                        .sendKeys(sAgentExtensionOrID);
                wait(1);

            }

            log.info("\nClick To Call\n");
            List<WebElement> eCallBtn = driver.findElements(By.xpath("//md-menu-content/md-menu-item/form/span/button[@aria-label='Click to call " + sAgentExtensionOrID + "']"));
            wait(1);
            if (eCallBtn.size() > 0) {
                for (WebElement e : eCallBtn) {
                    e.click();
                    log.info("\nCall is clicked successfully.\n");
                }
            }
            wait(5);
            //btnClickToCallConsult.click();

        } catch (Exception e) {
            log.info("Exception occured in executing Consult" + e);
        }
    }

    /**
     * <h1>verify_Consult</h1> This method is used to verify a consult call
     *
     * @param sCustomerCallingNumber     Phone number of customer
     * @param sConslutedAgentDisplayName Agent display name of consulted agent
     * @param sConsultedAgentExtension   Extension of consulted agent
     * @return true/false , true if consulting successfully, else return false
     */
    @Step("Verify a consult call")
    public boolean verify_Consult(String sCustomerCallingNumber, String sConslutedAgentDisplayName,
                                  String sConsultedAgentExtension) {
        try {
            log.info("\nVerify if the Consult Call was established successfully on the consulting agent. \n");

            if (lblConsultingAgentCardHeaderTitle.getAttribute("aria-label").equals(sCustomerCallingNumber)) {
                if (lblConsultingAgentCardDetail.getAttribute("aria-label").equals(sCustomerCallingNumber)) {
                    if (lblConsultedAgentCardHeaderTitle.getAttribute("aria-label")
                            .equals(sConslutedAgentDisplayName)) {
                        if (lblConsultedAgentCardDetail.getAttribute("aria-label").equals(sConsultedAgentExtension)) {
                            return true;
                        }
                    }
                }
            }
        } catch (Exception e) {
            log.info("Exception occured in executing verify_Consult" + e);
        }
        return false;
    }

    /**
     * <h1>complete_Consult_As_Conference</h1> This method is used to complete consult as conference
     *
     * @return true/false , true if consulting as conference is successful, else return false
     */
    @Step("Complete consult as conference")
    public boolean complete_Consult_As_Conference() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            log.info("\nCompleting the consulted call as conference. \n");
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", btnCompleteConsultAsConference);
            log.info("\nCompleted the consulted call as conference. \n");
        } catch (Exception e) {
            log.info("Exception occurred in executing complete_Consult_As_Conference" + e);
        }
        return false;
    }

    /**
     * <h1>complete_Consult_As_Transfer</h1> This method is used to complete consult as transfer
     *
     * @return true/false , true if consulting as transfer is successful, else return false
     */
    @Step("Complete consult as transfer")
    public boolean complete_Consult_As_Transfer() {
        try {
            log.info("\nComplete the transfered call as conference. \n");
//            btnTransferOnConsultingAgent.click();
            btnCompleteConsultAsTransfer.click();
            return true;
        } catch (Exception e) {
            log.info("Exception occured in executing complete_Consult_As_Transfer" + e);
        }
        return false;
    }


    /**
     * <h1>verify_Conference</h1> This method is used to verify participants on conference call
     *
     * @param sExpectedParticipants as participant need to conference
     * @return true/false , true if conferencing successfully, else return false
     * @throws ElementNotVisibleException
     */
    @Step("Verify participants on conference call")
    public boolean verify_Conference(String sExpectedParticipants) {
        try {
            log.info("\nVerifying if the conference was established successfully. \n");
            sExpectedParticipants = sExpectedParticipants.trim();
            sExpectedParticipants = sExpectedParticipants.replaceAll("\\s*,\\s*", ",");
            log.info("Expected Participants :" + sExpectedParticipants);

            wait.until(ExpectedConditions.visibilityOf(dropdownConferenceParticipants));
            dropdownConferenceParticipants.click();

            log.info("Get the list of participants.");
            wait.until(ExpectedConditions.visibilityOfAllElements(conferenceParticipant));
            int elementSize = conferenceParticipant.size();
            log.info("Number of participants in the conference are : " + elementSize);

            List<String> lstParticipantNames = new ArrayList<String>();
            for (int i = 0; i < elementSize; i++) {
                String sParticipantName = conferenceParticipant.get(i).getText();
                log.info("Participant " + i + ": " + sParticipantName);
                lstParticipantNames.add(i, sParticipantName);
            }
            Collections.sort(lstParticipantNames);

            // Convert the expected list of participants from string to list.
            List<String> lstExpectedParticipants = new ArrayList<String>();
            Collections.addAll(lstExpectedParticipants, sExpectedParticipants.split(","));
            Collections.sort(lstExpectedParticipants);

            // Verify if all expected participants are in the conference
            if (lstParticipantNames.containsAll(lstExpectedParticipants)) {
                log.info("All Expected participants are in the conference");
                return true;
            }

        } catch (Exception e) {

            log.info("Exception occured in executing verify_Conference" + e);
        }
        return false;
    }

    /**
     * <h1>Check_Cust_History</h1> This method is for checking customer history
     *
     * @return true/false - need to review
     */
    @Step("Checking customer history")
    public boolean Check_Cust_History() {/*
                                if ((this.eXISTs(driver, By.xpath("//div/h5/span[text()='Customer History']"), 3) != null)) {
                                                log.info("History Panel shown");
                                                return true;
                                } else {
                                                return false;
                                }*/
        return true;
    }

    /**
     * <h1>Check_Cust_Deatils</h1> This method is for checking customer details
     *
     * @return true/false - need to review
     */
    @Step("Checking customer details")
    public boolean Check_Cust_Deatils() {
                                /*if ((this.eXISTs(driver, By.xpath("//div/h5/span[text()='Customer Details']"), 3) != null)) {
                                                log.info(" Customer Details panel shown");
                                                return true;
                                } else {
                                                return false;
                                }*/
        return true;
    }

    /**
     * <h1>Check_Interaction_Details</h1> This method is for checking interaction details
     *
     * @return true/false , true if there is detail of interaction, else return false
     */
    @Step("Checking interaction details")
    public boolean Check_Interaction_Details() {
        if ((this.eXISTs(driver, By.xpath("//div/h5/span[text()='Interaction Details']"), 3) != null)) {
            log.info("Interaction Details panel shown");
            return true;
        } else {
            return false;
        }
    }

    /**
     * <h1>Check_For_Missed_Call</h1> This method is for checking missed call
     *
     * @return true if there is missed call, else return false
     */
    @Step("Checking missed call")
    public boolean Check_For_Missed_Call() {
        if (this.eXISTs(driver, frmNewNotify, 10) != null) {
            log.info("Found the Missed call inidcation on UI ");
            if (checkcolor_OfIcon(frmNewNotify, "red")) {
                return true;
            } else {
                return false;
            }
        } else {
            log.info("Not Found the Missed call inidcation on UI ");
            return false;
        }
    }

    public boolean Check_Colour_of_MissedCall_Icon() {
        // String color=NewNotify.getCssValue("color");

        String color = frmNewNotify.getAttribute("color");
        log.info("Color =" + color);
        if (color.equals("Red")) {
            log.info("Found the Missed call inidcation on UI with red color ");
            return true;
        } else {
            log.info("Not Found the Missed call inidcation on UI with red color  ");
            return false;
        }
    }

    /**
     * <h1>CCClinet_Logout</h1> This method is for logout agent on Workspaces
     */
    @Step("Logout agent on Workspaces")
    public void CCClinet_Logout() {
        log.info("Logging out agent Clicking on Finish Work");
        driver.switchTo().defaultContent();
        String AgentState = null;

        try {
            Thread.sleep(4000);

            AgentState = Get_Agent_State();
            if (AgentState.equalsIgnoreCase("Not_Ready")) {
                Finish_Work_For_Agent();
                Agent_Exit_Click();
                log.info("Agent is Exited successfully ");
                // return true;
            }
            if (AgentState.equalsIgnoreCase("Ready")) {
                Finish_Work_For_Agent();
                Agent_Exit_Click();
                // return true;
            }

            if (AgentState.equalsIgnoreCase("Logged_Out")) {
                log.info("Agent is already in Logged Out State ");
                Agent_Exit_Click();
                // return true;
            }
            if (AgentState.equalsIgnoreCase("LOGIN_PENDING")) {
                log.info("Agent is already in LOGIN PENDING State ");
                Agent_Exit_Click();
                // return true;
            }
            if (AgentState.equalsIgnoreCase("null")) {
                log.info("Agent state is null");
                // return false;
            }

            boolean cancelDisplayed = CancelLogin.isDisplayed();
            if (cancelDisplayed) {
                CancelLogin.click();
            }

        } catch (Exception e) {
            //Finish_Work_For_Agent();
            Agent_Exit_Click();

            //log.info("Exception occured in  exiting Agent");
        }
    }

    /**
     * <h1>verifyChatSessionMessage</h1> This method is used to verify message displays on chat UI
     *
     * @param messageText Message text
     */
    @Step("Verify message displays on chat UI")
    public boolean verifyChatSessionMessage(String messageText) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            boolean found = false;
            String content = "";
            int timeout = 0;
            while(!found) {
                List<WebElement> messageContainers = driver.findElements(By.xpath("//span[@class='message-body__text']"));
                for (WebElement container : messageContainers) {
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", container);
                    content = content + "\n" + container.getText();
                    if (container.getText().contains(messageText)) {
                        found = true;
                        break;
                    }
                }
                timeout++;
                if(timeout > 3){
                    break;
                }
            }
            log.info("Inside verify chat session messages at Agent window:\n" + content);
            return found;
        } catch (Exception e) {
            log.error("The text specified not found inside chat session at Agent window." + " " + messageText);
            e.getMessage();
            return false;
        }
    }

    public boolean verifyChatParticipantLabel(String label) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            boolean found = false;
            String content = "";
            List<WebElement> messageContainers = driver.findElements(By.xpath("//div[@class='message-info md-caption layout-align-start-center layout-row']"));
            for(WebElement container : messageContainers){
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", container);
                content = content + "\n" + container.getText();
                if(container.getText().contains(label)){
                    found = true;
                    break;
                }
            }
            log.info("Inside verify chat session messages at Agent window:\n" + content);
            return found;
        } catch (Exception e) {
            log.error("The text specified not found inside chat session at Agent window." + " " + label);
            e.getMessage();
            return false;
        }
    }

    public boolean verifyChatFileTransfer(String fileName) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            boolean found = false;
            String content = "";
            List<WebElement> messageContainers = driver.findElements(By.xpath("//a[@class='message-body__file-name']"));
            for(WebElement container : messageContainers){
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", container);
                content = content + "\n" + container.getText();
                if(container.getText().contains(fileName)){
                    found = true;
                    break;
                }
            }
            log.info("Inside verify chat session messages at Agent window:\n" + content);
            return found;
        } catch (Exception e) {
            log.error("The text specified not found inside chat session at Agent window." + " " + fileName);
            e.getMessage();
            return false;
        }
    }

    public boolean verifySessionMessageByInteractionID(String message, String ID) {
        try {
            wait(1);
            List <WebElement> containerMessage = driver.findElements(By.xpath("//md-content[contains(@cc-scroll-container,'" + ID + "')]"));
            for(WebElement content: containerMessage) {
                if(content.isDisplayed()) {
                    String contentMessage = content.getText();
                    if (contentMessage.contains(message)) {
                        return true;
                    }else {
                        log.info("The message is not display on conversation: " + message);
                        return false;
                    }
                }
            }
        } catch (Exception e) {
            log.info("No such element");
        }
        return false;
    }

    public boolean verifyLastMessage(String messageEx, int down) {
        try {
            wait(1);
            List <WebElement> listMessages = driver.findElements(By.xpath("//div[@master='true']//md-content[@cc-scrollbar='vertical']//span[@class='message-body__text']"));
            List<WebElement> listMessagesDisplay =new ArrayList<>();
            for(WebElement element: listMessages){
                if(element.isDisplayed()){
                    listMessagesDisplay.add(element);
                }
            }
            String actual = listMessagesDisplay.get(listMessagesDisplay.size()-down).getText();
            if(!messageEx.equals(actual)){
                log.info("The actual message incorrectly");
                return false;
            }
            return true;
        } catch (Exception e) {
            log.info("No such element");
        }
        return false;
    }


    /**
     * <h1>send_Chat_Phrases</h1> function to send Agent reply using Auto Phrases
     * inside Agent workspace to customer
     * <p>
     *
     * @param CardNumber
     * @author Snehal Biche
     * @version 1.0
     * @since 2016-11-18
     */
    @Step("Send Agent reply using Auto Phrases")
    public void send_Chat_Phrases(int CardNumber, int Phraseno) {
        if (CardNumber == 1) {

            log.info("Sending Auto Phrases reply in chat card");
            String sChatPhrases = (String) chatPhrases.get(1);
            log.info(chatPhrases.get(1));
            log.info(chatPhrases.get(2));
            log.info(chatPhrases.get(3));
            log.info("SchatPhrase is " + sChatPhrases);
            int iChatPhrasesWidth = chatPhrasesWidth.get(1);
            log.info("---StoreChatCardWidth Phrases----" + iChatPhrasesWidth + " " + sChatPhrases);
            try {
                wait.until(ExpectedConditions.elementToBeClickable(
                        By.xpath("//md-tab-item[contains(@aria-controls,'" + sChatPhrases + "')]")));
                WebElement chatPhrasesId = driver
                        .findElement(By.xpath("//md-tab-item[contains(@aria-controls,'" + sChatPhrases + "')]"));
                if (iChatPhrasesWidth != 0) {
                    chatPhrasesId.click();
                    // wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("(//md-list-item[@ng-repeat='phrase
                    // in suggestedPhrases'])["+CardNumber+"]"))));
                    driver.findElement(By.xpath("(//md-list-item[@ng-repeat='phrase in suggestedPhrases'])[" + CardNumber + "]")).click();

                    log.info("xpath is= " + "//*[@id='" + sChatPhrases + "']/div/md-content/md-list/md-list-item["
                            + Phraseno + "]/div/button");
                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(
                            "//*[@id='" + sChatPhrases + "']/div/md-content/md-list/md-list-item[1]/div/button"))));
                    driver.findElement(By.xpath("//*[@id='" + sChatPhrases + "']/div/md-content/md-list/md-list-item["
                            + Phraseno + "]/div/button")).click();
                    // *[@id="tab-content-46"]/div/md-content/md-list/md-list-item[1]/div/button
                    // *[@id="tab-content-58"]/div/md-content/md-list/md-list-item[1]/div/button
                    // *[@id="tab-content-21"]/div/md-content/md-list/md-list-item[1]/div/button

                } else {
                    log.info("Else: For this Chat attributes the Phrases is not set or not visible");
                }
            } catch (Exception e) {
                // e.getMessage();
                log.info("Catch: For this Chat attributes the Phrases is not set or not visible");
                Assert.fail();
            }
        }

        // if condition to get chat id from hashmap for chat card 2
        // the value in hashmap is 3 becuase each chat card generated two id(dont know
        // why :))
        if (CardNumber == 2) {
            try {
                log.info("Sending Auto Phrases reply in chat card");
                String sChatPhrases = (String) chatPhrases.get(2);
                int iChatPhrasesWidth = chatPhrasesWidth.get(2);
                // log.info("---StoreChatCardWidth Phrases----" + iChatPhrasesWidth + " " +
                // sChatPhrases);
                wait.until(ExpectedConditions.elementToBeClickable(
                        By.xpath("//md-tab-item[contains(@aria-controls,'" + sChatPhrases + "')]")));
                WebElement chatPhrasesId = driver
                        .findElement(By.xpath("//md-tab-item[contains(@aria-controls,'" + sChatPhrases + "')]"));
                // *[@id="tab-content-21"]/div/md-content/md-list/md-list-item[1]/div/button
                // to check if value of style max width is 0 then no Phrases available to click
                // else click on Phrases
                if (iChatPhrasesWidth != 0) {
                    chatPhrasesId.click();
                    // wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("(//md-list-item[@ng-repeat='phrase
                    // in suggestedPhrases'])["+CardNumber+"]"))));
                    // driver.findElement(By.xpath("(//md-list-item[@ng-repeat='phrase in
                    // suggestedPhrases'])["+CardNumber+"]")).click();

                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(
                            "//*[@id='" + sChatPhrases + "']/div/md-content/md-list/md-list-item[1]/div/button"))));
                    driver.findElement(By.xpath("//*[@id='" + sChatPhrases + "']/div/md-content/md-list/md-list-item["
                            + Phraseno + "]/div/button")).click();

                } else {
                    log.info("Else: For this Chat attributes the Phrases is not set or not visible");
                }
            } catch (Exception e) {
                // e.getMessage();
                log.info("Catch: For this Chat attributes the Phrases is not set or not visible");
                Assert.fail();
            }
        }

        // if condition to get chat id from hashmap for chat card 3
        // the value in hashmap is 5 becuase each chat card generated two id(dont know
        // why :))
        if (CardNumber == 3) {
            try {
                log.info("Sending Auto Phrases reply in chat card");
                String sChatPhrases = (String) chatPhrases.get(3);
                int iChatPhrasesWidth = chatPhrasesWidth.get(3);
                // log.info("---StoreChatCardWidth Phrases----" + iChatPhrasesWidth + " " +
                // sChatPhrases);
                wait.until(ExpectedConditions.elementToBeClickable(
                        By.xpath("//md-tab-item[contains(@aria-controls,'" + sChatPhrases + "')]")));
                WebElement chatPhrasesId = driver
                        .findElement(By.xpath("//md-tab-item[contains(@aria-controls,'" + sChatPhrases + "')]"));
                // to check if value of style max width is 0 then no Phrases available to click
                // else click on Phrases
                if (iChatPhrasesWidth != 0) {
                    chatPhrasesId.click();
                    // wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("(//md-list-item[@ng-repeat='phrase
                    // in suggestedPhrases'])["+CardNumber+"]"))));
                    // driver.findElement(By.xpath("(//md-list-item[@ng-repeat='phrase in
                    // suggestedPhrases'])["+CardNumber+"]")).click();

                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath(
                            "//*[@id='" + sChatPhrases + "']/div/md-content/md-list/md-list-item[1]/div/button"))));
                    driver.findElement(By.xpath("//*[@id='" + sChatPhrases + "']/div/md-content/md-list/md-list-item["
                            + Phraseno + "]/div/button")).click();
                    //// *[@id="tab-content-104"]/div/md-content/md-list/md-list-item[1]/div/button
                    //// *[@id="tab-content-104"]/div/md-content/md-list/md-list-item[2]/div/button

                } else {
                    log.info("Else: For this Chat attributes the Phrases is not set or not visible");
                }
            } catch (Exception e) {
                // e.getMessage();
                log.info("Catch: For this Chat attributes the Phrases is not set or not visible");
                Assert.fail();
            }
        }

    }// send chat phrases ends

    /**
     * <h1>send_Chat_Phrases</h1> function to send Agent reply using Auto Phrases
     * inside Agent workspace to customer
     * <p>
     *
     * @param CardNumber
     * @author Snehal Biche
     * @version 1.0
     * @since 2016-11-18
     */
    @Step("Send Agent reply using Auto Phrases")
    public void send_Chat_URLs(int CardNumber, int URLno) {

        // if condition to get chat id from hashmap for chat card 1 and then wait for
        // that id then enter text in that id
        if (CardNumber == 1) {
            try {
                ;
                log.info("Sending URLs as reply in chat card");
                String sChatURLS = (String) chatURLs.get(1);
                int iChatURLSWidth = chatURLsWidth.get(1);

                // log.info("---StoreChatCardWidth URLS----" + iChatURLSWidth + " " +
                // sChatURLS);
                wait.until(ExpectedConditions
                        .elementToBeClickable(By.xpath("//md-tab-item[contains(@aria-controls,'" + sChatURLS + "')]")));
                WebElement sChatURLSId = driver
                        .findElement(By.xpath("//md-tab-item[contains(@aria-controls,'" + sChatURLS + "')]"));
                // to check if value of style max width is 0 then no Phrases available to click
                // else click on Phrases
                if (iChatURLSWidth != 0) {
                    sChatURLSId.click();

                    // wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("(//md-list-item[@ng-repeat='pagePushUrl
                    // in pagePushURLs track by $index'])["+CardNumber+"]"))));
                    // driver.findElement(By.xpath("(//md-list-item[@ng-repeat='pagePushUrl in
                    // pagePushURLs track by $index'])["+CardNumber+"]")).click();

                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By
                            .xpath("//*[@id='" + sChatURLS + "']/div/md-content/md-list/md-list-item[1]/div/button"))));
                    driver.findElement(By.xpath("//*[@id='" + sChatURLS + "']/div/md-content/md-list/md-list-item["
                            + URLno + "]/div/button")).click();

                } else {
                    log.info("Else: For this Chat attributes the URLS is not set or not visible");
                }
            } catch (Exception e) {
                // e.getMessage();
                log.info("Catch: For this Chat attributes the URLS is not set or not visible");
                Assert.fail();
            }
        }

        // if condition to get chat id from hashmap for chat card 2
        // the value in hashmap is 3 becuase each chat card generated two id(dont know
        // why :))
        if (CardNumber == 2) {
            try {
                log.info("Sending URLs as reply in chat card");
                String sChatURLS = (String) chatURLs.get(2);
                int iChatURLSWidth = chatURLsWidth.get(2);

                // log.info("---StoreChatCardWidth URLS----" + iChatURLSWidth + " " +
                // sChatURLS);
                wait.until(ExpectedConditions
                        .elementToBeClickable(By.xpath("//md-tab-item[contains(@aria-controls,'" + sChatURLS + "')]")));
                WebElement sChatURLSId = driver
                        .findElement(By.xpath("//md-tab-item[contains(@aria-controls,'" + sChatURLS + "')]"));
                // to check if value of style max width is 0 then no Phrases available to click
                // else click on Phrases
                if (iChatURLSWidth != 0) {
                    sChatURLSId.click();
                    // wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("(//md-list-item[@ng-repeat='pagePushUrl
                    // in pagePushURLs track by $index'])["+CardNumber+"]"))));
                    // driver.findElement(By.xpath("(//md-list-item[@ng-repeat='pagePushUrl in
                    // pagePushURLs track by $index'])["+CardNumber+"]")).click();

                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By
                            .xpath("//*[@id='" + sChatURLS + "']/div/md-content/md-list/md-list-item[2]/div/button"))));
                    driver.findElement(By.xpath("//*[@id='" + sChatURLS + "']/div/md-content/md-list/md-list-item["
                            + URLno + "]/div/button")).click();

                } else {
                    log.info("Else: For this Chat attributes the URLS is not set or not visible");
                }
            } catch (Exception e) {
                // e.getMessage();
                log.info("Catch: For this Chat attributes the URLS is not set or not visible");
                Assert.fail();
            }
        }

        // if condition to get chat id from hashmap for chat card 3
        // the value in hashmap is 5 becuase each chat card generated two id(dont know
        // why :))
        if (CardNumber == 3) {
            try {
                log.info("Sending URLs as reply in chat card");
                String sChatURLS = (String) chatURLs.get(3);
                int iChatURLSWidth = chatURLsWidth.get(3);
                // log.info("---StoreChatCardWidth URLS----" + iChatURLSWidth + " " +
                // sChatURLS);
                wait.until(ExpectedConditions
                        .elementToBeClickable(By.xpath("//md-tab-item[contains(@aria-controls,'" + sChatURLS + "')]")));
                WebElement sChatURLSId = driver
                        .findElement(By.xpath("//md-tab-item[contains(@aria-controls,'" + sChatURLS + "')]"));
                // to check if value of style max width is 0 then no Phrases available to click
                // else click on Phrases
                if (iChatURLSWidth != 0) {
                    sChatURLSId.click();
                    // wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("(//md-list-item[@ng-repeat='pagePushUrl
                    // in pagePushURLs track by $index'])["+CardNumber+"]"))));
                    // driver.findElement(By.xpath("(//md-list-item[@ng-repeat='pagePushUrl in
                    // pagePushURLs track by $index'])["+CardNumber+"]")).click();

                    wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By
                            .xpath("//*[@id='" + sChatURLS + "']/div/md-content/md-list/md-list-item[1]/div/button"))));
                    driver.findElement(By.xpath("//*[@id='" + sChatURLS + "']/div/md-content/md-list/md-list-item["
                            + URLno + "]/div/button")).click();

                } else {
                    log.info("Else: For this Chat attributes the URLS is not set or not visible");
                }
            } catch (Exception e) {
                // e.getMessage();
                log.info("Catch: For this Chat attributes the URLS is not set or not visible");
                Assert.fail();
            }
        }
    }

    /**
     * <h1>test_Fail_Ends_Session</h1> This method is for cleanup contacts when Testcase run failed
     */
    @Step("Cleanup contacts when Testcase run failed")
    public void test_Fail_Ends_Session() {
        log.info("Cleaning up existing workcards.");
        try {
            RefreshWS();
        } catch (AWTException e) {
            e.printStackTrace();
        }
        try {
            wait(3);
            List<WebElement> count = driver.findElements(By.xpath("//card-header[@card='card']"));
            log.info("Number of existing workcards: " + count.size());
            List<WebElement> unHoldCount = driver.findElements(By.xpath("//button[@ng-click='unhold()']"));
            if (unHoldCount.size() > 0) {
                for (WebElement unHold : unHoldCount) {
                    unHold.click();
                    wait(1);
                    log.info("Unhold contact");
                }
            }
            wait(3);
            for (WebElement cardcount : count) {
                driver.findElement(By.xpath("//button[@ng-click='end()']")).click();
                wait(1);
                if (driver.findElements(By.xpath("//button[.='End Interaction']")).size() == 1) {
                    log.info("This is an adhoc email.");
                    log.info("Click End Interaction");
                    driver.findElement(By.xpath("//button[.='End Interaction']")).click();
                } else {
                    driver.findElement(By.xpath("//button[@ng-click='completeACW()']")).click();
                    wait(1);
                }
                log.info("Closed existing contact");
            }
        } catch (Exception cardException) {
            log.info("Active work card not found while logging out the agent");
        }
    }

    /**
     * <h1>switch_between_SMS</h1> This method is for select workcard base on customer name
     *
     * @param Customer_Name is name of customer
     */
    @Step("Select workcard base on customer name")
    public void switch_between_SMS(String Customer_Name) {
        try {

            WebElement cust = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span/bdi[@aria-label='" + Customer_Name + "']")));
            cust.click();
        } catch (Exception e) {
            log.info("card for Customer " + Customer_Name + " Text area to send Agent reply is not visible");
        }

    }

    /**
     * <h1>GETIDS</h1> This method is for getting Interaction Id by Channel type
     *
     * @param Channel as Email/Voice...
     * @return string of ID getting by channel
     */
    @Step("Getting Interaction Id by Channel type")
    public String GETIDS(String Channel) {
        String ID = null;
        ID = StoreIDdynamically(Channel);
        return ID;
    }


    /**
     * <h1>reply_Workcard</h1> This method is for reply email workcard
     *
     * @param message  is content of message
     * @param Customer is name of customer
     */
    @Step("Reply email workcard")
    public void reply_Workcard(String message, String Customer) {
        log.info("Replying to " + Customer + "from the workspace with message " + message);
        try {
            switch_between_SMS(Customer);

            Thread.sleep(2000);
            List<WebElement> element1 = driver.findElements(By.xpath("//*[@aria-label ='Type a message...']"));
            for (WebElement reply : element1) {
                if (reply.isDisplayed()) {
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException e) {
                    }
                    reply.click();
                    reply.sendKeys(message);
                    wait(1);
                    reply.sendKeys(Keys.ENTER);
                    //log.info("Message sent");
                }
            }
        } catch (Exception e) {
            Assert.fail("Agent not Able to Reply to " + Customer);

        }
    }


    //   public void reply_Workcard(String message,String Customer)

    /*
     * {
     * log.info("Replying to "+Customer+"from the workspace with message "+message);
     * try { switch_between_SMS(Customer); Thread.sleep(2000); List<WebElement>
     * element1 =
     * driver.findElements(By.xpath("//textarea[@placeholder='Type a message...']"))
     * ; for(WebElement reply:element1) {if(reply.isDisplayed()) { try
     * {Thread.sleep(2000);}catch (InterruptedException e) {} reply.click();
     * reply.sendKeys(message); reply.sendKeys(Keys.ENTER);
     * log.info("Message sent"); } } } catch (Exception e) { // TODO Auto-generated
     * catch block
     *
     * }}
     */

    /**
     * <h1>checkcolor_OfIcon</h1> function to checkcolor_OfIcon on the workspace
     * <p>
     *
     * @return true
     * @author Pooja Mali
     * @version 1.0
     */
    @Step("Check color_OfIcon on the workspace")
    public boolean checkcolor_OfIcon(WebElement element, String sExpectedColor) {

        try {
            WebElement element1 = wait.until(ExpectedConditions.visibilityOf(element));
            String Color = element1.getCssValue("color");
            log.info(Color);
            String sStrings1 = Color.substring(5);
            StringTokenizer st = new StringTokenizer(sStrings1);
            int r = Integer.parseInt(st.nextToken(",").trim());
            int g = Integer.parseInt(st.nextToken(",").trim());
            int b = Integer.parseInt(st.nextToken(",").trim());
            Color c = new Color(r, g, b);
            String sIcon_color_in_hex = "#" + Integer.toHexString(c.getRGB()).substring(2);
            log.info(sIcon_color_in_hex);
            String sIcon_color = null;
            if (sIcon_color_in_hex.equals("#ffac07")) {
                sIcon_color = "yellow";
            }
            if (sIcon_color_in_hex.equals("#4baa39 ")) {
                sIcon_color = "green";
            }
            if (sIcon_color_in_hex.equals("#ffffff")) {
                sIcon_color = "red";
            }
            if (sIcon_color.equals(sExpectedColor)) {
                log.info("The color of Icon is matched with the expected color of Icon");
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            log.info("Exception occured in checkcolor_OfIcon");
            return false;
        }

    }// checkcolor_OfIcon

    public boolean end_WorkCard(int iCardNumber, String toEmailAddress) {
        try {
            switch_Email_WorkCard(toEmailAddress);
            log.info("Clicking on End email work card button:" + iCardNumber);
            driver.findElement(By.xpath("(//button[@ng-click='end()'])[" + iCardNumber + "]"));
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("(//button[@ng-click='end()'])[" + iCardNumber + "]")));
            driver.findElement(By.xpath("(//button[@ng-click='end()'])[" + iCardNumber + "]")).click();

            return true;

        } catch (Exception EmailAcceptExp) {
            try {
                wait.until(ExpectedConditions.elementToBeClickable(By.xpath("(//button[@ng-click='end()'])[" + iCardNumber + "]")));
                driver.findElement(By.xpath("(//button[@ng-click='end()'])[" + iCardNumber + "]")).click();
            } catch (Exception e) {
                log.info("End button wasnt clicked for the second time, hence sending hot keys");
                lblAgentState.click();
                lblAgentState.sendKeys(Keys.CONTROL);
                lblAgentState.sendKeys("a");

            }


            return false;
        }


    }

    /**
     * <h1>reply_Email_WorkCard</h1> This method is for reply email workcard
     *
     * @param sEmailBodyReply  Email body
     * @param fromEmailAddress From Email Address
     * @return CCClientLoginPage as class object
     */
    @Step("Agent reply email contact")
    public CCClientLoginPage reply_Email_WorkCard(String sEmailBodyReply, String fromEmailAddress) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());

        try {

            switch_between_SMS(fromEmailAddress);
            List<WebElement> Reply = driver.findElements(By.xpath("//span[text()='Reply']"));
            for (WebElement reply : Reply) {

                log.info("Inside reply for loop");
                if (reply.isDisplayed()) {
                    log.info("This Workcard  is displayed: " + reply);
                    reply.click();

                }
            }

            List<WebElement> SendMessageBody = driver.findElements(By.xpath("//textarea[@aria-label='Email signature text editor']"));
            for (WebElement sendmsg : SendMessageBody) {
                if (sendmsg.isDisplayed()) {
                    log.info("This Workcard  is displayed: " + sendmsg);
                    sendmsg.sendKeys(sEmailBodyReply);
                    sendmsg.sendKeys(Keys.ENTER);

                }
            }

            List<WebElement> SendButton = driver.findElements(By.xpath("//span[contains(text(),'Send')]"));
            for (WebElement sendButton : SendButton) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", sendButton);

                if (sendButton.isDisplayed()) {
                    sendButton.click();

                }
            }


            //span[contains(text(),'Send')]
            if (driver.findElements(By.xpath("//button[.='OK']")).size() == 1) {
                driver.findElements(By.xpath("//button[.='OK']")).get(0).click();
            }


        } catch (Exception e) {
            // To send exception to log file
            log.info("Reply to email Failed:", e);
        }
        return this;

    }// reply_Email_WorkCard

    /**
     * <h1>check_Channel_Status</h1> This method is for getting status of each channel on Workspaces
     *
     * @param sChannel channel type
     * @return status of channel
     */
    @Step("Getting status of each channel on Workspaces")
    public String check_Channel_Status(String sChannel) {
        String sChannelStatus = null;
        if (sChannel.equalsIgnoreCase("voice")) {
            log.info("Checking Channel Status of channel voice");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@ng-if= 'interactionMissed']")));
            sChannelStatus = btnVOICEChannelIcon.getAttribute("title").toLowerCase();

        }

        if (sChannel.equalsIgnoreCase("chat")) {
            log.info("Checking Channel Status of channel chat");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@ng-if= 'interactionMissed']")));
            sChannelStatus = btnCHATChannelIcon.getAttribute("title").toLowerCase();

        }

        if (sChannel.equalsIgnoreCase("email")) {
            log.info("Checking Channel Status of channel email");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@ng-if= 'interactionMissed']")));
            sChannelStatus = btnEMAILChannelIcon.getAttribute("title").toLowerCase();

        }

        if (sChannel.equalsIgnoreCase("sms")) {
            log.info("Checking Channel Status of channel sms");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@ng-if= 'interactionMissed']")));
            sChannelStatus = btnSMSChannelIcon.getAttribute("title").toLowerCase();
        }

        if (sChannel.equalsIgnoreCase("social")) {
            log.info("Checking Channel Status of channel social");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@ng-if= 'interactionMissed']")));
            sChannelStatus = btnSOCIALChannelIcon.getAttribute("title").toLowerCase();
        }

        return sChannelStatus;

    }// check_Channel_Status

    /**
     * <h1>switch_Email_WorkCard</h1> This method is for selecting workcard base on To Email Address
     *
     * @param toEmailAddress is address need to send to
     */
    @Step("Selecting workcard base on To Email Address")
    public void switch_Email_WorkCard(String toEmailAddress) {

        objUtil.wait(10);
        WebElement cust = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[@class='card__header-title' and text()='" + toEmailAddress + "']")));
        log.info("Value of required Email card is :" + toEmailAddress);
        cust.click();
        log.info("Email card with address " + toEmailAddress + " is activated");

    }

    /**
     * <h1>waiting_For_WorkCard_RONA</h1> This method is for waiting until the workcard goes to RONA
     *
     * @param Channel Channel type
     */
    @Step("Waiting until the workcard goes to RONA")
    public void waiting_For_WorkCard_RONA(String Channel) {
        try {
//            Put_Agent_In_Available_State_from_ACW();
            int timeout = 0;
            do {
                if (driver.findElements(By.xpath("//span[@aria-label='Alerting " + Channel + " Interaction']")).size() != 0 || timeout == 150) {
                    break;
                }
                wait(2);
                timeout++;
            }
            while (driver.findElements(By.xpath("//span[@aria-label='Alerting " + Channel + " Interaction']")).size() == 0);
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[@aria-label='Alerting " + Channel + " Interaction']")));
            log.info("Waiting for RONA to happen for request from the customer");
            timeout = 0;
            while (driver.findElements(By.xpath(".//button[@ng-click='accept()']")).size() != 0) {
                wait(2);
                timeout++;
                if (timeout > 55) {
                    break;
                }
            }

            if (driver.findElements(By.xpath(".//button[@ng-click='accept()']")).size() != 0) {
                RefreshWS();
                if (driver.findElements(By.xpath(".//button[@ng-click='accept()']")).size() == 0) {
                    log.info("RONA occured");
                } else {
                    log.info("ERROR: RONA not occured");
                }
            } else {
                log.info("RONA occured");
            }
        } catch (Exception e) {
            log.info("Exception occured while waiting for workcard to appear and then RONA to happen for the workcard", e);
        }

    }

    /**
     * <h1>Close_WorkCard</h1> This method is for closing contact, complete ACW
     *
     * @param WorkCard is type of channel as Voice/Chat....
     */
    @Step("Closing contact, complete ACW")
    public void Close_WorkCard(String WorkCard) {
        log.info("Switching to the workcard" + WorkCard);
        switch_between_SMS(WorkCard);
        log.info("Closing the WorkCard" + WorkCard);
        wait(1);
        WebElement End = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@ng-click='end()']")));
        End.click();
        wait(1);
        Wrap_call();
//                                WebElement MarkComplete = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@aria-label ='Complete']")));
//                                MarkComplete.click();
    }

    /**
     * <h1>check_If_RONA_Occurs</h1> This method is for checking if the RONA occurs or not
     *
     * @param Channel channel type
     * @return true/false , true if RONA happens, else return false
     */
    @Step("Checking if the RONA occurs or not")
    public boolean check_If_RONA_Occurs(String Channel) {
        // wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@ng-if= 'interactionMissed']"))).click();
        String StatusOfChannel = null;
        // String StatusOfChannel = btnSMSChannelIcon.getAttribute("title").toLowerCase();
        Channel = Channel.toUpperCase();
        if (Channel == "SMS") {
            String StatusOfChannel_SMS = btnSMSChannelIcon.getAttribute("title").toLowerCase();
            StatusOfChannel = StatusOfChannel_SMS;
        }

        if (Channel == "CHAT") {
            String StatusOfChannel_CHAT = btnCHATChannelIcon.getAttribute("title").toLowerCase();
            StatusOfChannel = StatusOfChannel_CHAT;
        }

        if (Channel == "EMAIL") {
            String StatusOfChannel_EMAIL = btnEMAILChannelIcon.getAttribute("title").toLowerCase();
            StatusOfChannel = StatusOfChannel_EMAIL;
//                            	  log.info(StatusOfChannel);
        }
        if (Channel == "VOICE") {
            String StatusOfChannel_VOICE = btnVOICEChannelIcon.getAttribute("title").toLowerCase();
            StatusOfChannel = StatusOfChannel_VOICE;
        }

        if (Channel == "MESSAGING") {
            String StatusOfChannel_MESSAGING = btnMESSAGINGChannelIcon.getAttribute("title").toLowerCase();
            StatusOfChannel = StatusOfChannel_MESSAGING;
        }
        if (Channel == "SOCIAL") {
            String StatusOfChannel_SOCIAL = btnSOCIALChannelIcon.getAttribute("title").toLowerCase();
            StatusOfChannel = StatusOfChannel_SOCIAL;
        }


        if (StatusOfChannel.contains("not ready")) {
            log.info("RONA has OCCURED for the Channel " + Channel);
            return true;
        } else
            return false;
    }

    /**
     * <h1>checkStatusOfAgentChannels</h1> This method is for checking status of all channels display on Workspace
     *
     * @return true/false , true if Not ready happens, else return false
     */
    @Step("Checking status of all channels display on Workspace")
    public boolean checkStatusOfAgentChannels() {
        Boolean blnNotReady = false;
        String status;
        if (driver.findElements(By.xpath("//span[@id='ow_Icon_Sms']")).size() == 1) {
            status = btnSMSChannelIcon.getAttribute("title").toLowerCase();
            log.info(status);
            if (status.contains("not ready")) {
                blnNotReady = true;
            }
        }
        if (driver.findElements(By.xpath("//span[@id='ow_Icon_Chat']")).size() == 1) {
            status = btnCHATChannelIcon.getAttribute("title").toLowerCase();
            log.info(status);
            if (status.contains("not ready")) {
                blnNotReady = true;
            }
        }
        if (driver.findElements(By.xpath("//span[@id='ow_Icon_Email']")).size() == 1) {
            status = btnEMAILChannelIcon.getAttribute("title").toLowerCase();
            System.out.println(status);
            if (status.contains("not ready")) {
                blnNotReady = true;
            }
        }
        if (driver.findElements(By.xpath("//span[@id='ow_Icon_Voice']")).size() == 1) {
            status = btnVOICEChannelIcon.getAttribute("title").toLowerCase();
            log.info(status);
            if (status.contains("not ready")) {
                blnNotReady = true;
            }
        }
        if (driver.findElements(By.xpath("//span[@id='ow_Icon_Messaging']")).size() == 1) {
            status = btnMESSAGINGChannelIcon.getAttribute("title").toLowerCase();
            log.info(status);
            if (status.contains("not ready")) {
                blnNotReady = true;
            }
        }
        if (driver.findElements(By.xpath("//span[@id='ow_Icon_Social']")).size() == 1) {
            status = btnSOCIALChannelIcon.getAttribute("title").toLowerCase();
            log.info(status);
            if (status.contains("not ready")) {
                blnNotReady = true;
            }
        }
        return blnNotReady;
    }

    /**
     * <h1>checkStatusOfAllAgentChannels</h1> The function is used for checking status of all channels display on Workspace
     *
     * @return 0 if all channel is on Ready state/ 1 if any channel on Not Ready state/ 2 if any channel on Logged Out state
     */
    @Step("Checking status of all channels display on Workspace")
    public int checkStatusOfAllAgentChannels() {
        int isStatus = 0;
        String status;
        if (driver.findElements(By.xpath("//span[@id='ow_Icon_Sms']")).size() == 1) {
            status = btnSMSChannelIcon.getAttribute("title").toLowerCase();
            if (status.equals("")) {
                status = btnSMSChannelIcon.getAttribute("aria-label").toLowerCase();
            }
            log.info(status);
            if (status.contains("not ready")) {
                isStatus = 1;
            }
            if (status.contains("logged out")) {
                isStatus = 2;
            }
        }
        if (driver.findElements(By.xpath("//span[@id='ow_Icon_Chat']")).size() == 1) {
            status = btnCHATChannelIcon.getAttribute("title").toLowerCase();
            if (status.equals("")) {
                status = btnCHATChannelIcon.getAttribute("aria-label").toLowerCase();
            }
            log.info(status);
            if (status.contains("not ready")) {
                isStatus = 1;
            }
            if (status.contains("logged out")) {
                isStatus = 2;
            }
        }
        if (driver.findElements(By.xpath("//span[@id='ow_Icon_Email']")).size() == 1) {
            status = btnEMAILChannelIcon.getAttribute("title").toLowerCase();
            if (status.equals("")) {
                status = btnEMAILChannelIcon.getAttribute("aria-label").toLowerCase();
            }
            log.info(status);
            if (status.contains("not ready")) {
                isStatus = 1;
            }
            if (status.contains("logged out")) {
                isStatus = 2;
            }
        }
        if (driver.findElements(By.xpath("//span[@id='ow_Icon_Voice']")).size() == 1) {
            status = btnVOICEChannelIcon.getAttribute("title").toLowerCase();
            if (status.equals("")) {
                status = btnVOICEChannelIcon.getAttribute("aria-label").toLowerCase();
            }
            log.info(status);
            if (status.contains("not ready")) {
                isStatus = 1;
            }
            if (status.contains("logged out")) {
                isStatus = 2;
            }
        }
        if (driver.findElements(By.xpath("//span[@id='ow_Icon_Messaging']")).size() == 1) {
            status = btnMESSAGINGChannelIcon.getAttribute("title").toLowerCase();
            if (status.equals("")) {
                status = btnMESSAGINGChannelIcon.getAttribute("aria-label").toLowerCase();
            }
            log.info(status);
            if (status.contains("not ready")) {
                isStatus = 1;
            }
            if (status.contains("logged out")) {
                isStatus = 2;
            }
        }
        if (driver.findElements(By.xpath("//span[@id='ow_Icon_Social']")).size() == 1) {
            status = btnSOCIALChannelIcon.getAttribute("title").toLowerCase();
            if (status.equals("")) {
                status = btnSOCIALChannelIcon.getAttribute("aria-label").toLowerCase();
            }
            log.info(status);
            if (status.contains("not ready")) {
                isStatus = 1;
            }
            if (status.contains("logged out")) {
                isStatus = 2;
            }
        }
        return isStatus;
    }

    /**
     * <h1>checkStatusOfAgentChannel</h1> The function is used for checking status of a channel display on Workspace
     *
     * @return 0 if status of this channel is on Ready state/ 1 if this channel on Not Ready state/ 2 if this channel on Logged Out state
     */
    @Step("Checking status of a channel display on Workspace")
    public int checkStatusOfAgentChannel(String channelType) {
        int isStatus = 0;
        String status;
        switch (channelType.toLowerCase()) {
            case "sms":
                if (driver.findElements(By.xpath("//span[@id='ow_Icon_Sms']")).size() == 1) {
                    status = btnSMSChannelIcon.getAttribute("title").toLowerCase();
                    if (status.equals("")) {
                        status = btnSMSChannelIcon.getAttribute("aria-label").toLowerCase();
                    }
                    log.info(status);
                    if (status.contains("not ready")) {
                        isStatus = 1;
                    }
                    if (status.contains("logged out")) {
                        isStatus = 2;
                    }
                }
                break;

            case "chat":
                if (driver.findElements(By.xpath("//span[@id='ow_Icon_Chat']")).size() == 1) {
                    status = btnCHATChannelIcon.getAttribute("title").toLowerCase();
                    if (status.equals("")) {
                        status = btnCHATChannelIcon.getAttribute("aria-label").toLowerCase();
                    }
                    log.info(status);
                    if (status.contains("not ready")) {
                        isStatus = 1;
                    }
                    if (status.contains("logged out")) {
                        isStatus = 2;
                    }
                }
                break;

            case "email":
                if (driver.findElements(By.xpath("//span[@id='ow_Icon_Email']")).size() == 1) {
                    status = btnEMAILChannelIcon.getAttribute("title").toLowerCase();
                    if (status.equals("")) {
                        status = btnEMAILChannelIcon.getAttribute("aria-label").toLowerCase();
                    }
                    log.info(status);
                    if (status.contains("not ready")) {
                        isStatus = 1;
                    }
                    if (status.contains("logged out")) {
                        isStatus = 2;
                    }
                }
                break;

            case "voice":
                if (driver.findElements(By.xpath("//span[@id='ow_Icon_Voice']")).size() == 1) {
                    status = btnVOICEChannelIcon.getAttribute("title").toLowerCase();
                    if (status.equals("")) {
                        status = btnVOICEChannelIcon.getAttribute("aria-label").toLowerCase();
                    }
                    log.info(status);
                    if (status.contains("not ready")) {
                        isStatus = 1;
                    }
                    if (status.contains("logged out")) {
                        isStatus = 2;
                    }
                }
                break;

            case "messaging":
                if (driver.findElements(By.xpath("//span[@id='ow_Icon_Messaging']")).size() == 1) {
                    status = btnMESSAGINGChannelIcon.getAttribute("title").toLowerCase();
                    if (status.equals("")) {
                        status = btnMESSAGINGChannelIcon.getAttribute("aria-label").toLowerCase();
                    }
                    log.info(status);
                    if (status.contains("not ready")) {
                        isStatus = 1;
                    }
                    if (status.contains("logged out")) {
                        isStatus = 2;
                    }
                }
                break;

            case "social":
                if (driver.findElements(By.xpath("//span[@id='ow_Icon_Social']")).size() == 1) {
                    status = btnSOCIALChannelIcon.getAttribute("title").toLowerCase();
                    if (status.equals("")) {
                        status = btnSOCIALChannelIcon.getAttribute("aria-label").toLowerCase();
                    }
                    log.info(status);
                    if (status.contains("not ready")) {
                        isStatus = 1;
                    }
                    if (status.contains("logged out")) {
                        isStatus = 2;
                    }
                }
                break;
        }
        return isStatus;
    }

    public List<String> getListIconChannel(){
        try{
            List<String> listIconChannels = new ArrayList<>();
            List<WebElement> listChannels = driver.findElements(By.xpath("//cc-state-panel//span[contains(@class,'state-panel__icon')]"));
            for(WebElement channel : listChannels){
                String channelName = channel.getAttribute("id").split("_")[2];
                log.info("Channels : "+channelName);
                listIconChannels.add(channelName);
            }
            return listIconChannels;
        }catch (Exception e){
            log.info("Exception: "+e);
        }
        return null;
    }

    /**
     * This method use to get channel's state by map<String, String>
     * return status is lowercase
     */
    @Step("Checking status of all channel display on Workspace")
    public Map<String, String> checkStatusOfAllChannelWS() {
        wait(1);
        try {
            Map<String, String> state = new HashMap<>();
            List<WebElement> listChannels = driver.findElements(By.xpath("//cc-state-panel//span[contains(@class,'state-panel__icon')]"));
            for (WebElement channel : listChannels) {
                String channelName = channel.getAttribute("id").split("_")[2];
                String channelState = null;
                try {
                    channelState = channel.getAttribute("title").split("'")[1].toLowerCase();
                } catch (Exception e) {
                    channelState = channel.getAttribute("class").split("--")[1].replace("-", " ");
                }
                log.info(channelName + ":" + channelState);
                state.put(channelName, channelState);
            }
            return state;
        } catch (Exception e) {
            log.info("Exception: " + e);
        }
        return null;
    }

    /**
     * <h1>checkIfRONAOccurs</h1> This method is for checking if the RONA occurs or not
     *
     * @param channel channel type
     * @return boolean true or false
     */
    @Step("Checking if the RONA occurs or not")
    public boolean checkIfRONAOccurs(String channel) {
        boolean b = false;
        String result = check_Channel_Status(channel);
        if (result.contains("NOT_READY")) ;
        log.info("RONA occured");
        return b = true;
    }

    /**
     * <h1>VerifyifWorkcardExist</h1> This method is for verify a workcard displays on Workspace
     */
    @Step("Verify that contact is alerting at Agent")
    public void VerifyifWorkcardExist() {
        try {
            log.info("Verifying if the workcard is present  ");
            WebDriverWait wait1 = new WebDriverWait(driver, 480);
            wait1.until(ExpectedConditions.elementToBeClickable(Acceptmessage));
        } catch (Exception e) {

            try {
                Put_Agent_In_Available_State_from_ACW();
                if (Acceptmessage == null)
                    log.info("WORKCARD NOT RECEIVED ON THE AGENT WORKSPACE CHECK FOR LOGS AND VIDEO");
            } catch (Exception e1) {

            }
        }

    }

    /**
     * <h1>VerifyifWorkcardNotExist</h1> This method is for verify a workcard does not display on Workspace
     */
    @Step("Verify that contact is getting removed from Agent")
    public void VerifyifWorkcardNotExist() {
        try {
            if (Acceptmessage.isDisplayed())
                log.info("WORKCARD IS PRESENTING TO AGENT. PLEASE CHECK LOG.");
        } catch (Exception e1) {
        }
    }

    /**
     * <h1>wait_for_RONA_to_occur_SMS</h1> This method is for waiting until contact goes to RONA
     *
     * @param time_to_wait time for waiting
     * @param Channel      channel type
     */
    @Step("Waiting until contact goes to RONA")
    public void wait_for_RONA_to_occur_SMS(int time_to_wait, String Channel) {
        if (Acceptmessage != null) {
            try {
                log.info("-------------------------------------waiting for RONA to occur--------------------------------");
                WebDriverWait wait = new WebDriverWait(driver, time_to_wait);
                wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@ng-if= 'interactionMissed']"))).isDisplayed();
            } catch (Exception e) {
                log.info("THE RONA TIME IS GREATER THAN THE TIME SPECIFIED IN THE SCRIPT " + time_to_wait);
            }
        }
        if (Acceptmessage == null) {
            log.info("WORKCARD DID NOT REACH THE AGENT REFER TO THE VIDEO");
            Assert.fail();
        }
        log.info("Outsidewait_for_RONA_to_occur_SMS ");

    }

    /**
     * <h1>start_Cobrowse_Session_from_AgentSide</h1> This method is for intiate co-browser session on Agent side
     */
    @Step("Initiate co-browser session on Agent side")
    public void start_Cobrowse_Session_from_AgentSide() {
        wait.until(ExpectedConditions.visibilityOf(btnCobrowse));
        btnCobrowse.click();
        log.info("Going to the Cobrowse tab on agent desktop.....");
        wait.until(ExpectedConditions.elementToBeClickable(tabGetCobrowseSessionKey));
        tabGetCobrowseSessionKey.click();
        log.info("Generating Session Key for the Cobrowse Session....");

    }

    /**
     * <h1>switch_to_CoBrowse_Frame</h1> This method is for switching to Co-browser frame
     */
    @Step("Switching to Co-browser frame")
    public void switch_to_CoBrowse_Frame() {

        WebElement fr = driver.findElement(By.id("iframeDiv"));
        wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(fr));
        log.info("Switching to CoBrowse Frame....");

    }

    /**
     * <h1>verify_Field_filled_by_Customer_on_AgentSide</h1> This method is for verify text field
     * Used for Cobrowser - AOC class
     *
     * @param FieldToBeVerified
     * @param FieldValue
     * @return true/false
     */
    @Step("Verify text field")
    public boolean verify_Field_filled_by_Customer_on_AgentSide(WebElement FieldToBeVerified, String FieldValue) {

        if (FieldToBeVerified.toString().equalsIgnoreCase("drpdwnCitizenship")
                || FieldToBeVerified.toString().equalsIgnoreCase("txtboxDOBMonth")
                || FieldToBeVerified.toString().equalsIgnoreCase("txtboxDOBDay")
                || FieldToBeVerified.toString().equalsIgnoreCase("txtboxDOBYear"))
            driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

        String sFieldValueOnAgentSide = null;

        if (FieldToBeVerified.toString().contains("drpdwn")) {
            String id_for_drpdwn = FieldToBeVerified.getAttribute("id");
            sFieldValueOnAgentSide = new Select(driver.findElement(By.id(id_for_drpdwn))).getFirstSelectedOption()
                    .getText();
        } else// {
            // if(FieldToBeVerified.toString().equalsIgnoreCase("drpdwnCitizenship"))
            // sFieldValueOnAgentSide =FieldToBeVerified.getAttribute("value");
            sFieldValueOnAgentSide = FieldToBeVerified.getAttribute("value");
        // }
        if (sFieldValueOnAgentSide.equals(FieldValue)) {
            log.info("Field entered by customer is rightly being reflected on agent side....");
            return true;
        } else {
            // change this log.info("Error in filling the field by customer...");
            log.info("The value from agent side for selected field --> " + sFieldValueOnAgentSide);
            log.info("The value of selected field as filled by customer --> " + FieldValue);
            return false;
        }

    }


    /**
     * <h1>verify_Field_filled_by_Customer_on_AgentSide</h1> This method is for verfiy confidential information
     * Used for Cobrowser - AOC class
     *
     * @param ConfidentialField
     * @return true/false
     */
    @Step("Verify confidential information")
    public boolean verify_Confidential_Information(WebElement ConfidentialField) {
        String sAgentSideConfidentialField = ConfidentialField.getAttribute("title");
        String ConfidentialMessage = "This field is hidden from Agent";
        if (sAgentSideConfidentialField.equals(ConfidentialMessage)) {
            log.info("Customer Confidential data is not available to the agent...");
            return true;
        } else {
            log.info("Agent can see customer confidential data");
            return false;
        }

    }

    /**
     * <h1>switch_back_to_parent_window</h1> This method is for switch to default window
     */
    @Step("Switch to default window")
    public void switch_back_to_parent_window() {
        driver.switchTo().defaultContent();
        log.info("Switching to Parent window on the agent desktop....");
    }

    /**
     * <h1>agent_requests_control_from_Customer</h1> This method is for agent request control co-browser from customer
     */
    @Step("Agent request control co-browser from customer")
    public void agent_requests_control_from_Customer() {

        wait.until(ExpectedConditions.visibilityOf(frameCobrowseForAgent));
        WebElement requestControlForAgent = frameCobrowseForAgent
                .findElement(By.xpath(".//button[@ng-click='requestControl()']"));
        requestControlForAgent.click();
        log.info("Agent requesting Control from Customer.....");
        log.info("Waiting for Customer response.....");
    }

    /**
     * <h1>end_CobrowseSession_from_AgentSide</h1> This method is for end co-browser session from agent side
     */
    @Step("End co-browser session from agent side")
    public void end_CobrowseSession_from_AgentSide() {
        wait.until(ExpectedConditions.visibilityOf(frameCobrowseForAgent));
        WebElement EndCobrowse = frameCobrowseForAgent.findElement(By.xpath(".//button[@ng-click='endCobrowse()']"));
        EndCobrowse.click();
        log.info("Ending Cobrowse Session form agent side....");
    }

    /**
     * <h1>open_Cobrowse_URL</h1> This method is for open co-browser URL
     */
    @Step("Open co-browser URL")
    public void open_Cobrowse_URL() {
        btnCobrowse.click();
        log.info("Going to the Cobrowse tab on agent desktop.....");
        lnkTxtCobrowseURL.click();
        log.info("Open Customer side url for form fill up....");
    }

    /**
     * <h1>verify_Cobrowse_session_active_on_AnotherCard</h1> This method is for verify Co-browser session active on another workcard
     */
    @Step("Verify Co-browser session active on another workcard")
    public void verify_Cobrowse_session_active_on_AnotherCard() {
        wait.until(ExpectedConditions.visibilityOf(txtCobrowseSessionActive));
        log.info("Could not start Cobrowse session as another session is active...");
    }

    /**
     * <h1>cobrowse_btn_click</h1> This method is for clicking on Co-browser button
     */
    @Step("Clicking on Co-browser button")
    public void cobrowse_btn_click() {
        wait.until(ExpectedConditions.elementToBeClickable(btnCobrowse));
        log.info("Going to cobrowse tab for agent");
    }

    @Step("Verify co-browse session is active")
    public boolean verifyCobrowseSessionIsActive(String interactionID) {
        try {
            WebDriverWait wait = new WebDriverWait(driver, 30);
            WebElement cobrowseHeader = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//cc-cobrowse[@interaction-id='" + interactionID + "']//div[@class='widget__header-controls']")));
            WebElement cobrowseIframe = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//cc-cobrowse[@interaction-id='" + interactionID + "']//div[contains(@class,'iframeContainer')]")));
            if (cobrowseHeader.isDisplayed() && cobrowseIframe.isDisplayed()) {
                return true;
            }
        } catch (Exception e) {
            log.info("Co-browse is not active");
        }
        return false;
    }

    public boolean verifyMessageStatus(String interactionID, String cusName) {
        try {
            WebElement notifyDisconnetd = driver.findElement(By.xpath("//div[@interaction-id='" + interactionID + "']//md-content[@class='messenger-messages__inner _md ps ps--active-y']//..//..//strong[text()='" + cusName + "'']//..//span[text()='has temporarily disconnected']"));
            if (notifyDisconnetd.isDisplayed()) {
                log.info("Message Status is disconnected");
                return false;
            }
        } catch (Exception e){
            log.info("Message Status is connected");
            return true;
        }
        log.info("Message Status is connected");
        return true;
    }

    /**
     * <h1>wait_for_call_interval</h1> This method is for waiting on n seconds
     *
     * @param Time_To_Wait need to review
     */
    @Step("Waiting on n seconds")
    public void wait_for_call_interval(int Time_To_Wait) {
        driver.manage().timeouts().implicitlyWait(Time_To_Wait, TimeUnit.SECONDS);
        log.info("Waiting for specified time : " + Time_To_Wait + " seconds");
    }

    /**
     * <h1>Get_Native_ResourceId</h1> This method returns the native resource ID,
     * i.e. the Agent's ID. This can be used to verify the if you are geeting the
     * agent ID which was expected.
     * <p>
     *
     * @return String
     * @author kujjawal
     * @version 1.0
     * @since 2017-08-02
     */
    @Step("Returns the native resource ID")
    public String Get_Native_ResourceId() {
        log.info("Finding the Agent's Native Resource ID");
        return agentID.getText();
    }

    /**
     * <h1>workrequest_exists</h1> This method is for verify workrequest existing or not
     * used for WorkAssigment_AOC class
     *
     * @return true/false
     */
    @Step("Verify workrequest existing or not")
    public boolean workrequest_exists() {
        boolean exists = false;
        try {
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//button[@ng-click='accept()']")));
            // driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
            exists = driver.findElements(By.xpath("//button[@ng-click='accept()']")).size() != 0;
            log.info("Element status" + exists);

        } catch (Exception e) {
            // TODO Auto-generated catch block
            // e.printStackTrace();
        }
        return exists;

    }

    /**
     * <h1>Wrap_call</h1> This method is for wrapping call
     */
    @Step("Wrapping call")
    public void Wrap_call() {
        try {
            wait.until(ExpectedConditions.visibilityOf(btnWrapCall));
            btnWrapCall.click();
            log.info("Successfully wrap-up the call");
        } catch (Exception e) {
            log.info("Error in Wrapping call");
        }
    }

    /**
     * <h1>Transfer_Of_Service</h1> This method is for transferring contact to service
     *
     * @param sTransferOfService Service name for transfer
     * @param ID1                Interaction ID of workcard
     * @throws InterruptedException
     */
    @Step("Transferring contact to service")
    public void Transfer_Of_Service(String sTransferOfService, String ID1) throws InterruptedException {
        try {
            log.info(sTransferOfService);
            Thread.sleep(5000);
            log.info("Clicking //*[@id='ow_Card_Transfer_" + ID1 + "_btn']");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_Transfer_" + ID1 + "_btn']"))).click();
            Thread.sleep(5000);
            log.info("Clicking //*[@id='ow_navigate_next_Transfer_" + ID1 + "']");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_navigate_next_Transfer_" + ID1 + "']"))).click();
            Thread.sleep(5000);
//button[@class='md-button md-ink-ripple'][.//span[contains(text(), 'AutomationService')]]
//wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@class='md-button md-ink-ripple'][.//span[contains(text(), '"+sTransferOfService+"')]]"))).click();
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='_md md-open-menu-container md-whiteframe-z2 md-active md-clickable']//button[@class='md-button md-ink-ripple'][.//span[contains(text(), '" + sTransferOfService + "')]]"))).click();

        } catch (Exception e) {
            log.error("Error in transfering to a service; Either service \"" + sTransferOfService + "\" not found or required element wasn't clickable");
            Assert.fail("Error in transfering to a service; Either service \"" + sTransferOfService + "\" not found or required element wasn't clickable");
        }

    }

    /**
     * <h1>transferToAgent</h1> This method is for transferring contact to agent
     *
     * @param strAgentFullName Agent name for transfer
     * @param interactionId    Interaction ID of workcard
     * @throws InterruptedException
     */
    @Step("Transferring contact to agent")
    public boolean transferToAgent(String strAgentFullName, String interactionId) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            Actions actions = new Actions(driver);
            log.info("Starting transfer to agent " + strAgentFullName);
            Thread.sleep(5000);
            log.info("Clicking Transfer button //*[@id='ow_Card_Transfer_" + interactionId + "_btn']");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_Transfer_" + interactionId + "_btn']"))).click();
            Thread.sleep(5000);

            WebElement userLabel = driver.findElement(By.xpath("//*[@puppeteer-id='consult-menu__users-Transfer_" + interactionId + "']"));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", userLabel);
            Thread.sleep(2000);

            log.info("Clicking on Search field, then input agent name");
            WebElement inputSearch = driver.findElement(By.xpath("//input[@id='transder_to_user_search_Transfer_" + interactionId + "']"));
            inputSearch.click();
            inputSearch.sendKeys(Keys.BACK_SPACE);
            wait(1);
            inputSearch.sendKeys(strAgentFullName);
            Thread.sleep(2000);

            log.info("Click on user name to transfer");
            WebElement userName = driver.findElement(By.xpath("//button[@puppeteer-id='consult-menu__users-list-item_" + interactionId + "']/div[.='" + strAgentFullName + "']"));
            executor.executeScript("arguments[0].click();", userName);

        } catch (Exception e) {
            log.error("Error in transfering to a agent; Either service \"" + strAgentFullName + "\" not found or required element wasn't clickable");
            //Assert.fail("Error in transfering to a agent; Either service \"" + strAgentFullName + "\" not found or required element wasn't clickable");
            return false;
        }
        //complete ACW
        complete_ACW();
        return true;
    }

    /**
     * <h1>transferToService</h1> This method is for transferring contact to service
     *
     * @param sTransferOfService Service name for transfer
     * @param strInteractionId   Interaction ID of workcard
     * @throws InterruptedException
     */
    @Step("Transferring contact to service")
    public void transferToService(String sTransferOfService, String strInteractionId) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            Actions actions = new Actions(driver);
            log.info(sTransferOfService);
            Thread.sleep(2000);
            log.info("Clicking Transfer button");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_Transfer_" + strInteractionId + "_btn']"))).click();
            Thread.sleep(2000);
            log.info("Clicking Service label");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@puppeteer-id='consult-menu__services-Transfer_" + strInteractionId + "']"))).click();
            WebElement serviceLabel = driver.findElement(By.xpath("//*[@puppeteer-id='consult-menu__services-Transfer_" + strInteractionId + "']"));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", serviceLabel);
            Thread.sleep(2000);
            log.info("Scroll to service name");
            WebElement serviceName = driver.findElement(By.xpath("//div[@class='_md md-open-menu-container md-whiteframe-z2 md-active md-clickable']//button[contains(text(), '" + sTransferOfService + "')]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", serviceName);
            log.info("Click on service name");
            executor.executeScript("arguments[0].click();", serviceName);
        } catch (Exception e) {
            log.error("Error in transfering to a service; Either service \"" + sTransferOfService + "\" not found or required element wasn't clickable");
            Assert.fail("Error in transfering to a service; Either service \"" + sTransferOfService + "\" not found or required element wasn't clickable");
        }
    }

    /**
     * <h1>Close_call</h1> This method is for closing contact
     */
    @Step("Closing contact")
    public void Close_call() {
        wait.until(ExpectedConditions.visibilityOf(btnCloseCall));
        btnCloseCall.click();
    }

    /**
     * <h1>StoreIDdynamically</h1> This method is for storing Interaction ID
     *
     * @param Channel channel type
     * @return
     */
    @Step("Storing Interaction ID")
    public String StoreIDdynamically(String Channel) {
        log.info("------------------------Getting the ID of the WorkCard displayed on the agent Workspace------------------------");
        String IDGeneratedDynamically = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[@aria-label='Alerting " + Channel + " Interaction']"))).getAttribute("id");
        String[] IDGeneratedDynamically_trimmed = IDGeneratedDynamically.split("_");
        String ID = IDGeneratedDynamically_trimmed[3];
        return ID;

    }

    /**
     * <h1>getInteractionIdByChannelType</h1> This method is for getting Interaction ID of workcard base on channel type
     *
     * @param Channel channel type
     * @return string of interaction ID bu channel
     */
    @Step("Getting Interaction ID of workcard base on channel type")
    public String getInteractionIdByChannelType(String Channel) {
        log.info("------------------------Getting the ID of the accepted WorkCard on the agent Workspace------------------------");
        String IDGeneratedDynamically = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[@aria-label='Active " + Channel + " Interaction']"))).getAttribute("id");
        String[] IDGeneratedDynamically_trimmed = IDGeneratedDynamically.split("_");
        String ID = IDGeneratedDynamically_trimmed[3];
        return ID;
    }


    /**
     * <h1>accept_WorkCard</h1> This method is for accepting contact
     *
     * @param Channel channel type
     * @return string of interaction ID
     */
    @Step("Agent accepts contact by channel type")
    public String accept_WorkCard(String Channel) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        switch (checkStatusOfAgentChannel(Channel)) {
            case 1://not ready
                Put_Agent_In_Available_State_from_ACW();
                break;
            case 2://logout
                Put_Agent_In_Ready_State();
                break;
        }

        try {
            log.info("------------------------Waiting for the workcard alert to display------------------------------------------------");
            if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), 200) != null)) {
                String ID = GETIDS(Channel);
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button[@ng-click='accept()']")));
                wait(2);
                log.info("Accepted contact successfully. Getting service name: ");
                WebElement serviceName = driver.findElement(By.xpath("//div[@id='ow_Service_Name_" + ID + "']/span"));
                log.info(serviceName.getText());
                return ID;
            } else {
                Assert.fail("ERROR: Cannot accept contact due to it is not alerting on Workspaces");
                return null;
            }

//            else {
//                RefreshWS();
//                wait(1);
//
//                log.info("------------------------Waiting for the workcard alert to display------------------------------------------------");
//                if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), 60) != null)) {
//                    String ID = GETIDS(Channel);
//                    JavascriptExecutor executor = (JavascriptExecutor) driver;
//                    executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button[@ng-click='accept()']")));
//                    wait(2);
//                    log.info("Accepted contact successfully. Getting service name: ");
//                    WebElement serviceName = driver.findElement(By.xpath("//div[@id='ow_Service_Name_" + ID + "']/span"));
//                    log.info(serviceName.getText());
//                    return ID;
//
//                } else {
//                    Assert.fail("ERROR: Cannot accept contact due to it is not alerting on Workspaces");
//                    return null;
//                }
//            }

        } catch (Exception e) {
            log.info("Exception occured in Accepting call function ");
            Assert.fail("Workcard either didnt appear on the workspace or there was an error in accepting the workcard refer to the video");
            return null;
        }
    }

    @Step("Agent accepts contact by channel type")
    public String accept_WorkCard_Without_Assert(String Channel) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        switch (checkStatusOfAgentChannel(Channel)) {
            case 1://not ready
                Put_Agent_In_Available_State_from_ACW();
                break;
            case 2://logout
                Put_Agent_In_Ready_State();
                break;
        }

        try {
            log.info("------------------------Waiting for the workcard alert to display------------------------------------------------");
            if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), 300) != null)) {
                String ID = GETIDS(Channel);
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button[@ng-click='accept()']")));
                wait(2);
                log.info("Accepted contact successfully. Getting service name: ");
                WebElement serviceName = driver.findElement(By.xpath("//div[@id='ow_Service_Name_" + ID + "']/span"));
                log.info(serviceName.getText());
                return ID;

            } else {
                RefreshWS();
                wait(1);
//                Finish_Work_For_Agent();
//                wait(1);
//                try {
//                    btnWorkStartButton.click();
//                } catch (Exception e) {
//                    btnWorkStartButton2.click();
//                }

                log.info("------------------------Waiting for the workcard alert to display------------------------------------------------");
                if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), 300) != null)) {
                    String ID = GETIDS(Channel);
                    JavascriptExecutor executor = (JavascriptExecutor) driver;
                    executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button[@ng-click='accept()']")));
                    wait(2);
                    log.info("Accepted contact successfully. Getting service name: ");
                    WebElement serviceName = driver.findElement(By.xpath("//div[@id='ow_Service_Name_" + ID + "']/span"));
                    log.info(serviceName.getText());
                    return ID;

                } else {
//                    Assert.fail("ERROR: Cannot accept contact due to it is not alerting on Workspaces");
                    return null;
                }
            }

        } catch (Exception e) {
            log.info("Exception occured in Accepting call function ");
//            Assert.fail("Workcard either didnt appear on the workspace or there was an error in accepting the workcard refer to the video");
            return null;
        }

    }

    @Step("Getting service name of accepted workcard")
    public String getServiceNameofAcceptedContact(String interactionID) {

        try {
            WebElement serviceName = driver.findElement(By.xpath("//div[@id='ow_Service_Name_" + interactionID + "']/span"));
            return serviceName.getText();

        } catch (Exception e) {
            log.info("Exception when getting service name of accepted workcard");
            return null;
        }
    }

    /**
     * <h1>setDispositionCode</h1> This method is for setting disposition code for contact
     *
     * @param DispositionCodeTobeSet Disposition code
     * @param ID                     Interaction Id of workcard
     */
    @Step("Setting disposition code for contact")
    public boolean setDispositionCode(String DispositionCodeTobeSet, String ID) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            log.info("Setting the disposition code to " + DispositionCodeTobeSet);
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
            }
            log.info("Clicking disposition code label");
            WebElement dispositionCodeLabel = driver.findElement(By.xpath("//md-menu-item[@id='ow_disposition_code_" + ID + "']/md-menu/button/span[text()='Disposition Codes']"));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", dispositionCodeLabel);
            Thread.sleep(2000);
            log.info("Scroll to disposition code name");
            List<WebElement> dispoName = driver.findElements(By.xpath("//button[contains(@class,'ow_disposition_reason_code_" + ID + "')]"));
            if (dispoName.size() > 0) {
                for (int i = 0; i < dispoName.size(); i++) {
                    if (dispoName.get(i).getText().equals(DispositionCodeTobeSet)) {
                        List<WebElement> dpName = driver.findElements(By.xpath("//button[text()='" + DispositionCodeTobeSet + "']"));
                        WebElement dp = dpName.get(dpName.size() - 1);
                        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", dp);
                        log.info("Click on disposition code name");
                        executor.executeScript("arguments[0].click();", dp);
                        break;
                    }
                }
            }
            wait(2);
            return true;

        } catch (Exception e) {
            log.info("Error in setting disposition code " + e);
            return false;
        }
    }



    /**
     * <h1>end_SMS</h1> This method is for ending SMS contact
     */
    @Step("Ending SMS contact")
    public void end_SMS() {
        WebElement End = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@ng-click='end()']")));
        End.click();
        WebElement ACWbtn = wait
                .until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//button[@ng-click='completeACW()']")));
        ACWbtn.click();
        log.info("Closed the WorkCard successfully");
    }


    /**
     * <h1>socialmodeandchannel</h1>
     *
     * @param expectedchannel
     * @param expectedmode
     * @author mane16
     */
    public void socialmodeandchannel(String expectedchannel, String expectedmode) {
        wait.until(ExpectedConditions.elementToBeClickable(socialmode));
        wait.until(ExpectedConditions.elementToBeClickable(socialchannel));
        String actualmode = socialmode.getText();
        String actualchannel = socialchannel.getText();
        if (expectedchannel.equalsIgnoreCase(actualchannel)) {
            log.info("-------------MESSAGE FROM EXPECTED CHANNEL \"" + expectedchannel + "\" IN EXPECTED MODE \"" + expectedmode + "\" .-------------");
        } else {
            log.info("-------------MESSAGE FROM INCORRECT CHANNEL \"" + actualchannel + "\" IN INCORRECT MODE \"" + actualmode + "\" .-------------");
            log.info("Expected request not received");
            Assert.fail();
        }
    }

    /**
     * <h1>reply_Workcard_withoutSend</h1> This method is for reply message on Workspace but not send
     *
     * @param message  is content of message
     * @param Customer is name of customer
     */
    @Step("Reply message on Workspace but not send")
    public void reply_Workcard_withoutSend(String message, String Customer) {
        log.info("Replying to " + Customer + "from the workspace with message " + message);
        try {
            switch_between_SMS(Customer);
            Thread.sleep(2000);
            List<WebElement> element1 = driver.findElements(By.xpath("//textarea[@placeholder='Type a message...']"));
            for (WebElement reply : element1) {
                if (reply.isDisplayed()) {
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException e) {
                    }
                    reply.click();
                    reply.sendKeys(message);
                    log.info("Message cannot be sent as message is greater than 140 characters");
                    //reply.sendKeys(Keys.ENTER);
                    //log.info("Message sent");
                }
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block

        }
    }

    @Step("Click reply email on Workspace")
    public void reply_Email_Without_Send() {
        try {
            wait(3);
            List<WebElement> element1 = driver.findElements(By.xpath("//span[text()='Reply']"));
            for (WebElement reply : element1) {
                if (reply.isDisplayed()) {
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException e) {
                    }
                    reply.click();
                }
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block

        }
    }

    public boolean isElementVisible(By by, int timeOut) {
        try {
            WebDriverWait wait = new WebDriverWait(driver, timeOut);
            wait.until(ExpectedConditions.visibilityOfElementLocated(by));
            return true;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return false;
    }

    public void fillTextToInput(WebElement element, String text, boolean isOverride) {
        wait.until(ExpectedConditions.visibilityOf(element));
        if (isOverride) {
            element.clear();
        }
        element.sendKeys(text);
    }

    @Step("Insert link")
    public int insertLinkAndVerifyHighlight(String textToDisplay, String linkAddress) {
        int failedFlag = 0;
        String linkInserted_pattern = "//div[@puppeteer-id=\"email-widget--textarea\"]//a[@href=\"%s\"]";
        String linkAddress_xpath = String.format(linkInserted_pattern, linkAddress);

        // open popup
//        try {
//            wait.until(ExpectedConditions.elementToBeClickable(elBtnInsertLink));
//            elBtnInsertLink.click();
//        }catch (Exception e) {
//            wait.until(ExpectedConditions.elementToBeClickable(btnInsertLinkAdhoc));
//            btnInsertLinkAdhoc.click();
//        }

        // fill text, link
        if (textToDisplay != null){
            fillTextToInput(elTextToDisplay, textToDisplay, true);
        }
        fillTextToInput(elLinkAddress, linkAddress, true);

        // submit insert link
        wait.until(ExpectedConditions.elementToBeClickable(elBtnSubmitInsertLink));
        elBtnSubmitInsertLink.click();

        // check that the link is highlighted and in email body
        if (!isElementVisible(By.xpath(linkAddress_xpath), 5)) {
            log.info("FAILED. Insert link does not display in the email body.");
            failedFlag++;
        } else {
            log.info("Insert link successfully.");
        }
        return failedFlag;

    }

    @Step("Update link ")
    public int updateAndVerifyLinkDialog(String replaceLinkAddress) {
        int failedFlag = 0;
        String linkInserted_pattern = "//div[@puppeteer-id=\"email-widget--textarea\"]//a[@href=\"%s\"]";
        String linkAddressUpdate_xpath = String.format(linkInserted_pattern, replaceLinkAddress);

        // open popup modify
        wait.until(ExpectedConditions.elementToBeClickable(elBtnUpdateLink));
        elBtnUpdateLink.click();

        // modify link address
        fillTextToInput(elUpdateLinkAddress, replaceLinkAddress, true);

        // submit update link address
        wait.until(ExpectedConditions.elementToBeClickable(elBtnSubmitUpdateLink));
        elBtnSubmitUpdateLink.click();

        // check the link updated
        if (!isElementVisible(By.xpath(linkAddressUpdate_xpath), 5)) {
            log.info("FAILED. Update link is not working properly.");
            failedFlag++;
        } else {
            log.info("Update link work fine.");
        }

        return failedFlag;
    }

    //for Hot Desk TC

    /**
     * <h1>CCClient_Login</h1> This method is for login agent on Workspaces (for Hot Desk TC)
     *
     * @param AgentName             is agent ID
     * @param pwd                   is password of agent
     * @param sConfigured_Extention is extension of agent
     * @param sHotdesk_Extention    is hot desk extension
     * @return true/false , true if agent can log and start work, else return false
     */
    @Step("Login agent on Workspaces (for Hot Desk TC)")
    public boolean CCClient_Login(String AgentName, String pwd, String sConfigured_Extention,
                                  String sHotdesk_Extention) {
        try {
            if (this.eXISTs(driver, txtUsername, 5) != null) {
                // set user credentials
                txtUsername.clear();
                txtUsername.sendKeys(AgentName);
                sUname = AgentName;
                txtPassword.clear();
                txtPassword.sendKeys(pwd + Keys.TAB);
                btnSignIn.sendKeys(Keys.ENTER);
                wait(5);

                log.info("The configured Extention is :" + txtExtention.getAttribute("value"));
                if (!(txtExtention.isEnabled())) {
                    log.info("The Extention text box is not editable");
                    return false;

                }

                if (!(txtExtention.getAttribute("value").toString().equals(sConfigured_Extention))) {
                    log.info("The configured Extention on UI" + "txtExtention.getAttribute(value)"
                            + "is not matching with the input configured extension" + sConfigured_Extention);

                    return false;

                } else {

                    txtExtention.clear();
                    // txtExtention.click();
                    txtExtention.sendKeys(sHotdesk_Extention);
                    // Button click is not working hence used the enter key press
                    //btnAcivateButton.sendKeys(Keys.ENTER);
                    btnAcivateButton.click();
                    return true;
                }

            } else {
                log.info("Error in login agent - the User name filed is not displayed");
                return false;
            }
        } catch (Exception e) {
            log.info(e.getMessage());
            e.printStackTrace();
            return false;
        }

    }

    /**
     * <h1>POM_setDispositionCode</h1> This method is for setting Disposition code for POM contact
     *
     * @param DispositionCodeTobeSet is disposition code
     */
    @Step("Setting Disposition code for POM contact")
    public void POM_setDispositionCode(String DispositionCodeTobeSet) {
        try {
            log.info("Setting the disposition code to " + DispositionCodeTobeSet);
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
            }

            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[starts-with(@id, 'ow_Card_More_btn_')]"))).click();
            try {
                Thread.sleep(4000);
            } catch (InterruptedException e) {
            }
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[starts-with(@id, 'ow_disposition_code_')]"))).click();
            List<WebElement> disposition = driver.findElements(By.xpath("//button[text()='" + DispositionCodeTobeSet + "']"));

            for (WebElement dispo : disposition) {
                Thread.sleep(3000);
                if (dispo.isDisplayed()) {
                    try {
                        Thread.sleep(4000);
                    } catch (Exception e) {

                    }
                    dispo.click();
                }
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
        }
    }

    /**
     * <h1>POM_workrequest_exists</h1> This method is for checking workrequest of POM contact
     *
     * @param CampiagnName as OceanaCampaign1
     */
    @Step("Checking workrequest of POM contact")
    public void POM_workrequest_exists(String CampiagnName) {
        String ExpectedCampaingName = CampiagnName;


        try {
            log.info("Inside method POM_workrequest_exists ");

            WebDriverWait wait1 = new WebDriverWait(driver, 200);
            wait1.until(ExpectedConditions.elementToBeClickable(POMWorkcard)).click();

            log.info("Getting the campaign id from the workcard");
            WebElement Campaignid = driver.findElement(By.xpath("//*[starts-with(@id, 'ow_Service_Name_')]/span"));
            Thread.sleep(4000);
            Campaignid.click();
            String tooltip = Campaignid.getText();

            if (ExpectedCampaingName.equalsIgnoreCase(tooltip)) {
                log.info("Expected CampaignName " + ExpectedCampaingName + " is found");
            } else {
                Assert.fail();
                log.info("Expected CampaingName =" + ExpectedCampaingName + " is not found");
            }

        } catch (Exception e) {

            Assert.fail();
            log.info("POM Workcard not appeared ");
            // TODO Auto-generated catch block
            // e.printStackTrace();
        }


    }


    /**
     * <h1>POM_Customer_Deatils</h1> This method is for checking POM customer details
     *
     * @param sFullname is customer name
     * @param sPhone    is customer phone
     * @param sEmail    is customer email
     * @return string of context.contactId
     */
    @Step("Checking POM customer details")
    public String POM_Customer_Deatils(String sFullname, String sPhone, String sEmail) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String sContext_id = null;
        String ID1 = null;
        try {
            if ((this.eXISTs(driver, By.xpath("//*[@id='ow_open_Customer_Details']"), 15) != null)) {
                // Verify Customer details widget

                WebElement Customer_Details = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_open_Customer_Details']")));
                Customer_Details.click();

                // Verify Customer Name

                WebElement Customer_Name = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@ng-if='!hideHeader']")));
                String sCustomerName = Customer_Name.getText();
                sCustomerName = sCustomerName.split("\\(")[0].trim();
                log.info("Customer Name = " + sCustomerName);


                if (sCustomerName.equalsIgnoreCase(sFullname)) {
                    log.info("***** Expected Customer Name *** " + sCustomerName + " is found *****");
                } else {

                    log.info("***** Expected Customer Name *** " + sCustomerName + " is not found *****");
//                    Assert.fail();
                }

//                WebElement Customer_Address = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//tr[@ng-if='!isObjectEmpty(customer.preferredAddress)']/td[2]")));
//                String Customer_Addresses = Customer_Address.getText();
//                String[] Customer_fulladdresses = Customer_Addresses.split("\\+");
//                String Customer_Pre_Address = Customer_fulladdresses[0];
//
//                log.info("*** Customer Preferred address ***" + Customer_Pre_Address);

                JavascriptExecutor executor1 = (JavascriptExecutor) driver;
                executor1.executeScript("arguments[0].scrollIntoView(true) ;",
                        driver.findElement(By.xpath("//tr[@ng-if='context.contactId']/td[2]")));
                //ID1 = driver.findElement(By.xpath("//tr[@ng-if='context.contactId']/td[2]")).getText();
                WebElement Context_id = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//tr[@ng-if='context.contactId']/td[2]")));
                sContext_id = Context_id.getText();

                log.info("***Customer Contact ld =" + sContext_id);

                // Verify Customer Phone Number
                if (sPhone != null) {
                    wait.until(ExpectedConditions.elementToBeClickable(POM_CustomerNumber));
                    String CustomerFullPhone = POM_CustomerNumber.getText();
//                    String[] phoneNumbers = CustomerFullPhone.split("-");
//                    String CustomerPhoneNumber = phoneNumbers[1];

                    if (CustomerFullPhone.equalsIgnoreCase(sPhone)) {
                        log.info("***** Expected Customer Phone Number" + CustomerFullPhone + " is found *****");
                    } else {

                        log.info("***** Expected Customer Phone Number" + CustomerFullPhone + " is not found *****");
                        Assert.fail();

                    }

                    //	Verify Customer Email Address

                    if (sEmail != null) {

                        WebElement email = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//a[contains(@ng-href, 'mailto')]")));
                        String emailID = email.getAttribute("href");
                        String emailaddress = emailID.substring(7);

                        if (sEmail.equalsIgnoreCase(emailaddress)) {
                            log.info("***** Expected Email Address " + emailaddress + " is found *****");
                        } else {

                            log.info("***** Expected Email Address " + emailaddress + " is not found *****");
                            Assert.fail();

                        }

                    }
                }
            }
        } catch (Exception e) {
            log.info(e.getMessage());
            e.printStackTrace();

        }

        return sContext_id;
    }

    /**
     * <h1>click_left_workspace</h1> This method is for clicking on the left on Workspaces
     */
    @Step("Clicking on the left on Workspaces")
    public void click_left_workspace() {

        try {
            WebDriverWait wait1 = new WebDriverWait(driver, 200);
            WebElement workspace = wait1.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//a[@ng-click='exitRedirect()']")));
            workspace.click();
        } catch (Exception e) {
            Assert.fail("Fail to click on left workspace URL");

        }
    }

    //For CRM TC

    /**
     * <h1>Check_CRM_Cust_Deatils</h1> This method is for checking CRM customer details
     * Used for CRM_Oceana class
     *
     * @param sFullname
     * @param sAddress
     * @param sPhone
     * @param sEmail
     * @param sCrmid
     * @param sSocial
     * @param sAccount
     * @param sCustom
     * @return true/false
     */
    @Step("Checking CRM customer details")
    public boolean Check_CRM_Cust_Deatils(String sFullname, String sAddress, String sPhone, String sEmail, String sCrmid, String sSocial, String sAccount, String sCustom) {
        try {
            if ((this.eXISTs(driver, By.xpath("//button[@id='ow_open_Customer_Details']"), 5) != null)) {
                WebElement End = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@id='ow_open_Customer_Details']")));
                End.click();
                log.info(" Entered into Customer Details Widget");
                boolean bFlag1 = true;
                boolean bFlag2 = true;
                boolean bFlag3 = true;
                boolean bFlag4 = true;
                boolean bFlag5 = true;
                boolean bFlag6 = true;
                boolean bFlag7 = true;
                boolean bFlag8 = true;
                objUtil.wait(10);
                WebElement CustDetails = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//h5[contains(text(),'Customer Details')]")));
                //log.info("CustDetails.getAttribute=" + CustDetails.getText());
                if (CustDetails.getText().equals("Customer Details")) {
                    log.info(" Customer Details panel shown");
                    if (sAddress != null) {
                        //log.info("sAddress=" + sAddress);
                        WebElement address = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[contains(text(),'" + sAddress + "')]")));
                        //log.info("address.getAttribute" + address.getText());
                        if (address.getText().equals(sAddress)) {
                            log.info(" Customer Address shown correctly: " + address.getText());
                        } else {
                            log.info(" Customer Address Not shown correctly: " + address.getText());
                            bFlag1 = false;
                        }
                    }
                    if (sFullname != null) {
                        WebElement fullname = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//strong[contains(text(),'" + sFullname + " (" + sFullname + ")')]")));
                        if (fullname.getText().equals(sFullname + " (" + sFullname + ")")) {
                            log.info(" Customer Full Name shown correctly: " + fullname.getText());
                        } else {
                            log.info(" Customer Full Name Not shown correctly: " + fullname.getText());
                            bFlag2 = false;
                        }
                    }
                    if (sPhone != null) {
                        WebElement phone = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[@class='click-to-call__number'][contains(text(),'" + sPhone + "')]")));
                        if (phone.getText().equals(sPhone)) {
                            log.info(" Customer Phone Number shown correctly: " + phone.getText());
                        } else {
                            log.info(" Customer Phone Number Not shown correctly: " + phone.getText());
                            bFlag3 = false;
                        }
                    }
                    if (sEmail != null) {
                        WebElement email = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//a[contains(text(),'" + sEmail + "')]")));
                        if (email.getText().equals(sEmail)) {
                            log.info(" Customer Email ID shown correctly: " + email.getText());
                        } else {
                            log.info(" Customer Email ID Not shown correctly: " + email.getText());
                            bFlag4 = false;
                        }
                    }
                    if (sSocial != null) {
                        WebElement social = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[contains(text(),'" + sSocial + "')]")));
                        if (social.getText().equals(sSocial)) {
                            log.info(" Customer Social ID shown correctly: " + social.getText());
                        } else {
                            log.info(" Customer Social ID Not shown correctly: " + social.getText());
                            bFlag5 = false;
                        }
                    }
                    if (sAccount != null) {
                        WebElement account = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[contains(text(),'" + sAccount + "')]")));
                        if (account.getText().equals(sAccount)) {
                            log.info(" Customer Account ID shown correctly: " + account.getText());
                        } else {
                            log.info(" Customer Account ID Not shown correctly: " + account.getText());
                            bFlag6 = false;
                        }
                    }
                    if (sCrmid != null) {
                        WebElement moreinfo = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[contains(text(),'More information')]")));
                        moreinfo.click();
                        WebElement crmtab = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("div.layout div.layout-row.flex.canvas-container:nth-child(3) context-canvas.layout-column.flex.canvas-container-internal div.layout-row.flex:nth-child(2) div.context-tab.layout-row.flex:nth-child(1) div.layout-column.flex:nth-child(1) div.context-widget.layout-row.flex:nth-child(1) div.widget.widget--customer-details div.widget__content.ps.ps--active-y div.more-info-page.layout-row div.flex md-tabs-wrapper:nth-child(1) md-tabs-canvas:nth-child(2) md-pagination-wrapper:nth-child(1) md-tab-item.md-tab:nth-child(7) > span:nth-child(1)")));
                        crmtab.click();
                        WebElement crmid = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//md-tab-content[@class='_md md-active']//span[contains(text(),'" + sCrmid + "')]")));
                        if (crmid.getText().equals(sCrmid)) {
                            log.info(" Customer CRM ID shown correctly: " + crmid.getText());
                        } else {
                            log.info(" Customer CRM ID Not shown correctly: " + crmid.getText());
                            bFlag7 = false;
                        }
                        if (sCustom != null) {
                            if (sCrmid == null) {
                                WebElement moreinfo1 = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[contains(text(),'More information')]")));
                                moreinfo1.click();
                            }
                            WebElement customtab = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("div.layout div.layout-row.flex.canvas-container:nth-child(3) context-canvas.layout-column.flex.canvas-container-internal div.layout-row.flex:nth-child(2) div.context-tab.layout-row.flex:nth-child(1) div.layout-column.flex:nth-child(1) div.context-widget.layout-row.flex:nth-child(1) div.widget.widget--customer-details div.widget__content.ps.ps--active-y div.more-info-page.layout-row div.flex md-tabs-wrapper:nth-child(1) md-tabs-canvas:nth-child(2) md-pagination-wrapper:nth-child(1) md-tab-item.md-tab:nth-child(6) > span:nth-child(1)")));
                            customtab.click();
                            WebElement custfield = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//md-tab-content[@class='_md md-active']//span[contains(text(),'" + sCustom + "')]")));
                            if (custfield.getText().equals(sCustom)) {
                                log.info(" Customer Custom filed shown correctly: " + custfield.getText());
                            } else {
                                log.info(" Customer Custom filed Not shown correctly: " + custfield.getText());
                                bFlag8 = false;
                            }
                        }
                    }
                    if (bFlag1 && bFlag2 && bFlag3 && bFlag4 && bFlag5 && bFlag6 && bFlag7 && bFlag8) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } catch (Exception e) {
            log.info(e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * <h1>supervisor_observe_coach</h1> This method is for supervisor observe and coaching contact
     * used for WorkAssigment_AOC class
     *
     * @param agentfullname
     * @param agenthandle
     * @param ID
     * @return true/false
     */
    @Step("Supervisor observe and coaching contact")
    public boolean supervisor_observe_coach(String agentfullname, String agenthandle, String ID) {
        try {
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id='input_28']"))).click();
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id='input_28']"))).sendKeys(agentfullname);
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id='agent-table-select']/tbody/tr[@user-handle='" + agenthandle + "']"))).click();
            log.info("Supervisor clicking on observe");
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id='observe-interaction-" + ID + "']"))).click();
            log.info("Verifying observe on supervisor side");
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[@class='card__header-icon aoc-observe']")));
            log.info("Verifying observe on agent side");
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[@class='card__header-icon aoc-observe']")));

            log.info("Supervisor clicking on Coach");

		/*wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id='main-app-container']/div/cc-cards-area/div/div/div/cc-cards-collection/card-group/div/card-container/ng-switch/div/ng-include/div/card-actions/div/span[3]/button"))).click();
		String SupervisorMsg = driver.findElement(By.xpath("//*[@id='messages-container-449716b7-260c-40ed-a004-7ea1ed7fd1bd']/div[2]/div/md-card/span")).getText();
		*/

            //*[@id="messages-container-e825c19c-ee3e-4f72-ab16-2120d489c05a"]/div[2]/div/md-card/span
            //*[@id="messages-container-e825c19c-ee3e-4f72-ab16-2120d489c05a"]/div[2]/div/md-card
            //*[@id="messages-container-e825c19c-ee3e-4f72-ab16-2120d489c05a"]/div[2]/div
            return true;
        } catch (Exception e) {
            Assert.fail("Required web elements not found, Failed in either observe or coach");
            return false;
        }


    }


    /**
     * <h1>barge</h1> This method is for supervisor barge in contact
     * used for WorkAssigment_AOC class
     *
     * @param Customer
     * @param msg1
     * @param msg2
     */
    @Step("Supervisor barge in contact")
    public void barge(String Customer, String msg1, String msg2) {    //*[@id="main-app-container"]/div/cc-cards-area/div/div/div/cc-cards-collection/card-group/div/card-container/ng-switch/div/ng-include/div/card-actions/div/span[5]/button

        try {
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//button[@class='card-button md-icon-button aoc-barge-in js-barge-in md-button md-ink-ripple']"))).click();
            log.info("Supervisor barged-in");
            wait(3);
            log.info("--------------Supervisor Coaching Agent------------------");
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//md-tab-item[@class= 'md-tab md-active'] /span[text()='COACHING']"))).click();
            reply_workcard_analytics(msg1);
            wait(3);
            log.info("--------------Supervisor directly replying to Customer------------------");
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//md-tab-item[@class= 'md-tab']/span[text()='" + Customer + "']"))).click();
            reply_workcard_analytics(msg2);


        } catch (Exception e) {
            Assert.fail("Required web elements not found, Failed in either observe or coach");

        }


    }

    /**
     * <h1>Generic_Put_Agent_In_Not_Ready_State</h1> This method is for put agent in Not Ready state with code
     *
     * @param sReasonCode Not ready reason code
     * @return true/false
     */
    @Step("Put agent in Not Ready state with code")
    public boolean Generic_Put_Agent_In_Not_Ready_State(String sReasonCode) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            WebDriverWait wait1 = new WebDriverWait(driver, 10);
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@class='toolbar__button-dropdown md-button md-ink-ripple']"))).click();
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_go_not_ready']"))).click();
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@puppeteer-id='not-ready__reason-codes-search-input']"))).sendKeys(sReasonCode);
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_go_not_ready']"))).click();
            driver.findElement(By.xpath("//*[@id='ow_go_not_ready']")).sendKeys(Keys.ENTER);

            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();",
                    driver.findElement(By.xpath("//div[@class='key-value__value not-ready_code_size' and contains(text(),'"+sReasonCode+"')]")));
            //	wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@title='"+sReasonCode+"']"))).click();
            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='key-value']/div[@title='"+sReasonCode+"']"))).click();

            //div[@class='key-value']/div[@title="44444"]
            return true;

        } catch (Exception e) {
            log.info("Exception occured in setting not ready reason code ");
            return false;
        }
    }

    /**
     * <h1>reply_workcard_analytics</h1> This method is for reply workcard
     *
     * @param message is content of message
     */
    @Step("Reply workcard")
    public void reply_workcard_analytics(String message) {
        List<WebElement> element1 = driver.findElements(By.xpath("//textarea[@placeholder='Type a message...']"));
        for (WebElement reply : element1) {
            if (reply.isDisplayed()) {
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                }
                reply.click();
                reply.sendKeys(message);
                reply.sendKeys(Keys.ENTER);
                log.info("Message sent");
            }
        }
    }

    //added by pooja


    /**
     * <h1>VerifyifWorkcardExist</h1> This method is for verify workcard existing
     *
     * @param Offered map data need to check
     */
    @Step("Verify workcard existing")
    public void VerifyifWorkcardExist(Map<String, Integer> Offered) {
        try {
            log.info("Verifying if the workcard is present  ");
            WebDriverWait wait1 = new WebDriverWait(driver, 480);
            wait1.until(ExpectedConditions.elementToBeClickable(Acceptmessage));
            log.info("Setting alerting value");
            SetValues.setOffered(Offered);
        } catch (Exception e) {
            try {
                Put_Agent_In_Available_State_from_ACW();
                if (Acceptmessage == null)
                    log.info("WORKCARD NOT RECEIVED ON THE AGENT WORKSPACE CHECK FOR LOGS AND VIDEO");
                else
                    SetValues.setOffered(Offered);
            } catch (Exception e1) {
            }
        }

    }


    /**
     * <h1>accept_WorkCard</h1> This method is for accepting contact
     *
     * @param Channel channel type
     * @param Hashmap map data need to check
     * @return string of interaction ID
     */
    @Step("Accepting contact")
    public String accept_WorkCard(String Channel, Map<String, Integer> Hashmap) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());

        WebDriverWait wait1 = new WebDriverWait(driver, 480);
        wait1.until(ExpectedConditions.elementToBeClickable(Acceptmessage));


        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[@aria-label='Alerting " + Channel + " Interaction']"))).click();
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e1) {
        }
        try {
            log.info("------------------------Waiting for the workcard alert to display------------------------------------------------");
            if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), 480) != null)) {
                String ID = GETIDS(Channel);
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();",
                        driver.findElement(By.xpath("//button[@ng-click='accept()']")));
                SetValues.setAnswered(Hashmap);
                return ID;

            } else {
                log.info("call alert is not displayed");
                return null;
            }

        } catch (Exception e) {
            log.info("Exception occured in Accepting call function ");
            Assert.fail("Workcard either didnt appear on the workspace or there was an error in accepting the workcard referto the video");
            return null;
        }


    }

    /**
     * <h1>Hold_WorkCard</h1> This method is for holding call contact
     *
     * @param sHoldtime time for holding
     * @param Holds     map data1 need to check
     * @param LongHolds map data2 need to check
     */
    @Step("Holding call contact")
    public void Hold_WorkCard(int sHoldtime, Map<String, Integer> Holds, Map<String, Integer> LongHolds) {
        try {
            log.info("Verify Hold Operations is working ");
            WebDriverWait wait1 = new WebDriverWait(driver, 240);
            wait1.until(ExpectedConditions.elementToBeClickable(btnHoldOnConsultingAgent));
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//card-container[1]//button[@ng-click='hold()']"))).click();
            Thread.sleep(sHoldtime);
            SetValues.setHolds(Holds);

            if (sHoldtime >= (1000 * 120)) {
                SetValues.setLongHolds(LongHolds);
            } else {
                log.info("Hold time is less than Long hold threshold");
            }

        } catch (Exception e) {
            log.info("Exception occured in HOLD function ");
            Assert.fail("Workcard either didnt appear on the workspace or there was an error in HOLD function");

        }
    }

    /**
     * <h1>Hold_WorkCard</h1> This method is for holding call contact
     */
    @Step("Holding call contact")
    public void Hold_WorkCard() {
        if (EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            log.info("Verify Hold Operations is working ");
            WebDriverWait wait1 = new WebDriverWait(driver, 240);
            wait1.until(ExpectedConditions.elementToBeClickable(btnHoldOnConsultingAgent));
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//card-container[1]//button[@ng-click='hold()']"))).click();

        } catch (Exception e) {
            log.info("Exception occured in HOLD function ");
            Assert.fail("Workcard either didnt appear on the workspace or there was an error in HOLD function");

        }
    }

    /**
     * <h1>Unhold_WorkCard</h1> This method is for un-holding call contact
     */
    @Step("Un-holding call contact")
    public void Unhold_WorkCard() {
        try {
            log.info("Verify Unhold Operations is working ");
            WebDriverWait wait2 = new WebDriverWait(driver, 240);
            wait.until(ExpectedConditions.elementToBeClickable(btnUnholdOnConsultingAgent));
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//card-container[1]//button[@ng-click='unhold()']"))).click();
            //log.info("UNHOLD operation work" );


        } catch (Exception e) {
            log.info("Exception occured in Unhold Operation ");
            Assert.fail("Unhold operation failed");

        }
    }


    /**
     * <h1>Close_WorkCard</h1> This method is for closing workcard
     *
     * @param WorkCard  channel type
     * @param Completed map data1 need to check
     * @param ACW       map data2 need to check
     * @param ShortACW  map data3 need to check
     */
    @Step("Closing workcard")
    public void Close_WorkCard(String WorkCard, Map<String, Integer> Completed, Map<String, Integer> ACW, Map<String, Integer> ShortACW) {
        switch_between_SMS(WorkCard);
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
        }                            // TODO Auto-generated catch block
        WebElement End = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@ng-click='end()']")));
        End.click();
        SetValues.setCompleted(Completed);
        Wrap_call(ACW, ShortACW);
    }

    /**
     * <h1>Wrap_call</h1> This method is for wrapping call
     *
     * @param ACW      map data1 need to check
     * @param ShortACW map data2 need to check
     */
    @Step("Wrapping call")
    public void Wrap_call(Map<String, Integer> ACW, Map<String, Integer> ShortACW) {

        wait.until(ExpectedConditions.visibilityOf(btnWrapCall));
        btnWrapCall.click();
        log.info("Successfully wrap-up the call");
        SetValues.setACW(ACW);
        SetValues.setShortACW(ShortACW);
    }


    //added by shraddha

    /**
     * <h1>DeferEmail</h1> This method is used to defer email contact by required minutes
     *
     * @param currentdateandtime
     * @param Deferbymins        Defer the contact by minutes passed to the method in the form of this variable
     * @throws InterruptedException
     * @author mane16
     */
    @Step("Defer email contact by required minutes")
    public void DeferEmail(String currentdateandtime, String Deferbymins) throws InterruptedException {
        LocalTime time = LocalTime.now();
        LocalTime deferTime = time.truncatedTo(ChronoUnit.HOURS).plusMinutes(time.getMinute() + Integer.parseInt(Deferbymins));
        String hour = deferTime.toString().split(":")[0];
        String min = deferTime.toString().split(":")[1];
        log.info("Hour defer: " + hour);
        log.info("Minute defer: " + min);

        wait.until(ExpectedConditions.elementToBeClickable(Defer)).click();
        wait.until(ExpectedConditions.elementToBeClickable(CustomDefer)).click();

        Enterhour.sendKeys(Keys.chord(Keys.CONTROL, "a"));
        Enterhour.sendKeys(hour);
        Thread.sleep(3000);
        Enterminutes.sendKeys(Keys.chord(Keys.CONTROL, "a"));
        Enterminutes.sendKeys(min);
        Thread.sleep(3000);

        wait.until(ExpectedConditions.elementToBeClickable(ClickDefer)).click();
        log.info("Deferred Email by " + Deferbymins + " minutes");
        log.info("Wait for deferred email contact to come to the agent");
        int msec = Integer.parseInt(Deferbymins) * 60 * 1000;
        Thread.sleep(msec);
    }

    /**
     * <h1>forwardEmail</h1> This method forwards email to required Email address
     *
     * @param forwardToEmailId Email address of the concerned party to which the email needs to be forwarded
     * @throws ElementClickInterceptedException
     * @author mane16
     */
    @Step("Forwards email to required Email address")
    public void forwardEmail(String forwardToEmailId) {
        wait.until(ExpectedConditions.elementToBeClickable(ForwardEmail)).click();
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@class='widget__header aoc-email']"))).click();
        Actions action = new Actions(driver);
        action.sendKeys(Keys.TAB).build().perform();
        action.sendKeys("sam@gmail.com").build().perform();
        action.sendKeys(Keys.ENTER).build().perform();
        try {
            wait.until(ExpectedConditions.elementToBeClickable(Send)).click();
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            wait.until(ExpectedConditions.elementToBeClickable(Send)).click();
            e.printStackTrace();
        }
    }

    /**
     * <h1>DeferEmail</h1> This method is used to defer email contact by required minutes
     *
     * @param currentdateandtime Current date time
     * @param Deferbymins        Defer by minutes
     * @param isManualRetrieve   Will supervisor manual retrieve this defer or not
     * @throws InterruptedException
     */
    @Step("Defer email contact by required minutes")
    public String DeferEmail(String currentdateandtime, String Deferbymins, Boolean isManualRetrieve) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");
            String date1 = simpleDateFormat.format(new Date());
            String date = date1 + " ";
            LocalTime time = LocalTime.now();
            LocalTime Deferbyhour = time.truncatedTo(ChronoUnit.HOURS).plusMinutes(time.getHour());
            LocalTime Deferbymin = time.truncatedTo(ChronoUnit.HOURS).plusMinutes(time.getMinute() + Integer.parseInt(Deferbymins));
            String hour = Deferbyhour.toString();
            String min = Deferbymin.toString();
            log.info("min value: " + min);

            wait.until(ExpectedConditions.elementToBeClickable(Defer)).click();
            wait.until(ExpectedConditions.elementToBeClickable(CustomDefer)).click();

            Actions actions = new Actions(driver);

            WebElement Enterhour = driver.findElement(By.xpath("//*[@placeholder='HH']"));
            actions.moveToElement(Enterhour).build().perform();
            Enterhour.clear();
            Enterhour.sendKeys(min.split(":")[0]);
            log.info("set hour value: " + min.split(":")[0]);

            WebElement Enterminutes = driver.findElement(By.xpath("//*[@placeholder='MM']"));
            actions.moveToElement(Enterminutes).build().perform();
            Enterminutes.clear();
            Enterminutes.sendKeys(min.split(":")[1]);
            log.info("set min value: " + min.split(":")[1]);

            wait.until(ExpectedConditions.elementToBeClickable(ClickDefer));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0]. click();", ClickDefer);
            String DeferTime = getCurrentTimeByFormat("HH:mm:ss");
            log.info("Deferred Email by " + Deferbymins + " minutes");
            if (isManualRetrieve == false) {
                log.info("Wait for deferred email contact to come to the agent");
//                int msec1 = Integer.parseInt(Deferbymins) * 60 * 1000;
                int msec = ((Integer.parseInt(Deferbymins)-1) * 60 + LocalTime.now().getSecond()) * 1000;
//                System.out.println("sec1: "+msec1/1000);
//                System.out.println("sec: "+msec/1000);
                Thread.sleep(msec);

            } else {
                log.info("Retrieving manually the deferred email contact by agent");
                Thread.sleep(10000);
            }
            return DeferTime;
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return "";
    }

    /**
     * <h1>RetrieveEmail</h1> This method is used to retrieve email by WorkrequestID
     *
     * @param WorkRequestID
     * @return CCClientLoginPage as class object
     */
    @Step("Retrieve email by WorkrequestID")
    public CCClientLoginPage RetrieveEmail(String WorkRequestID) {
        try {
            wait.until(ExpectedConditions.elementToBeClickable(DeferEmailList)).click();
            Thread.sleep(5000);
            WebElement retrievButton = driver.findElement(By.xpath("//button[@puppeteer-id='retrieve-btn-" + WorkRequestID + "']"));
            if (!retrievButton.isDisplayed()) {
                retrievEmail.click();
            } else {
                wait.until(ExpectedConditions.elementToBeClickable(retrievButton)).click();
            }
            log.info("Retrieved the deferred email contact by agent");
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return this;
    }

    /**
     * <h1>RetrieveEmail</h1> This method is used to retrieve email
     *
     * @return CCClientLoginPage as class object
     */
    @Step("Retrieve email")
    public CCClientLoginPage RetrieveEmail() {
        wait.until(ExpectedConditions.elementToBeClickable(DeferEmailList)).click();
        wait.until(ExpectedConditions.elementToBeClickable(retrievEmail)).click();
        log.info("Retrieved the deferred email contact by agent");
        return this;
    }

    /**
     * <h1>checkAcceptedWorkCard</h1> This method is used to checking accepted workcard
     *
     * @return true/false , true if there is accepted card, else return false
     */
    @Step("Checking accepted workcard")
    public boolean checkAcceptedWorkCard() {
        boolean b = true;
        try {

            log.info(EndButton.isDisplayed());
            if (EndButton.isDisplayed()) {
                log.info("The activated work card is displaying");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.info("No extra Active work card found");
            b = false;
        }

        return b;
    }

    /**
     * <h1>wait</h1> This method is used to waiting
     *
     * @param seconds second time need to check
     */
    @Step("Wait n seconds")
    public void wait(int seconds) {
        objUtil.wait(seconds);
    }

    /**
     * <h1>endCallByInteractionId</h1> This method is used to end contact by Interaction Id
     *
     * @param strInteractionId
     * @return
     */
    @Step("End contact by Interaction Id")
    public WebElement endCallByInteractionId(String strInteractionId) {
        driver.findElement(By.id("ow_Card_End_btn_" + strInteractionId)).click();
        return driver.findElement(By.id("ow_Card_End_btn_" + strInteractionId));
    }

    /**
     * <h1>extendACWByInteractionId</h1> This method is used to extend ACW by Interaction Id
     *
     * @param strInteractionId interaction ID of channel
     * @return WebElement element is corresponding to interaction ID
     */
    @Step("Extend ACW by Interaction Id")
    public WebElement extendACWByInteractionId(String strInteractionId) {
        return driver.findElement(By.xpath("//button[@puppeteer-id='extend-acw-interaction--" + strInteractionId + "']"));
    }

    /**
     * <h1>completeACWByInteractionId</h1> This method is used to complete ACW by Interaction Id
     *
     * @param strInteractionId interaction ID of channel
     * @return WebElement element is corresponding to interaction ID
     */
    @Step("Complete ACW by Interaction Id")
    public WebElement completeACWByInteractionId(String strInteractionId) {
        driver.findElement(By.xpath("//button[@puppeteer-id='complete-acw-interaction--" + strInteractionId + "']")).click();
        return driver.findElement(By.xpath("//button[@puppeteer-id='complete-acw-interaction--" + strInteractionId + "']"));
    }

    /**
     * <h1>completeACWByInteractionId</h1> This method is used to complete ACW by Interaction Id
     *
     * @param strInteractionId interaction ID of channel
     * @return WebElement element is corresponding to interaction ID
     */
    @Step("Complete ACW by Interaction Id")
    public void completeACWById(String strInteractionId) {
        wait(3);
        try {
            driver.findElement(By.xpath("//button[@puppeteer-id='complete-acw-interaction--" + strInteractionId + "']")).click();
        } catch (Exception e) {
            System.out.println("The Complelte ACW button does not exist");
        }

    }

    /**
     * <h1>scrollPageDown</h1> This method is used to scroll page down
     */
    @Step("Scroll page down")
    public void scrollPageDown() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", lblAgentState);
    }

    /**
     * <h1>scrollPageUp</h1> This method is used to scroll page up
     */
    @Step("Scroll page up")
    public void scrollPageUp() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", btnmenu);
    }

    /**
     * <h1>sendEmailAndAccept</h1> This method is used to send email from customer then agent accept it
     *
     * @param toEmailID       To Email Address
     * @param fromEmailID     From Email Address
     * @param emailPass       Password of Customer email
     * @param emailSubject    Email Subject
     * @param emailBodyText   Email Body
     * @param emailExchangeIP IP of Exchange server
     * @return string of interaction ID
     */
    @Step("Send email from customer then agent accept it")
    public String sendEmailAndAccept(String toEmailID, String fromEmailID, String emailPass, String emailSubject, String emailBodyText, String emailExchangeIP) {
        emailChannelFunctions.cleanUp_Email_Inobox(toEmailID, emailPass, emailExchangeIP);
        emailChannelFunctions.send_Email(toEmailID, fromEmailID, emailExchangeIP, emailSubject, emailBodyText);
        String iID = "";
        VerifyifWorkcardExist();
        iID = accept_WorkCard("Email");
        return iID;
    }

    /**
     * <h1>ConsultToService</h1> This method is used to consult to service
     *
     * @param serviceName      Service name for consult
     * @param strInteractionId Interaction Id of workcard
     */
    @Step("Consult to service")
    public void ConsultToService(String serviceName, String strInteractionId) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            Actions actions = new Actions(driver);
            log.info(serviceName);
            Thread.sleep(10000);
            log.info("Clicking Consult button");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_Consult_" + strInteractionId + "_btn']"))).click();
            Thread.sleep(10000);
            log.info("Clicking Service label");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@puppeteer-id='consult-menu__services-Consult_" + strInteractionId + "']"))).click();
            WebElement consultLabel = driver.findElement(By.xpath("//*[@puppeteer-id='consult-menu__services-Consult_" + strInteractionId + "']"));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", consultLabel);
            Thread.sleep(2000);
            log.info("Scroll to service name");
            WebElement serName = driver.findElement(By.xpath("//div[@class='_md md-open-menu-container md-whiteframe-z2 md-active md-clickable']//button[contains(text(), '" + serviceName + "')]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", serName);
            Thread.sleep(2000);
            log.info("Click on service name");
            executor.executeScript("arguments[0].click();", serName);
        } catch (Exception e) {
            log.error("Error in consulting to a service; Either service \"" + serviceName + "\" not found or required element wasn't clickable");
            Assert.fail("Error in consulting to a service; Either service \"" + serviceName + "\" not found or required element wasn't clickable");
        }
    }

    /**
     * <h1>CheckWrapCall</h1> This method is used to checking wrap call
     *
     * @return true/false , true if ACW displays, else return false
     */
    @Step("Checking wrap call")
    public Boolean CheckWrapCall() {
        try {
            WebElement wrapBtn = driver.findElement(By.xpath("//button[@ng-click='completeACW()']"));
            if (wrapBtn.isDisplayed()) {
                return Boolean.FALSE;
            }
        } catch (Exception e) {
            log.info("Error in Wrapping call");
        }
        return Boolean.TRUE;
    }

    //070121

    /**
     * <h1>Check_For_Call_Alert_And_AcceptCall_By_Channel</h1> This method is used to checking contact is alerting on Workspace, then accept it
     *
     * @param secs     time for waiting
     * @param channels list of channel type
     * @return string of channel type
     */
    @Step("Checking contact is alerting on Workspace, then accept it")
    public String Check_For_Call_Alert_And_AcceptCall_By_Channel(int secs, List<String> channels) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            switch (checkStatusOfAllAgentChannels()) {
                case 1://not ready
                    Put_Agent_In_Available_State_from_ACW();
                    break;
                case 2://logout
                    Put_Agent_In_Ready_State();
                    break;
            }
            if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), secs) != null)) {
                log.info("call alert displayed");
                for (int i = 0; i < channels.size(); i++) {
                    List<WebElement> eChannels = driver.findElements(By.xpath("//span[@aria-label='Alerting " + channels.get(i) + " Interaction']"));
                    if (eChannels.size() > 0) {
                        JavascriptExecutor executor = (JavascriptExecutor) driver;
                        executor.executeScript("arguments[0].click();",
                                driver.findElement(By.xpath("//button[@ng-click='accept()']")));
                        log.info("call is answered successfully");
                        return channels.get(i);
                    }
                }

            } else {
                RefreshWS();
                if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), secs) != null)) {
                    log.info("call alert displayed");
                    for (int i = 0; i < channels.size(); i++) {
                        List<WebElement> eChannels = driver.findElements(By.xpath("//span[@aria-label='Alerting " + channels.get(i) + " Interaction']"));
                        if (eChannels.size() > 0) {
                            JavascriptExecutor executor = (JavascriptExecutor) driver;
                            executor.executeScript("arguments[0].click();",
                                    driver.findElement(By.xpath("//button[@ng-click='accept()']")));
                            log.info("call is answered successfully");
                            return channels.get(i);
                        }
                    }
                } else {
                    log.info("call alert is not displayed");
                }
            }

        } catch (Exception e) {
            log.info("Exception occured in checking alert call function ");
        }
        return null;
    }

    /**
     * <h1>Check_For_Call_Alert_By_Channel</h1> This method is used to checking contact is alerting on Workspace
     *
     * @param secs     time for waiting
     * @param channels list of channel
     * @return channel type
     */
    @Step("Checking contact is alerting on Workspace")
    public String Check_For_Call_Alert_By_Channel(int secs, List<String> channels) {
        switch (checkStatusOfAllAgentChannels()) {
            case 1://not ready
                Put_Agent_In_Available_State_from_ACW();
                break;
            case 2://logout
                Put_Agent_In_Ready_State();
                break;
        }
        try {
            if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), secs) != null)) {
                log.info("call alert displayed");
                for (int i = 0; i < channels.size(); i++) {
                    List<WebElement> eChannels = driver.findElements(By.xpath("//span[@aria-label='Alerting " + channels.get(i) + " Interaction']"));
                    if (eChannels.size() > 0) {
                        return channels.get(i);
                    }
                }
            } else {
                RefreshWS();
                if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), secs) != null)) {
                    log.info("call alert displayed");
                    for (int i = 0; i < channels.size(); i++) {
                        List<WebElement> eChannels = driver.findElements(By.xpath("//span[@aria-label='Alerting " + channels.get(i) + " Interaction']"));
                        if (eChannels.size() > 0) {
                            return channels.get(i);
                        }
                    }
                } else {
                    log.info("call aleart is not displayed");
                }
            }

        } catch (Exception e) {
            log.info("Exception occured in Accepting call function ");
            return null;
        }
        return null;
    }

    /**
     * <h1>setWorkCode</h1> This method is used to setting work code
     *
     * @param workCode work code
     * @param ID       ID of work code
     */
    @Step("Setting work code")
    public boolean setWorkCode(String workCode, String ID) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            log.info("Setting the work code code to " + workCode);
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
            }
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_More_btn_" + ID + "']"))).click();
            log.info("Clicking Work codes label");
//            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[text()='Work Codes']"))).click();
            WebElement workCodeLabel = driver.findElement(By.xpath("//md-menu-item[@id='ow_work_code_" + ID + "']/md-menu/button/span[text()='Work Codes']"));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", workCodeLabel);
            Thread.sleep(2000);
            log.info("Scroll to work code  name");
            List<WebElement> wcNames = driver.findElements(By.xpath("//button[contains(@class,'ow_work_code_reason_code_" + ID + "')]"));
            if (wcNames.size() > 0) {
                for (int i = 0; i < wcNames.size(); i++) {
                    wait.until(ExpectedConditions.visibilityOf(wcNames.get(i)));
                    if (wcNames.get(i).getText().equals(workCode)) {
                        List<WebElement> wcName = driver.findElements(By.xpath("//button[text()='" + workCode + "']"));
                        WebElement wc = wcName.get(wcName.size() - 1);
                        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", wc);
                        log.info("Click on work code name");
                        executor.executeScript("arguments[0].click();", wc);
                        break;
                    }
                }
            }
            wait(2);
            return true;

        } catch (Exception e) {
            log.info("Exception occured in setting work code function :"+ e);
            return false;
        }
    }


    /**
     * <h1>Make_Agent_Available_By_Time</h1> This method is used to making agent available, and store timestamp
     *
     * @param ufullname  Agent fullname
     * @param formatTime Format datetime
     * @return string of timestamp , the timestamp when agent is ready to work
     */
    @Step("Making agent available, and store timestamp")
    public String Make_Agent_Available_By_Time(String ufullname, String formatTime) {
        if (EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String AgentState = null;
        String endDate = null;
        log.info("------------------------Setting Agent " + ufullname + " to AVAILABLE STATE------------------------------------------------");
        try {
            Thread.sleep(15000);
            AgentState = Get_Agent_State();

            if (AgentState.equalsIgnoreCase("Logged_Out")) {
                if ((Put_Agent_In_Ready_State()) != true) {
                    return null;
                }
                log.info(ufullname + " Is now in AVAILABLE state");
                endDate = getCurrentTimeByFormat(formatTime);
                log.info("Agent is logged at time " + endDate);
                return endDate;
            }

            if (AgentState.equalsIgnoreCase("Connected")) {
                if ((Put_Agent_In_Ready_State()) != true) {
                    return null;
                }
                endDate = getCurrentTimeByFormat(formatTime);
                log.info("Agent is logged at time " + endDate);
                return endDate;
            }

            if (AgentState.equalsIgnoreCase("Not_Ready")) {
                if ((Put_Agent_In_Available_State_from_ACW()) != true) {
                    return null;
                }
                endDate = getCurrentTimeByFormat(formatTime);
                log.info("Agent is logged at time " + endDate);
                return endDate;
            }

            if (AgentState.equalsIgnoreCase("Ready")) {
                log.info("-------------------------Agent was already in available state-----------------------------------");
                boolean b = true;
                while (b != false) {
                    b = checkingForAlreadyPresentWorkCard();
                }
                Finish_Work_For_Agent();

                try {
                    btnWorkStartButton.click();
                } catch (Exception e) {
                    btnWorkStartButton2.click();
                }

                endDate = getCurrentTimeByFormat(formatTime);
                log.info("Agent is logged at time " + endDate);
                return endDate;
            }
            if (AgentState.equalsIgnoreCase("Logout_Pending")) {
                Finish_Work_For_Agent();
                if ((Put_Agent_In_Ready_State()) != true) {
                    return null;
                }
                log.info("Agent is now in ready state");
                endDate = getCurrentTimeByFormat(formatTime);
                log.info("Agent is logged at time " + endDate);
                return endDate;

            }
            if (AgentState.equalsIgnoreCase("Login_Pending")) {
                log.error("Agent state is Login_Pending, please check the configuration of Agent");
                return null;
            }
            if (AgentState.equalsIgnoreCase("null")) {
                log.info("Agent state is null");
                return null;
            }

            Thread.sleep(9000);
        } catch (Exception e) {
            log.info("Exception occured in Making the  Agent to  Available State", e);
            Assert.fail("Exception occured in Making the  Agent to  Available State");
            return null;
        }
        log.info("------------------------Agent made to Available state successfully------------------------");
        return null;

    }//Make_Agent_Available

    /**
     * <h1>Finish_Work_For_Agent_By_Time</h1> This method is used to finish work on agent, and store timestamp
     *
     * @param formatTime Format datetime
     * @return string of timestamp , the timestamp when agent is finished work
     */
    @Step("Finish work on agent, and store timestamp")
    public String Finish_Work_For_Agent_By_Time(String formatTime) {
        log.info("Clicking on finish work");
        try {
            Thread.sleep(4000);
        } catch (InterruptedException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }

        wait.until(ExpectedConditions.elementToBeClickable(btnmenu)).click();
        wait.until(ExpectedConditions.elementToBeClickable(btnFinishWork)).click();
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        String endDate = getCurrentTimeByFormat(formatTime);
        log.info("Contact is finished at time " + endDate);
        return endDate;

    }

    /**
     * <h1>Forward_Email</h1> This method is used to forwarding email
     *
     * @param forwardToEmailId Email Address for forwarding
     * @param isValid          Send email or not
     */
    @Step("Forwarding email")
    public void Forward_Email(String forwardToEmailId, boolean isValid) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        Actions action = new Actions(driver);
        wait.until(ExpectedConditions.elementToBeClickable(ForwardEmail)).click();
        wait(1);
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@class='widget__header aoc-email']"))).click();
        wait(1);
        action.sendKeys(Keys.TAB).build().perform();
        wait(1);
        action.sendKeys(forwardToEmailId).build().perform();
        wait(5);
        action.sendKeys(Keys.TAB).build().perform();
        wait(1);
        try {
            List<WebElement> sendButtons = driver.findElements(By.xpath("//button[@ng-click='sendEmail()']"));
            for (WebElement sendButton : sendButtons) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", sendButton);
                if (isValid == true) {
                    if (sendButton.isEnabled()) {
                        log.info("The send button is enabling.");
                        sendButton.click();
                        log.info("Forwarding email is successfully.");
                    } else {
                        log.info("FAILED: The send button is still disabling although email is valid.");
                    }
                } else {
                    if (sendButton.isEnabled()) {
                        log.info("FAILED: The send button is still enabling although email is invalid.");
                    } else {
                        log.info("The send button is disabled when email is invalid.");
                    }
                }
            }

            if (driver.findElements(By.xpath("//button[.='OK']")).size() == 1) {
                driver.findElements(By.xpath("//button[.='OK']")).get(0).click();
            }
            Thread.sleep(5000);

        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    /**
     * <h1>Cancel_Email</h1> This method is used to cancelling email
     */
    @Step("Cancelling email")
    public void Cancel_Email() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            List<WebElement> cancelButtons = driver.findElements(By.xpath("//button[@puppeteer-id='cancel-button--email-widget']"));
            for (WebElement cancelButton : cancelButtons) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", cancelButton);

                if (cancelButton.isDisplayed()) {
                    cancelButton.click();
                }
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.info("No extra Active work card found");
        }

    }

    /**
     * * <h1>Send_Adhoc_Email</h1> This method is used to compose then send adhoc email
     *
     * @param sEmailKeyWord    is key work need to route to agent
     * @param fromEmailAddress is address of email from customer/agent
     * @param toEmailAddress   is address of email to customer/agent
     */
    @Step("Compose then send adhoc email")
    public void Send_Adhoc_Email(String sEmailKeyWord, String fromEmailAddress, String toEmailAddress) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            wait(5);
            WebElement adhocBtn = driver.findElement(By.xpath("//button[@id='ow_create_email']"));
            JavascriptExecutor js = (JavascriptExecutor) driver;
            js.executeScript("arguments[0].click();", adhocBtn);

//            if (adhocBtn.isDisplayed()) {
//                log.info("Clicking for Adhoc button.");
//                adhocBtn.click();
//                this.wait(5);
//            } else {
//                log.info("Cannot find to Adhoc button.");
//            }

            //input From field

            WebElement fromFieldExpIcon = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_From']//span[@class='md-select-icon']"));
            if (fromFieldExpIcon.isDisplayed()) {
                log.info("Inserting for From address.");
                fromFieldExpIcon.click();
                this.wait(2);
                WebElement fromField = driver.findElement(By.xpath("//div[@class='md-select-menu-container md-active md-clickable']//div[text()='" + fromEmailAddress + "']"));
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", fromField);
                if (fromField.isDisplayed()) {
                    fromField.click();
                    this.wait(2);
                } else {
                    log.info("Cannot find to FROM field.");
                }
            } else {
                log.info("Cannot find to FROM field.");
            }

            //input To field
            WebElement toField = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_To']//input"));
            if (toField.isDisplayed()) {
                log.info("Inserting for TO address.");
                js.executeScript("arguments[0].click();", toField);
//                toField.click();
                toField.sendKeys(toEmailAddress);
            } else {
                log.info("Cannot find to TO field.");
            }

            //input Subject field
            WebElement subjField = driver.findElement(By.xpath("//input[@id='ow_Email_Field_Subject']"));
            if (subjField.isDisplayed()) {
                log.info("Inserting for Subject address.");
                subjField.click();
                this.wait(2);
                subjField.sendKeys(sEmailKeyWord);
            } else {
                log.info("Cannot find to Subject field.");
            }

            //input Body content
            List<WebElement> SendMessageBody = driver.findElements(By.xpath("(//div[@puppeteer-id='email-widget--textarea'])[3]"));
            for (WebElement sendmsg : SendMessageBody) {
                if (sendmsg.isDisplayed()) {
                    log.info("Inserting message body: " + sendmsg);
                    sendmsg.click();
                    sendmsg.sendKeys(sEmailKeyWord);
                }
            }

            wait(1);

            List<WebElement> SendButton = driver.findElements(By.xpath("//span[contains(text(),'Send')]"));
            for (WebElement sendButton : SendButton) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", sendButton);

                if (sendButton.isDisplayed()) {
                    sendButton.click();
                    log.info("Adhoc email is sent successfully.");
                }
            }
            if (driver.findElements(By.xpath("//button[.='OK']")).size() == 1) {
                driver.findElements(By.xpath("//button[.='OK']")).get(0).click();
            }

        } catch (Exception e) {
            // To send exception to log file
            log.info("Addhoc email operation is Failed:", e);
            e.printStackTrace();
        }

    }

    @Step("Compose adhoc email without send")
    public void Compose_Adhoc_Email_Without_Send(String sEmailKeyWord, String fromEmailAddress, String toEmailAddress) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {

            WebElement adhocBtn = driver.findElement(By.xpath("//button[@puppeteer-id='create--email']"));
            if (adhocBtn.isDisplayed()) {
                log.info("Clicking for Adhoc button.");
//                adhocBtn.click();
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();", adhocBtn);
                this.wait(2);
            } else {
                log.info("Cannot find to Adhoc button.");
            }
            //input From field
            wait(5);

            WebElement fromFieldExpIcon = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_From']//span[@class='md-select-icon']"));
            if (fromFieldExpIcon.isDisplayed()) {
                log.info("Inserting for From address.");
                fromFieldExpIcon.click();
                this.wait(5);
                WebElement fromField = driver.findElement(By.xpath("//div[@class='md-select-menu-container md-active md-clickable']//div[text()='" + fromEmailAddress + "']"));
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", fromField);
                if (fromField.isDisplayed()) {
                    fromField.click();
                    this.wait(2);
                } else {
                    log.info("Cannot find to FROM field.");
                }
            } else {
                log.info("Cannot find to FROM field.");
            }

            //input To field
            WebElement toField = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_To']//input"));
            if (toField.isDisplayed()) {
                log.info("Inserting for TO address.");
                toField.click();
                toField.sendKeys(toEmailAddress);
            } else {
                log.info("Cannot find to TO field.");
            }

            //input Subject field
            WebElement subjField = driver.findElement(By.xpath("//input[@id='ow_Email_Field_Subject']"));
            if (subjField.isDisplayed()) {
                log.info("Inserting for Subject address.");
                subjField.click();
                this.wait(2);
                subjField.sendKeys(sEmailKeyWord);
            } else {
                log.info("Cannot find to Subject field.");
            }

            //input Body content
            List<WebElement> SendMessageBody = driver.findElements(By.xpath("(//div[@puppeteer-id='email-widget--textarea'])"));
            for (WebElement sendmsg : SendMessageBody) {
                try {
                    if (sendmsg.isDisplayed()) {
                        log.info("Inserting message body: " + sendmsg);
                        sendmsg.click();
                        sendmsg.sendKeys(sEmailKeyWord);
                    }
                } catch (Exception e) {
                }
            }

            wait(1);
        } catch (Exception e) {
            // To send exception to log file
            log.info("Addhoc email operation is Failed:", e);
            e.printStackTrace();
        }

    }

    @Step("Click on send adhoc email")
    public void Click_Send_Adhoc_Email() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            List<WebElement> SendButton = driver.findElements(By.xpath("//span[contains(text(),'Send')]"));
            for (WebElement sendButton : SendButton) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", sendButton);

                if (sendButton.isDisplayed()) {
                    sendButton.click();
                    log.info("Adhoc email is sent successfully.");
                }
            }
            if (driver.findElements(By.xpath("//button[.='OK']")).size() == 1) {
                driver.findElements(By.xpath("//button[.='OK']")).get(0).click();
            }

        } catch (Exception e) {
            // To send exception to log file
            log.info("Addhoc email operation is Failed:", e);
            e.printStackTrace();
        }

    }

    /**
     * <h1>Reply_Email_From_Adhoc_Email</h1> This method is used to reply email from adhoc email
     *
     * @param sEmailBodyReply is contest of email body
     * @param toEmailAddress  is email address need to send to
     */
    @Step("Reply email from adhoc email")
    public void Reply_Email_From_Adhoc_Email(String sEmailBodyReply, String toEmailAddress) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            //switch_between_SMS(fromEmailAddress);
            List<WebElement> Reply = driver.findElements(By.xpath("//span[text()='Reply']"));
            for (WebElement reply : Reply) {
                log.info("Inside reply for loop");
                if (reply.isDisplayed()) {
                    log.info("This Workcard  is displayed: " + reply);
                    reply.click();

                }
            }

            //Inert TO address
            List<WebElement> removeToEmail = driver.findElements(By.xpath("//button[@class='md-chip-remove']"));
            for (WebElement delIcon : removeToEmail) {
                log.info("Inserting TO address " + toEmailAddress);
                if (delIcon.isDisplayed()) {
                    log.info("This delete icon is displayed: " + delIcon);
                    delIcon.click();
                    this.wait(2);
                    List<WebElement> eToField = driver.findElements(By.xpath("//input[@id='ow_Email_Field_To']"));
                    if (eToField.size() > 0) {
                        eToField.get(0).sendKeys(toEmailAddress);
                        log.info("Inserted TO address " + toEmailAddress);
                    }

                } else {
                    log.info("Cannot find to delete icon on TO address.");
                }
            }


            List<WebElement> SendMessageBody = driver.findElements(By.xpath("(//div[@puppeteer-id='email-widget--textarea'])[3]"));
            for (WebElement sendmsg : SendMessageBody) {
                if (sendmsg.isDisplayed()) {
                    log.info("This Workcard  is displayed: " + sendmsg);
                    sendmsg.sendKeys(sEmailBodyReply);
                    sendmsg.sendKeys(Keys.ENTER);

                }
            }

            List<WebElement> SendButton = driver.findElements(By.xpath("//span[contains(text(),'Send')]"));
            for (WebElement sendButton : SendButton) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", sendButton);

                if (sendButton.isDisplayed()) {
                    sendButton.click();

                }
            }

            //span[contains(text(),'Send')]
            if (driver.findElements(By.xpath("//button[.='OK']")).size() == 1) {
                driver.findElements(By.xpath("//button[.='OK']")).get(0).click();
            }


        } catch (Exception e) {
            // To send exception to log file
            log.info("Reply to email Failed:", e);
        }

    }// reply_Email_WorkCard


    //Added by Vinay

    /**
     * <h1>Click_Async</h1> This method is used to clicking Async
     */
    @Step("Clicking Async widget")
    public void Click_Async() {
        // WebElement async = driver.findElement(By.xpath("//span[text()='Messaging']"));
        WebElement async = driver.findElement(By.xpath("//button[@aria-label='Messaging']"));
        async.click();

    }

    //Added by Vinay

    /**
     * <h1>ReturnToNewLogin</h1> This method is used to back to login page
     */
    @Step("Back to login page")
    public void ReturnToNewLogin() {
    	/* JavascriptExecutor executor = (JavascriptExecutor) driver;
         executor.executeScript("arguments[0].click();",
                                         driver.findElement(By.className("exit-page-link")));*/
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {

        }
        // WebElement click=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//a[@puppeteer-id='exit-redirect--link']")));
        List<WebElement> click = driver.findElements(By.xpath("//a[@puppeteer-id='exit-redirect--link']"));
        if (click.size() > 0) {
            click.get(0).click();
        }

    }

    /**
     * <h1>ReturnToNewLogin</h1> This method is used to defer email with reason code
     *
     * @param resonCodeName    Defer code name
     * @param Deferbymins      Defer by minutes
     * @param isManualRetrieve Will supervisor manual retrieve this defer or not
     * @throws InterruptedException
     */
    @Step("Defer email with reason code")
    public void DeferEmailByReasonCode(String resonCodeName, String Deferbymins, Boolean isManualRetrieve) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            Actions actions = new Actions(driver);
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");
            String date1 = simpleDateFormat.format(new Date());
            String date = date1 + " ";
            LocalTime time = LocalTime.now();
            LocalTime Deferbyhour = time.truncatedTo(ChronoUnit.HOURS).plusMinutes(time.getHour());
            LocalTime Deferbymin = time.truncatedTo(ChronoUnit.HOURS).plusMinutes(time.getMinute() + Integer.parseInt(Deferbymins));
            String hour = Deferbyhour.toString();
            String min = Deferbymin.toString();
            log.info("min value: " + min);
            log.info("Select Defer option.");
            wait.until(ExpectedConditions.elementToBeClickable(Defer)).click();
            wait(3);
            log.info("Select for reason defer.");//"(//input[@ng-model='query'])[4]"
            WebElement eSearchRC = driver.findElement(By.xpath("//div[@id='defer_left-panel']//md-input-container//input[@ng-model='query']"));//input[@class='ng-pristine ng-valid md-input ng-empty ng-touched']
            eSearchRC.click();
            eSearchRC.sendKeys(resonCodeName);

            WebElement sResultSearch = driver.findElement(By.xpath("//md-radio-button[@aria-label='" + resonCodeName + "']"));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", sResultSearch);
            Thread.sleep(2000);
            sResultSearch.click();
            Thread.sleep(2000);

            log.info("Select for custom defer time.");
            wait.until(ExpectedConditions.elementToBeClickable(CustomDefer)).click();

            WebElement Enterhour = driver.findElement(By.xpath("//*[@placeholder='HH']"));
            actions.moveToElement(Enterhour).build().perform();
            Enterhour.clear();
            Enterhour.sendKeys(min.split(":")[0]);
            log.info("set hour value: " + min.split(":")[0]);

            WebElement Enterminutes = driver.findElement(By.xpath("//*[@placeholder='MM']"));
            actions.moveToElement(Enterminutes).build().perform();
            Enterminutes.clear();
            Enterminutes.sendKeys(min.split(":")[1]);
            log.info("set min value: " + min.split(":")[1]);

            /**
             * dont use selenium click here, it wont work..
             * only js click is working fine as Defer button have visibility issues.
             */
            //wait.until(ExpectedConditions.elementToBeClickable(ClickDefer)).click();
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", ClickDefer);
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", ClickDefer);

            log.info("Deferred Email by " + Deferbymins + " minutes");
            if (isManualRetrieve == false) {
                log.info("Wait for deferred email contact to come to the agent");
                int msec = Integer.parseInt(Deferbymins) * 60 * 1000;
                Thread.sleep(msec);
            } else {
                log.info("Retrieving manually the deferred email contact by agent");
                Thread.sleep(10000);
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Step("Defer email with reason code")
    public void DeferEmailByReasonCode(String resonCodeName, String Deferbymins, Boolean isManualRetrieve, int workCardNumber) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            Actions actions = new Actions(driver);
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");
            String date1 = simpleDateFormat.format(new Date());
            String date = date1 + " ";
            LocalTime time = LocalTime.now();
            LocalTime Deferbyhour = time.truncatedTo(ChronoUnit.HOURS).plusMinutes(time.getHour());
            LocalTime Deferbymin = time.truncatedTo(ChronoUnit.HOURS).plusMinutes(time.getMinute() + Integer.parseInt(Deferbymins));
            String hour = Deferbyhour.toString();
            String min = Deferbymin.toString();
            log.info("min value: " + min);
            log.info("Select Defer option.");
            wait(3);
            WebElement defer = driver.findElement(By.xpath("(//button[@class='card-button md-icon-button aoc-defer-in js-defer-in md-button md-ink-ripple'])[" + workCardNumber + "]"));
            wait.until(ExpectedConditions.elementToBeClickable(defer)).click();
            wait(5);
            log.info("Select for reason defer.");//"(//input[@ng-model='query'])[4]"
            WebElement eSearchRC = driver.findElement(By.xpath("//div[@id='defer_left-panel']//md-input-container//input[@ng-model='query']"));//input[@class='ng-pristine ng-valid md-input ng-empty ng-touched']
            eSearchRC.click();
            eSearchRC.sendKeys(resonCodeName);
            wait(2);
            WebElement sResultSearch = driver.findElement(By.xpath("//md-radio-button[@aria-label='" + resonCodeName + "']"));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", sResultSearch);
            Thread.sleep(2000);
            sResultSearch.click();
            Thread.sleep(2000);

            log.info("Select for custom defer time.");
            wait.until(ExpectedConditions.elementToBeClickable(CustomDefer)).click();

            WebElement Enterhour = driver.findElement(By.xpath("//*[@placeholder='HH']"));
            actions.moveToElement(Enterhour).build().perform();
            Enterhour.clear();
            Enterhour.sendKeys(min.split(":")[0]);
            log.info("set hour value: " + min.split(":")[0]);

            WebElement Enterminutes = driver.findElement(By.xpath("//*[@placeholder='MM']"));
            actions.moveToElement(Enterminutes).build().perform();
            Enterminutes.clear();
            Enterminutes.sendKeys(min.split(":")[1]);
            log.info("set min value: " + min.split(":")[1]);

            /**
             * dont use selenium click here, it wont work..
             * only js click is working fine as Defer button have visibility issues.
             */
            //wait.until(ExpectedConditions.elementToBeClickable(ClickDefer)).click();
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", ClickDefer);
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", ClickDefer);

            log.info("Deferred Email by " + Deferbymins + " minutes");
            if (isManualRetrieve == false) {
                log.info("Wait for deferred email contact to come to the agent");
                int msec = Integer.parseInt(Deferbymins) * 60 * 1000;
                Thread.sleep(msec);
            } else {
                log.info("Retrieving manually the deferred email contact by agent");
                Thread.sleep(10000);
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    /**
     * <h1>email_approval_feature</h1> This method is used to supervisor approve outgoing agent's email
     */
    @Step("Supervisor approve outgoing agent's email")
    public void email_approval_feature() {


        try {
            log.info("=============radiobutton approve=============");
            wait.until(ExpectedConditions.elementToBeClickable(radio_approve)).click();
        } catch (Exception e) {
            log.info("===not able to click on radio==");
        }
        try {
            log.info("===========Email ===========Approval");
            wait.until(ExpectedConditions.elementToBeClickable(final_approve)).click();
        } catch (Exception e) {
            log.info("===not able to click on approve==");
        }
        try {
            wait(3);
            WebElement ok = driver.findElement(By.xpath("//button[contains(text(),'OK')]"));
            if (ok.isDisplayed())
                click(driver, ok);
            wait.until(ExpectedConditions.elementToBeClickable(final_approve)).click();
        } catch (Exception ex) {

        }
    }

    /**
     * <h1>Review_Button</h1> This method is used to supervisor review agent's email
     *
     * @param InteractionID interaction ID of channel
     */
    @Step("Supervisor review agent's email")
    public void Review_Button(String InteractionID) {

        // objUtil.wait(10);
        //log.info("Review");
        WebElement cust = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//button[@puppeteer-id='reply-btn-" + InteractionID + "']")));
        log.info("Clicked on Review Button");
        cust.click();
        //  log.info("Clicked on Review Button1");

    }


    public void click_review() {
        log.info("=========review=========");
        review_Button.click();

    }

    public void approve_radio() {
        log.info("=============radiobutton approve=============");
        radio_approve.click();
    }

    //
    public Void Email_Approve() {
        log.info("===========Email ===========Approval");
        final_approve.click();
        return null;
    }

    /**
     * <h1>Rejection_feature</h1> This method is used to supervisor reject outgoing agent's email
     */
    @Step("Supervisor reject outgoing agent's email")
    public void Rejection_feature() {

        try {
//    	log.info("=========click review=======");
//    	wait.until(ExpectedConditions.elementToBeClickable(review_Button)).click();
            log.info("================radio button reject");
            wait.until(ExpectedConditions.elementToBeClickable(radio_Reject)).click();
            log.info("===============drop down clicked==============");
            wait.until(ExpectedConditions.elementToBeClickable(drop_down_reject)).click();
            log.info("================email incomplete info===========");
            wait.until(ExpectedConditions.elementToBeClickable(Email_incomplete_info)).click();
            log.info("==========reject button");
            wait.until(ExpectedConditions.elementToBeClickable(reject_button)).click();
        } catch (Exception e) {
        }

    }


    /**
     * <h1>email_reply_all</h1>
     * This method is used to agent reply email to all participants
     */
    @Step("Agent reply email to all participants")
    public void email_reply_all() {
        log.info("===========reply");
        Email_Reply_all.click();
        wait(5);
        email_send.click();
    }

    /**
     * <h1>Forward_Email_To_Agent</h1>
     * This method is used to forward an email to another agent
     *
     * @param sEmailKeyWord  is key work need to route to agent
     * @param toEmailAddress email address of customer/agent need to send to
     */
    @Step("Forward an email to another agent")
    public void Forward_Email_To_Agent(String sEmailKeyWord, String toEmailAddress) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            wait.until(ExpectedConditions.elementToBeClickable(ForwardEmail)).click();
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@class='widget__header aoc-email']"))).click();
            Actions action = new Actions(driver);
            action.sendKeys(Keys.TAB).build().perform();
            action.sendKeys(toEmailAddress).build().perform();

            //input Subject field
            WebElement subjField = driver.findElement(By.xpath("//input[@id='ow_Email_Field_Subject']"));
            if (subjField.isDisplayed()) {
                log.info("Inserting for Subject address.");
                subjField.clear();
                this.wait(1);
                subjField.click();
                this.wait(2);
                subjField.sendKeys(sEmailKeyWord);
            } else {
                log.info("Cannot find to Subject field.");
            }
            //input Body content
            List<WebElement> SendMessageBody = driver.findElements(By.xpath("(//textarea[@class='text-editor--textarea'])[3]"));
            wait(1);
            for (WebElement sendmsg : SendMessageBody) {
                if (sendmsg.isDisplayed()) {
                    log.info("Inserting message body: " + sendmsg);
                    sendmsg.click();
                    this.wait(1);
                    sendmsg.sendKeys(Keys.CONTROL + "a");
                    this.wait(1);
                    sendmsg.sendKeys(Keys.BACK_SPACE);
                    this.wait(1);
                    sendmsg.sendKeys(sEmailKeyWord);
                }
            }
            wait(1);
            List<WebElement> SendButton = driver.findElements(By.xpath("//span[contains(text(),'Send')]"));
            for (WebElement sendButton : SendButton) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", sendButton);

                if (sendButton.isDisplayed()) {
                    sendButton.click();
                    //log.info("Forward email is sent successfully.");
                }
            }

            //span[contains(text(),'Send')]
            if (driver.findElements(By.xpath("//button[.='OK']")).size() == 1) {
                driver.findElements(By.xpath("//button[.='OK']")).get(0).click();
                log.info("Forward email is sent successfully.");
            }

        } catch (Exception e) {
            // To send exception to log file
            log.info("Forward email operation is Failed:", e);
            e.printStackTrace();
        }

    }

    public void Forward_Email(String sEmailKeyWord, String toEmailAddress) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            wait.until(ExpectedConditions.elementToBeClickable(ForwardEmail)).click();
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@class='widget__header aoc-email']"))).click();
            Actions action = new Actions(driver);
            action.sendKeys(Keys.TAB).build().perform();
            action.sendKeys(toEmailAddress).build().perform();

            //input Body content
            List<WebElement> SendMessageBody = driver.findElements(By.xpath("(//textarea[@class='text-editor--textarea'])[3]"));
            wait(1);
            for (WebElement sendmsg : SendMessageBody) {
                if (sendmsg.isDisplayed()) {
                    log.info("Inserting message body: " + sendmsg);
                    sendmsg.click();
                    this.wait(1);
                    sendmsg.sendKeys(Keys.CONTROL + "a");
                    this.wait(1);
                    sendmsg.sendKeys(Keys.BACK_SPACE);
                    this.wait(1);
                    sendmsg.sendKeys(sEmailKeyWord);
                }
            }
            wait(1);
            List<WebElement> SendButton = driver.findElements(By.xpath("//span[contains(text(),'Send')]"));
            for (WebElement sendButton : SendButton) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", sendButton);

                if (sendButton.isDisplayed()) {
                    sendButton.click();
                    //log.info("Forward email is sent successfully.");
                }
            }

            //span[contains(text(),'Send')]
            if (driver.findElements(By.xpath("//button[.='OK']")).size() == 1) {
                driver.findElements(By.xpath("//button[.='OK']")).get(0).click();
                log.info("Forward email is sent successfully.");
            }

        } catch (Exception e) {
            // To send exception to log file
            log.info("Forward email operation is Failed:", e);
            e.printStackTrace();
        }

    }

    /**
     * Put_Agent_In_Available_State_from_ACW is to get time after making agent ready
     *
     * @param formatTime as "dd/mm/yyyy"
     * @return string of timestamp , the timestamp after making agent ready
     */
    @Step("Get time after making agent ready")
    public String Put_Agent_In_Available_State_from_ACW(String formatTime) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        log.info("Setting Agent State from ACW to Ready");
        System.out.println("Hello USer");
        try {
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@class='toolbar__button-dropdown md-button md-ink-ripple']"))).click();
            executor.executeScript("arguments[0].click();",
                    driver.findElement(By.xpath("//button[@id='ow_go_ready']")));
            String ReadyDate = getCurrentTimeByFormat(formatTime);
            return ReadyDate;
        } catch (Exception e) {
            log.info("Exception occured in PutAgentIn availabe state function ");
            return null;
        }

    }


    /**
     * <h1>makePersonalOutboundCall</h1>
     * This method is use to make personal outbound call
     *
     * @author Shivam Wankhade
     */
    @Step("Make personal outbound call")
    public void makePersonalOutboundCall(String phonenum) {
        WebElement btn = driver.findElement(By.xpath("//*[@class='search-field-container']//button"));
        if(btn.getAttribute("aria-label").contains("Disable")){
            btn.click();
        }
        WebElement txtPhoneNum = driver.findElement(By.xpath("//input[@id='ow_enter_phone_number']"));
        Actions act = new Actions(driver);
        click(driver, txtPhoneNum);
        wait(2);
        sendKeys(driver, txtPhoneNum, phonenum);
        act.moveToElement(txtPhoneNum).sendKeys(Keys.ENTER).perform();
        wait(3);
    }


    /**
     * <h1>CloseInteraction</h1> This method is used to to end work card
     *
     * @throws InterruptedException
     */
    @Step("End work card")
    public void CloseInteraction() throws InterruptedException {
        Thread.sleep(5000);

        WebElement closed = driver.findElement(By.xpath("//span[text()='Close interaction']"));
        closed.click();

        Thread.sleep(5000);
        WebElement closed1 = driver.findElement(By.xpath("//button[text()='Close Interaction']"));
        closed1.click();
    }

    /**
     * <h1>RetrieveEmail</h1> This method is used to retrieve email with specified email index
     *
     * @indexEmail is index of email want to retrieve is 1/2/3...
     */
    @Step("Retrieve email")
    public void RetrieveEmail(int indexEmail) {
        wait.until(ExpectedConditions.elementToBeClickable(DeferEmailList)).click();
        wait(1);
        List<WebElement> eDeferList = driver.findElements(By.xpath("//table[@class='widget__table defer-table']/tbody/tr"));
        if (eDeferList.size() > 0) {
            if (indexEmail == 0) {
                log.error("The index should be larger than 0 value.");
                return;
            }
            if (indexEmail == 1) {
                indexEmail++;
            }
            if (indexEmail <= eDeferList.size()) {
                WebElement eDeferRetrieve = driver.findElement(By.xpath("//table[@class='widget__table defer-table']/tbody/tr[" + indexEmail + "]//button[@aria-label='Retrieve']"));
                eDeferRetrieve.click();
                this.wait(5);
            } else {
                log.error("Cannot find to any deferred email that match with specified email.");
            }
        } else {
            log.error("Cannot find to any deferred email.");
        }
    }

    /**
     * <h1>transferToService</h1> This method is for transferring contact to service, and store timestamp
     *
     * @param sTransferOfService Service name for transfer
     * @param strInteractionId   Interaction ID of workcard
     * @return string of timestamp , the timestamp when agent is ready to work
     * @throws InterruptedException
     */
    @Step("Transferring contact to service")
    public String transferToServiceByTime(String sTransferOfService, String strInteractionId, String formatTime) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            Actions actions = new Actions(driver);
            log.info(sTransferOfService);
            Thread.sleep(2000);
            log.info("Clicking Transfer button");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_Transfer_" + strInteractionId + "_btn']"))).click();
            Thread.sleep(2000);
            log.info("Clicking Service label");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@puppeteer-id='consult-menu__services-Transfer_" + strInteractionId + "']"))).click();
            WebElement serviceLabel = driver.findElement(By.xpath("//*[@puppeteer-id='consult-menu__services-Transfer_" + strInteractionId + "']"));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", serviceLabel);
            Thread.sleep(2000);
            log.info("Scroll to service name");
            WebElement serviceName = driver.findElement(By.xpath("//div[@class='_md md-open-menu-container md-whiteframe-z2 md-active md-clickable']//button[contains(text(), '" + sTransferOfService + "')]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", serviceName);
            log.info("Click on service name");
            executor.executeScript("arguments[0].click();", serviceName);


        } catch (Exception e) {
            log.error("Error in transfering to a service; Either service \"" + sTransferOfService + "\" not found or required element wasn't clickable");
            Assert.fail("Error in transfering to a service; Either service \"" + sTransferOfService + "\" not found or required element wasn't clickable");
        }
        String transfertime = getCurrentTimeByFormat(formatTime);
        log.info("Contact is transferred at time " + transfertime);
        return transfertime;
    }


    /**
     * <h1>ConsultByTime</h1> This method is used to initiate consult call, store consult time
     *
     * @param sAgentExtensionOrID as datetime
     * @param formatTime          as string of date "dd/MM/yyyy HH:mm:ss"
     * @return String as value of datetime
     */
    @Step("Initiate consult call")
    public String ConsultByTime(String sAgentExtensionOrID, String formatTime) {
        try {
            log.info("\nConsulting the desired agent. \n");
            btnConsultOnConsultingAgent.click();
            wait(1);

            log.info("\nEnter the exetension\n");
            int iElement_size = driver.findElements(By.xpath("(//input[@aria-label='Enter extension'])[2]")).size();
            driver.findElements(By.xpath("(//input[@aria-label='Enter extension'])[2]")).get(iElement_size - 1)
                    .sendKeys(sAgentExtensionOrID);
            wait(1);

            log.info("\nClick To Call\n");
            List<WebElement> eCallBtn = driver.findElements(By.xpath("//md-menu-content/md-menu-item/form/span/button[@aria-label='Click to call " + sAgentExtensionOrID + "']"));
            wait(1);
            if (eCallBtn.size() > 0) {
                for (WebElement e : eCallBtn) {
                    e.click();
                    log.info("\nCall is clicked successfully.\n");
                }
            }
            String sConsultTime = getCurrentTimeByFormat(formatTime);
            log.info("Contact is consulted at time " + sConsultTime);
            return sConsultTime;

        } catch (Exception e) {
            log.info("Exception occured in executing Consult" + e);
            return null;
        }
    }

    /**
     * <h1>End_Call_By_Time</h1> This method is for closing contact then complete ACW, store end call time
     *
     * @param formatTime as string of date "dd/MM/yyyy HH:mm:ss"
     * @return String as value of datetime
     */
    @Step("Closing contact then complete ACW")
    public String End_Call_By_Time(String formatTime) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            if ((this.eXISTs(driver, By.xpath("//button[@ng-click='end()']"), 2) != null)) {
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();",
                        driver.findElement(By.xpath("//button[@ng-click='end()']")));
                log.info("call is successfully dropped");
                wait(3);
                if ((this.eXISTs(driver, btnACW, 5) != null)) {
                    executor.executeScript("arguments[0].click();", btnACW);
                }
                String sEndTime = getCurrentTimeByFormat(formatTime);
                log.info("Contact is end at time " + sEndTime);
                return sEndTime;
            } else {
                log.info("No active call to end");
            }

        } catch (Exception e) {
            log.info("Exception occured in end call function");

        }
        return null;
    }

    /**
     * <h1>ConsultToServicebyTime</h1> This method is used to consult to service and store timestamp
     *
     * @param serviceName      Service name for consult
     * @param strInteractionId Interaction Id of workcard
     * @return string of timestamp , the timestamp when agent is ready to work
     */
    @Step("Consult to service")
    public String ConsultToServiceByTime(String serviceName, String strInteractionId, String formatTime) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            Actions actions = new Actions(driver);
            log.info(serviceName);
            Thread.sleep(5000);
            log.info("Clicking Consult button");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_Consult_" + strInteractionId + "_btn']"))).click();
            Thread.sleep(5000);
            log.info("Clicking Service label");
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@puppeteer-id='consult-menu__services-Consult_" + strInteractionId + "']"))).click();
            WebElement consultLabel = driver.findElement(By.xpath("//*[@puppeteer-id='consult-menu__services-Consult_" + strInteractionId + "']"));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", consultLabel);
            Thread.sleep(2000);
            log.info("Scroll to service name");
            WebElement serName = driver.findElement(By.xpath("//div[@class='_md md-open-menu-container md-whiteframe-z2 md-active md-clickable']//button[contains(text(), '" + serviceName + "')]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", serName);
            Thread.sleep(2000);
            log.info("Click on service name");
            executor.executeScript("arguments[0].click();", serName);
            //get current time
            String consulttime = getCurrentTimeByFormat(formatTime);
            log.info("Contact is consulted at time " + consulttime);
            return consulttime;
        } catch (Exception e) {
            log.error("Error in consulting to a service; Either service \"" + serviceName + "\" not found or required element wasn't clickable");
            Assert.fail("Error in consulting to a service; Either service \"" + serviceName + "\" not found or required element wasn't clickable");
        }
        return null;

    }

    /**
     * <h1>reply_Email_WorkCard_To_Specified_Customer</h1> This method is for reply email to specified customer
     *
     * @param sEmailBodyReply  Email body
     * @param fromEmailAddress From Email Address
     * @param toEmailAddress   To Email Address
     * @return CCClientLoginPage as class object
     */
    @Step("Agent reply email contact to specified customer")
    public CCClientLoginPage reply_Email_WorkCard_To_Specified_Customer(String sEmailBodyReply, String fromEmailAddress, String toEmailAddress) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());

        try {
            switch_between_SMS(fromEmailAddress);
            List<WebElement> Reply = driver.findElements(By.xpath("//span[text()='Reply']"));
            for (WebElement reply : Reply) {

                log.info("Inside reply for loop");
                if (reply.isDisplayed()) {
                    log.info("This Workcard  is displayed: " + reply);
                    reply.click();

                }
            }


            if (!toEmailAddress.equals("")) {
                log.info("Remove old To field");
                List<WebElement> toField = driver.findElements(By.xpath("//div[@class='md-chip-remove-container']/button"));
                for (WebElement e : toField) {
                    if (e.isDisplayed()) {
                        log.info("Removed old to field.");
                        e.click();
                        break;
                    }
                }

                log.info("Insert new To field");
                WebElement toField2 = driver.findElement(By.xpath("//input[@id='ow_Email_Field_To']"));
                if (toField2.isDisplayed()) {
                    log.info("Inserting for To address.");
                    toField2.sendKeys(toEmailAddress);
                } else {
                    log.info("Cannot find to TO field.");
                }
            }

            List<WebElement> SendMessageBody = driver.findElements(By.xpath("//textarea[@aria-label='Email signature text editor']"));
            for (WebElement sendmsg : SendMessageBody) {
                if (sendmsg.isDisplayed()) {
                    log.info("This Workcard  is displayed: " + sendmsg);
                    sendmsg.sendKeys(sEmailBodyReply);
                    sendmsg.sendKeys(Keys.ENTER);

                }
            }

            List<WebElement> SendButton = driver.findElements(By.xpath("//span[contains(text(),'Send')]"));
            for (WebElement sendButton : SendButton) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", sendButton);

                if (sendButton.isDisplayed()) {
                    sendButton.click();

                }
            }
            //span[contains(text(),'Send')]
            if (driver.findElements(By.xpath("//button[.='OK']")).size() == 1) {
                driver.findElements(By.xpath("//button[.='OK']")).get(0).click();
            }

        } catch (Exception e) {
            // To send exception to log file
            log.info("Reply to email Failed:", e);
        }
        return this;

    }// reply_Email_WorkCard


    /**
     * @param Channel
     * @return
     * @author shivam wankhade
     * this method is use to accept workcard
     * and return service name
     */
    public String acceptCardAndGetServiceName(String Channel) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String service = null;
        log.info("------------------------Waiting for the workcard alert to display------------------------------------------------");
        if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), 300) != null)) {
            String ID = GETIDS(Channel);
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button[@ng-click='accept()']")));
            wait(2);
            log.info("Accepted contact successfully. Getting service name: ");
            WebElement serviceName = driver.findElement(By.xpath("//div[@id='ow_Service_Name_" + ID + "']/span"));
            service = serviceName.getText();
            log.info(service);
        }
        return service;
    }

    /**
     * this methos is use to
     * transfer consulted call...
     *
     * @param interactionId
     */
    public void transferConsultCall(String interactionId) {
        log.info("Starting transfer to agent ");
        wait(5);
        log.info("Clicking Transfer button //*[@id='ow_Card_Transfer_btn_" + interactionId + "']");
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_Transfer_btn_" + interactionId + "']"))).click();

    }

    /**
     * * <h1>composeAdhocEmailWithoutSendAction</h1> This method is used to compose adhoc email
     *
     * @param sEmailKeyWord    is key work need to route to agent
     * @param fromEmailAddress is address of email from customer/agent
     * @param toEmailAddress   is address of email to customer/agent
     */
    @Step("Compose adhoc email without send action..")
    public void composeAdhocEmailWithoutSendAction(String sEmailKeyWord, String fromEmailAddress, String toEmailAddress) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            RefreshWS();
            WebElement adhocBtn = driver.findElement(By.id("ow_create_email"));
            if (adhocBtn.isDisplayed()) {
                log.info("Clicking for Adhoc button.");
                adhocBtn.click();
                this.wait(2);
            } else {
                log.info("Cannot find to Adhoc button.");
            }
            //input From field

            WebElement fromFieldExpIcon = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_From']//span[@class='md-select-icon']"));
            if (fromFieldExpIcon.isDisplayed()) {
                log.info("Inserting for From address.");
                fromFieldExpIcon.click();
                this.wait(2);
                WebElement fromField = driver.findElement(By.xpath("//div[@class='md-select-menu-container md-active md-clickable']//div[text()='" + fromEmailAddress + "']"));
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", fromField);
                if (fromField.isDisplayed()) {
                    fromField.click();
                    this.wait(2);
                } else {
                    log.info("Cannot find to FROM field.");
                }
            } else {
                log.info("Cannot find to FROM field.");
            }

            //input To field
            WebElement toField = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_To']//input"));
            if (toField.isDisplayed()) {
                log.info("Inserting for TO address.");
                toField.click();
                toField.sendKeys(toEmailAddress);
            } else {
                log.info("Cannot find to TO field.");
            }

            //input Subject field
            WebElement subjField = driver.findElement(By.xpath("//input[@id='ow_Email_Field_Subject']"));
            if (subjField.isDisplayed()) {
                log.info("Inserting for Subject address.");
                subjField.click();
                this.wait(2);
                subjField.sendKeys(sEmailKeyWord);
            } else {
                log.info("Cannot find to Subject field.");
            }

            //input Body content
            List<WebElement> SendMessageBody = driver.findElements(By.xpath("(//div[@puppeteer-id='email-widget--textarea'])[3]"));
            for (WebElement sendmsg : SendMessageBody) {
                if (sendmsg.isDisplayed()) {
                    log.info("Inserting message body: " + sendmsg);
                    sendmsg.click();
                    sendmsg.sendKeys(sEmailKeyWord);
                }
            }

        } catch (Exception e) {
            // To send exception to log file
            log.info("Addhoc email operation is Failed:", e);
            e.printStackTrace();
        }

    }

    /**
     * * <h1>sendAdhocEmail</h1> This method is used to perform send adhoc email action.
     * This method is use to click on
     * adhoc email send button
     */
    public void sendAdhocEmail() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        wait(1);

        List<WebElement> SendButton = driver.findElements(By.xpath("//span[contains(text(),'Send')]"));
        for (WebElement sendButton : SendButton) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", sendButton);

            if (sendButton.isDisplayed()) {
                sendButton.click();
                log.info("Adhoc email is sent successfully.");
            }
        }
    }

    /**
     * <h1><VerifyACWWorkcardDisplayOrNot/h1>
     *
     * @return true/false
     */
    @Step("Verify ACW work card not exist")
    public boolean VerifyACWWorkcardDisplayOrNot() {
        try {
            if (completeACW.isDisplayed()) {
                log.info("ACW work card is still displaying.");
                return Boolean.TRUE;
            }
        } catch (Exception e1) {
            return Boolean.FALSE;
        }
        return Boolean.FALSE;
    }

    public boolean checkAttachmentIsAvaliable(List<WebElement> elAttachments, String expectedFileName) {
        for (WebElement attachment : elAttachments) {
            int i = 0;
            if (attachment.getAttribute("innerText").equals(expectedFileName)) {
                log.info("--------------Attachment exist");
                i++;
                if (i > 0) return true;
            }

        }
        log.info("--------------Attachment not exist");
        return false;
    }

    //Inside Customer History Search
    @FindBy(xpath = "//button[@puppeteer-id='customer-search-btn']")
    public WebElement btnSearch;
    @FindBy(xpath = "//button[@class='aoc-email md-button md-ink-ripple']")
    public WebElement btnSearchByEmail;
    @FindBy(xpath = "//input[@ng-model='search.query.emailAddress']")
    public WebElement txtEmailAddressQuery;
    @FindBy(xpath = "//button[@class='aoc-voice md-button md-ink-ripple']")
    public WebElement btnSearchByPhone;
    @FindBy(xpath = "//input[@ng-model='search.query.phoneNumber']")
    public WebElement txtPhoneAddressQuery;
    @FindBy(xpath = "//md-list-item[@class='customer-list-item md-no-proxy _md layout-column']")
    public WebElement EmailResult;
    @FindBy(xpath = "//cc-history-results")
    public WebElement Widget_CHS_Result;
    @FindBy(xpath = "//a[@class='link']/span[contains(text(),'Back')]")
    public WebElement csBackButton;
    @FindBy(xpath = "//md-icon[@ng-if='search.query.emailAddress']")
    public WebElement csClearButton;

    public void searchCustomerHistoryByEmail(String CustEmail) {
        log.info("Search by customer email");
        wait = new WebDriverWait(driver, 30);

        if((this.eXISTs(driver, By.xpath("//a[@class='link']/span[contains(text(),'Back')]"), 30) != null)){
            csBackButton.click();

            if(txtEmailAddressQuery.isDisplayed()) {
                csClearButton.clear();
            }
        }
        wait.until(ExpectedConditions.elementToBeClickable(btnopenCustomerSearch)).click();

        //Add search by Email
        wait.until(ExpectedConditions.elementToBeClickable(btnSearchByEmail)).click();
        txtEmailAddressQuery.clear();
        txtEmailAddressQuery.sendKeys(CustEmail);

        btnSearch.click();
        wait.until(ExpectedConditions.elementToBeClickable(EmailResult)).click();
    }

    public void searchCustomerHistoryByPhone(String phone) {
        log.info("Search by customer phone");
        wait = new WebDriverWait(driver, 30);
        wait.until(ExpectedConditions.elementToBeClickable(btnopenCustomerSearch)).click();

        //Add search by Email
        wait.until(ExpectedConditions.elementToBeClickable(btnSearchByPhone)).click();
        txtPhoneAddressQuery.sendKeys(phone);

        btnSearch.click();
        wait.until(ExpectedConditions.elementToBeClickable(EmailResult)).click();
    }

    public void openTranscriptInCHS(int index) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String i = String.valueOf(index);
        //Click on '+' button to show transcript
        WebElement btnOpenHistoryResult = driver.findElement(By.xpath("//button[@puppeteer-id='customerHistorySearch-history-results_toggle-interaction-details__" + i + "']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", btnOpenHistoryResult);
        wait.until(ExpectedConditions.elementToBeClickable(btnOpenHistoryResult)).click();

    }

    public boolean verifyFromAddOnCHS(String EmailSubject, String FromAdd) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        log.info("Verify From field");
        WebElement from = driver.findElement(By.xpath("//span[contains(text(),'" + EmailSubject + "')]/..//span[contains(text(),'"+FromAdd+"')]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", from);
        String sFrom = from.getText();

        if (!sFrom.contains(FromAdd)) {
            log.info("FAILED.From field show incorrectly: " + sFrom);
            return false;
        } else log.info("From field in reply show correctly " + sFrom);
        return true;
    }


    public boolean verifyTimeStampOnCHS(String EmailSubject, String NoteTime) throws ParseException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        log.info("Verify Time stamp");
        WebElement timeStamp = driver.findElement(By.xpath("//span[contains(text(),'" + EmailSubject + "')]/../span[@class='email-header-date flex']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", timeStamp);
        String format = "M/d/yy h:mm a";
        Date expectedDate = new SimpleDateFormat(format).parse(NoteTime);
        Date actualDate = new SimpleDateFormat(format).parse(timeStamp.getText());
        if (abs(expectedDate.getTime() - actualDate.getTime()) > 60000) {
            log.info("FAILED.Time stamp show incorrectly ");
            log.info("Expected: " + NoteTime);
            log.info("Actual: " + timeStamp.getText());
            return false;
        }
        return true;
//        if (!NoteTime.equalsIgnoreCase(timeStamp.getText())) {
//            log.info("FAILED.Time stamp show incorrectly ");
//            log.info("Expected: " + NoteTime);
//            log.info("Actual: " + timeStamp.getText());
//            return false;
//        } else {
//            log.info("Time stamp show correctly.");
//            log.info("Expected: " + NoteTime);
//            log.info("Actual: " + timeStamp.getText());
//            return true;
//        }

    }


// class

    @Step("Verify Attachments Display On Ws")
    public int VerifyAttachmentIsDisplayOnWS(List<String> filenames, boolean display) {
        boolean result = Boolean.FALSE;
        int failedFlag = 0;
        List<WebElement> elAttachments = driver.findElements(By.xpath("//div[contains(@class,'file-attachment__name')]"));
        for (String fileName : filenames) {
            if (display) {
                if (!checkAttachmentIsAvaliable(elAttachments, fileName)) {
                    log.info(String.format("FAILED. The attachment: %s not found.", fileName));
                    failedFlag++;
                }
            } else {
                if (checkAttachmentIsAvaliable(elAttachments, fileName)) {
                    log.info(String.format("FAILED. The attachment: %s should be not found.", fileName));
                    failedFlag++;
                }
            }
        }
        return failedFlag;
    }

    /**
     * <h1><OpenTheLatestEmailFromTheCustomerInCHS/h1>
     *
     * @param UserFromEmail
     */
    @Step("Open the latest email from the customer in Customer History Search")
    public void openTheLatestEmailFromTheCustomerInCHS(String UserFromEmail) {
        final String mailFrom = UserFromEmail;
        Click_Widget("Customer_Search");
        this.wait(2);
        Actions actions = new Actions(driver);
        wait.until(ExpectedConditions.elementToBeClickable(searchByCHS));
//        searchByCHS.click();
        actions.moveToElement(searchByCHS).click().perform();
        this.wait(2);
        wait.until(ExpectedConditions.elementToBeClickable(searchByCustomerEmail));
//        searchByCustomerEmail.click();
        actions.moveToElement(searchByCustomerEmail).click().perform();
        this.wait(2);
        wait.until(ExpectedConditions.elementToBeClickable(inputCustomerEmail));
//        inputCustomerEmail.click();
        actions.moveToElement(inputCustomerEmail).click().perform();
        inputCustomerEmail.sendKeys(Keys.CONTROL + "a");
        this.wait(1);
        inputCustomerEmail.sendKeys(Keys.BACK_SPACE);
        inputCustomerEmail.sendKeys(mailFrom);
        this.wait(2);
        wait.until(ExpectedConditions.elementToBeClickable(btnSearchCHS));
//        btnSearchCHS.click();
        actions.moveToElement(btnSearchCHS).click().perform();
        this.wait(2);
        wait.until(ExpectedConditions.elementToBeClickable(btnOpenDetailEmail));
//        btnOpenDetailEmail.click();
        actions.moveToElement(btnOpenDetailEmail).click().perform();
        this.wait(2);
    }

    @Step("Send Keyword macth 80 percent")
    public String sendKeyWordMatchIsMoreThan80Percent(String keyWord) {
        Random rnd = new Random();
        String random = null;
        int test = (int) (keyWord.length() * 0.8);
        for (int i = test + 1; i < keyWord.length(); i++) {
            int index = rnd.nextInt(keyWord.length()) + 1;
            random = keyWord.substring(0, index - 1) + keyWord.substring(index);
        }
        return random;

    }

    @Step("Getting email body content")
    public int compareEmailBodyContent(String expectedBodyContent) {
        wait(2);
        int failedFlag = 0;
        List<WebElement> bodys = driver.findElements(By.xpath("(//div[@class='text-editor__squire-container flex']//div[@id='email--textarea'])"));
        for (WebElement body : bodys) {
            try {
                if (body.isDisplayed()) {
                    log.info("The email body content is: \n" + body.getText());
                    if (!body.getText().contains(expectedBodyContent)) {
                        log.info("FAILED. The email body content is displayed incorrectly: " + expectedBodyContent);
                        failedFlag++;
                    }
                    break;
                }
            } catch (Exception e) {
            }
        }

        return failedFlag;
    }

    /**
     * <h1>click_reply_all_button</h1>
     * This method is used to agent click on reply all button
     */
    @Step("Agent click on reply to all button")
    public void click_Reply_All_But_Not_Send() {
        log.info("===========Click on reply all button");
        Email_Reply_all.click();
    }

    public static List<String> extractURL(String str) {
        List<String> list = new ArrayList<>();
        String regex = "\\b((?:https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:, .;]*[-a-zA-Z0-9+&@#/%=~_|])";

        Pattern p = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);
        Matcher m = p.matcher(str);
        while (m.find()) {
            list.add(str.substring(m.start(0), m.end(0)));
        }
        return list;
    }

    public void closeAllAnotherTab(String expectedTitle) {
        ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
        wait(2);
        if (tabs.size() > 1) {
            for (String tab : tabs) {
                driver.switchTo().window(tab);
                if (!driver.getTitle().equalsIgnoreCase(expectedTitle)) {
                    driver.close();
                }
            }
        }
        driver.switchTo().window(tabs.get(0));
    }

    @Step("Agent click suggest content")
    public void Insert_Suggest_Response_Email(String NameSuggestContent) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        WebElement SuggestedContent = driver.findElement(By.xpath("//button//span[text()=\"" + NameSuggestContent + "\"]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", SuggestedContent);
        if (SuggestedContent.isDisplayed()) {
            SuggestedContent.click();
        }
    }

    @Step("Verify suggest response is inserted to preview email when agent click suggest content")
    public boolean Check_Suggest_Response_Is_Displayed_To_Preview_Email(String AutoSuggest) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        boolean b = false;
        try {
            List<WebElement> EmailBody = driver.findElements(By.xpath("//cc-email-editor[@class='ng-untouched ng-valid layout-column flex ng-not-empty ng-dirty ng-valid-parse']//div[@id='email--textarea']"));
            for (WebElement emailBody : EmailBody) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", emailBody);
                log.info("Inside emailBody for loop");
                if (emailBody.isDisplayed()) {
                    String Emailbody = emailBody.getText();
                    log.info("Email Body initial: " + Emailbody);
                    log.info("Remove blank in preview email");
                    String PreviewEmail = Emailbody.replaceAll("\\s", "");
                    log.info("Preview Email:" + PreviewEmail);
                    log.info("Auto Suggest:" + AutoSuggest);
                    log.info("Verify Suggested Response displayed on preview email when agent reply email");
                    if (PreviewEmail.contains(AutoSuggest)) {
                        log.info("Auto suggest is inserted to preview email");
                        return true;
                    } else {
                        log.info("Auto suggest not found");
                        return false;
                    }
                }
            }
        } catch (Exception e) {
            log.info("Suggest response not displayed to preview email:", e);
        }
        return b;
    }

    public WebElement findLinkInsertBySuggest(String NameSuggestContent) {
        WebElement elBtnSuggest = driver.findElement(By.xpath("//button//span[text()=\"" + NameSuggestContent + "\"]/parent::*"));
        String html = elBtnSuggest.getAttribute("aria-label");
        String href = Jsoup.parse(html).select("a").first().attr("href");
        return driver.findElement(By.xpath(String.format("//div[@puppeteer-id=\"email-widget--textarea\"]//a[@href=\"%s\"]", href)));
    }

    @Step("Select suggested response contained URL and insert to body")
    public int verifyInsertSuggest(String NameSuggestContent) {
        int failedFlag = 0;

        //insert suggest response
        Insert_Suggest_Response_Email(NameSuggestContent);

        // find "a element" that was inserted by the suggestion button.
        WebElement suggestInserted = findLinkInsertBySuggest(NameSuggestContent);

        // move to the first "a element"
        Actions actions = new Actions(driver);
        Point location = suggestInserted.getLocation();
        actions.moveByOffset(location.getX(), location.getY()).click().perform();

        wait(2);
        // back to the tab
        closeAllAnotherTab(driver.getTitle());
        wait(2);

        // check hightlight
        if (!suggestInserted.isDisplayed()) {
            log.info("Insert suggest URL failed");
            failedFlag++;
        }

        return failedFlag;
    }

    @Step("Verify agent can edit the URL")
    public int verifyUpdatedSuggestLink(String NameSuggestContent, String newURL) {
        int failedFlag = 0;
        WebElement suggestInserted = findLinkInsertBySuggest(NameSuggestContent);
        Actions actions = new Actions(driver);

        // move to among
        actions.moveToElement(suggestInserted, 1, 1).click().perform();

        // back to the tab
        wait(2);
        closeAllAnotherTab(driver.getTitle());

        // modify the url and verify Insert link icon
        updateAndVerifyLinkDialog(newURL);

        return failedFlag;
    }


    /**
     * <h1><insertInlineImage/h1>
     *
     * @return none
     */
    public void insertInlineImage(String inlineImagePath) throws InterruptedException, AWTException, IOException {
        try {
            wait.until(ExpectedConditions.elementToBeClickable(insertBtn)).click();
        } catch (Exception ex) {
            wait.until(ExpectedConditions.elementToBeClickable(insertBtn1)).click();
        }

        Thread.sleep(1000);

        if (existImageList != null) {
            for (WebElement file : existImageList) {
                file.click();
                wait.until(ExpectedConditions.elementToBeClickable(imageInUse)).click();
                Thread.sleep(1000);
            }
        }
        wait.until(ExpectedConditions.elementToBeClickable(uploadBtn)).click();
        Thread.sleep(1000);
//        StringSelection strPath = new StringSelection(inlineImagePath);
//        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(strPath, null);
//
//        Thread.sleep(1000);
//        Robot rb = new Robot();
//        rb.keyPress(KeyEvent.VK_CONTROL);
//        rb.keyPress(KeyEvent.VK_V);
//
//        rb.keyRelease(KeyEvent.VK_CONTROL);
//        rb.keyRelease(KeyEvent.VK_V);
//        Thread.sleep(1000);
//
//        rb.keyPress(KeyEvent.VK_ENTER);
//        rb.keyRelease(KeyEvent.VK_ENTER);
        String scriptPath = System.getProperty("user.dir") + EnvSetup.sAutoITScriptRelativePath + "uploadFile.exe";
        Runtime.getRuntime().exec(scriptPath + " \"" + inlineImagePath + "\"");
        Thread.sleep(3000);

        wait.until(ExpectedConditions.elementToBeClickable(seleteImageBtn)).click();
        Thread.sleep(3000);
    }

    /**
     * <h1><addAttachmentFile/h1>
     *
     * @return none
     */
    public void addAttachmentFile(String filePath) throws InterruptedException, AWTException, IOException {
//        Thread.sleep(3000);
        wait.until(ExpectedConditions.elementToBeClickable(attachBtn)).click();
        Thread.sleep(1000);

        wait.until(ExpectedConditions.elementToBeClickable(seleteAttachmentBtn)).click();
        Thread.sleep(3000);

//        StringSelection strPath = new StringSelection(filePath);
//        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(strPath, null);
//        Thread.sleep(1000);

//        Robot rb = new Robot();
//        rb.keyPress(KeyEvent.VK_CONTROL);
//        rb.keyPress(KeyEvent.VK_V);
//
//        rb.keyRelease(KeyEvent.VK_CONTROL);
//        rb.keyRelease(KeyEvent.VK_V);
//        Thread.sleep(1000);
//
//        rb.keyPress(KeyEvent.VK_ENTER);
//        rb.keyRelease(KeyEvent.VK_ENTER);
//        Thread.sleep(3000);

        String scriptPath = System.getProperty("user.dir") + EnvSetup.sAutoITScriptRelativePath + "uploadFile.exe";
        Runtime.getRuntime().exec(scriptPath + " \"" + filePath + "\"");
        Thread.sleep(3000);

        wait.until(ExpectedConditions.elementToBeClickable(uploadAttachmentBtn)).click();
        Thread.sleep(3000);
    }

    /**
     * <h1>reply_Email_WorkCard_With_Attachemt</h1> This method is for reply email with Attachment
     *
     * @param sEmailBodyReply    Email body
     * @param fromEmailAddress   From Email Address
     * @param imagePath          To Attachment file
     * @param fileAttachmentPath To Attachment file
     * @return CCClientLoginPage as class object
     */
    @Step("Agent reply email contact to specified customer")
    public CCClientLoginPage reply_Email_WorkCard_With_Attachemt(String sEmailBodyReply, String fromEmailAddress, Map<String, String> imagePath, Map<String, String> fileAttachmentPath) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            switch_between_SMS(fromEmailAddress);
            for (WebElement reply : replyEmailBtn) {
                log.info("Inside reply for loop");
                if (reply.isDisplayed()) {
                    log.info("This Workcard  is displayed: " + reply);
                    reply.click();
                }
            }
            bodyEmailText.sendKeys(sEmailBodyReply);
            bodyEmailText.sendKeys(Keys.ENTER);
            Thread.sleep(1000);

            if (imagePath != null && imagePath.size() > 0) {
                Set<String> setImageID = imagePath.keySet();
                for (String contentId : setImageID) {
                    insertInlineImage(imagePath.get(contentId));
                }
            }
            if (fileAttachmentPath != null && fileAttachmentPath.size() > 0) {
                Set<String> setImageID = fileAttachmentPath.keySet();
                for (String contentId : setImageID) {
                    addAttachmentFile(fileAttachmentPath.get(contentId));
                }
            }
            for (WebElement sendButton : sendEmailBtn) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", sendButton);

                if (sendButton.isDisplayed()) {
                    sendButton.click();
                }
            }
            if (driver.findElements(By.xpath("//button[.='OK']")).size() == 1) {
                driver.findElements(By.xpath("//button[.='OK']")).get(0).click();
            }

        } catch (Exception e) {
            // To send exception to log file
            log.info("Reply to email Failed:", e);
        }
        return this;
    }

    @Step("Get image ID on WorkSpace")
    public String getSingleImage() {
        String img = "";
        String imgLink = (imgSignleFromCust.getAttribute("data-url"));
        img = imgLink.substring(imgLink.length() - 36, imgLink.length());
        log.info("Image ID: " + img);
        return img;
    }

    @Step("Verify confirm message appear after click end contact by interactionId when the confirm message thrown out")
    public boolean verifyConfirmMessageAppear(String strInteractionId) throws InterruptedException {
        boolean result = false;
        driver.findElement(By.id("ow_Card_End_btn_" + strInteractionId)).click();
        Thread.sleep(1000);

        String getText = getCloseConfirmMess.getText();
        log.info(getText);
        if (getText.contains("End Interaction?\nYou are still composing this Email, are you sure you want to end it?")) {
            log.info("Alert was present");
            result = true;
        } else if (getText.contains("You`re still working on the email, are you sure you want to requeue it?")) {
            log.info("Alert was present");
            result = true;
        } else if (getText.contains("You will have no further opportunity to interact with this emai")) {
            log.info("Alert was present");
            result = true;
        }
        return result;
    }

    @Step("Cancel confirm end contact message")
    public void cancelConfirmEndContact() {
        wait.until(ExpectedConditions.elementToBeClickable(getCancelConfirmEndContact)).click();
    }

    @Step("Accept confirm end contact message")
    public void acceptConfirmEndContact() {
        try {
            wait.until(ExpectedConditions.elementToBeClickable(getAcceptConfirmEndContact)).click();
        } catch (Exception e) {
        }

    }

    /**
     * <h1>getValueAtFieldsOfEmailOnWS</h1>
     * This method is used to get the value at field To, CC, BCC, Subject of Email after click on reply all/reply button
     * * @param  fieldName
     */

    public String getValueofEmailOutboundFieldsAfterClickOnWS(String fieldName) {
        log.info("---Get the value at field '" + fieldName + "' on Workspace.");
        WebElement field = null;
        String actual = null;

        switch (fieldName.toUpperCase()) {
            case "TO":
                field = driver.findElement(By.id("ow_Email_Outbound_To"));
                actual = field.getText();
                break;
            case "CC":
                field = driver.findElement(By.id("ow_Email_Outbound_CC"));
                actual = field.getText();
                break;
            case "BCC":
                field = driver.findElement(By.id("ow_Email_Outbound_To"));
                actual = field.getText();
                break;
            case "SUBJECT":
                field = driver.findElement(By.id("ow_Email_Field_Subject"));
                actual = field.getText();
                break;

        }
        return actual;
    }

    public void openTranscriptCustomerHistory(int index) {
        String i = String.valueOf(index);
        WebDriverWait wait = new WebDriverWait(driver, 10);
        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//button[@puppeteer-id='customer-history_toggle-interaction-details__" + i + "']")))).click();
    }

    public boolean verifyFieldCustomerHistory(int i, String fieldName, String expected) {
        log.info("---Verify '" + fieldName + "' in Customer History");
        String actual = driver.findElement(By.xpath("//td[@puppeteer-id='customer-history_interaction-details-container__" + i + "']//span[@ng-if='detail." + fieldName + "']")).getText();
        log.info("Expected: " + expected);
        log.info("Actual: " + actual);

        if (!actual.contains(expected)) {
            log.info("FAILED. Field show incorrectly");
            return false;
        }
        log.info("From field on customer history show correctly");
        return true;

    }

    public boolean verifyFieldCustomerHistorySearch(int i, String fieldName, String expected) {
        log.info("---Verify '" + fieldName + "' field in Customer History Search.");
        WebElement field = driver.findElement(By.xpath("//cc-history-detail-item[@puppeteer-id='customerHistorySearch-history-details-item__" + i + "']//span[@ng-if='detail." + fieldName + "']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", field);
        String actual = wait.until(ExpectedConditions.visibilityOf(field)).getText();
        log.info("Expected: " + expected);
        log.info("Actual: " + actual);

        if (!actual.trim().contains(expected.trim())) {
            log.info("FAILED. Field show incorrectly");
            return false;
        } else {
            log.info("Field show correctly");
            return true;
        }
    }

    @FindBy(xpath = "//*[@ng-click=\"replyAll()\"]")
    public WebElement EmailReplyall;

    @Step("Agent reply email to all participants")
    public void Email_reply_all() {
        log.info("===========reply");
        EmailReplyall.click();
        wait(5);
        email_send.click();

        //span[contains(text(),'Send')]
        if (driver.findElements(By.xpath("//button[.='OK']")).size() == 1) {
            driver.findElements(By.xpath("//button[.='OK']")).get(0).click();
        }

    }

    /**
     * <h1>clickQuoteIcon</h1>
     * This method is used to click quote icon
     */
    @Step("Click quote icon")
    public void clickQuoteIcon() {
        try {
            for (WebElement quote : getQuoteBtn) {
                if (quote.isDisplayed()) {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                    }
                    quote.click();
                }
            }
        } catch (Exception e) {
            log.info("Can not click on Quote icon");
        }
    }

    /**
     * <h1>verifyQuoteAppearOnToolbar</h1>
     * This method is used to verify quote icon displays on toolbar
     *
     * @return boolean
     */
    @Step("Verify Quote icon highlighted on toolbar")
    public boolean verifyQuoteHightlightOnToolbar() {
        boolean result = false;
        try {
            if (getHighLightQuote.isDisplayed()) {
                result = true;
            }
        } catch (Exception e) {
            log.info("Quote icon does not display on toolbar");
        }
        return result;
    }

    /**
     * <h1>verifyQuoteAppearOnBodyEmail</h1>
     * This method is used to verify quote icon displays on toolbar on body email
     *
     * @return boolean
     */
    @Step("Verify Quote icon displays on toolbar on body email")
    public boolean verifyQuoteAppearOnBodyEmail() {
        boolean result = false;
        try {
            if (getQuoteOnBody.isDisplayed()) {
                result = true;
            }
        } catch (Exception e) {
            log.info("Quote icon is not available on email body");
        }
        return result;
    }

    /**
     * <h1>clickSendEmail</h1>
     * This method is used to send a reply email
     */
    @Step("Agent send email")
    public void clickSendEmail() throws InterruptedException {
        log.info("Sending...");
        email_send.click();
        Thread.sleep(1000);
        if (driver.findElements(By.xpath("//button[.='OK']")).size() == 1) {
            driver.findElements(By.xpath("//button[.='OK']")).get(0).click();
        }
    }

    /**
     * <h1>compose_reply_Email</h1>
     * This method is used to composes email content
     *
     * @param sEmailBodyText Email body content
     */
    @Step("Agent composes email")
    public void compose_reply_Email(String sEmailBodyText) {
        boolean multiReply = true;
        wait(2);
        if (bodyEmailReply.isDisplayed()) {
            log.info("This Workcard  is displayed: " + bodyEmailReply);
            bodyEmailReply.sendKeys(sEmailBodyText);
            multiReply = false;
        }
        else {
            for (WebElement sendmsg : getEmailBody) {
                if (sendmsg.isDisplayed()) {
                    log.info("This Workcard  is displayed: " + sendmsg);
                    sendmsg.sendKeys(sEmailBodyText);
                    multiReply = false;
                }
            }
        }
        if (multiReply) {
            for (WebElement sendmsg : getReplyEmailBody) {
                if (sendmsg.isDisplayed()) {
                    log.info("This Workcard  is displayed: " + sendmsg);
                    sendmsg.sendKeys(sEmailBodyText);
                    break;
                }
            }
        }
    }

    /**
     * <h1>Send_Adhoc_Email_With_Attachments</h1> The Function to sent Adhoc email with attachment
     * <p>
     *
     * @param fromEmailAddress     Email address of mailbox
     * @param toEmailAddress       Email address of user
     * @param sEmailKeyWord        email subject
     * @param sEmailBodyText       Email body text
     * @param attachmentFolderPath file path of attachment
     */

    @Step("Compose then send adhoc email with attachments")
    public void Send_Adhoc_Email_With_Attachments(String sEmailKeyWord, String fromEmailAddress, String toEmailAddress, String sEmailBodyText, String attachmentFolderPath, List<String> listOfAttachments) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            WebElement adhocBtn = driver.findElement(By.xpath("//button[@id='ow_create_email']"));
            if (adhocBtn.isDisplayed()) {
                log.info("Clicking for Adhoc button.");
                adhocBtn.click();
                this.wait(5);
            } else {
                log.info("Cannot find to Adhoc button.");
            }

            //input From field
            WebElement fromFieldExpIcon = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_From']//span[@class='md-select-icon']"));
            if (fromFieldExpIcon.isDisplayed()) {
                log.info("Inserting for From address.");
                fromFieldExpIcon.click();
                this.wait(2);
                WebElement fromField = driver.findElement(By.xpath("//div[@class='md-select-menu-container md-active md-clickable']//div[text()='" + fromEmailAddress + "']"));
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", fromField);
                if (fromField.isDisplayed()) {
                    fromField.click();
                    this.wait(5);
                } else {
                    log.info("Cannot find to FROM field.");
                }
            } else {
                log.info("Cannot find to FROM field.");
            }

            //input To field
            WebElement toField = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_To']//input"));//input[@id='ow_Email_Field_To']
            if (toField.isDisplayed()) {
                log.info("Inserting for TO address.");
                toField.click();
                toField.sendKeys(toEmailAddress);
            } else {
                log.info("Cannot find to TO field.");
            }

            //input Subject field
            log.info("input Subject field");
            WebElement subjField = driver.findElement(By.xpath("//input[@id='ow_Email_Field_Subject']"));
            if (subjField.isDisplayed()) {
                log.info("Inserting for Subject address.");
                subjField.click();
                this.wait(2);
                subjField.sendKeys(sEmailKeyWord);
            } else {
                log.info("Cannot find to Subject field.");
            }

            //input Body content
            log.info("input Body content");
            List<WebElement> SendMessageBody = driver.findElements(By.xpath("(//div[@puppeteer-id='email-widget--textarea'])"));
            for (WebElement sendmsg : SendMessageBody) {
                try {
                    if (sendmsg.isDisplayed()) {
                        log.info("Inserting message body: " + sendmsg);
                        sendmsg.click();
                        sendmsg.sendKeys(sEmailBodyText);
                    }
                } catch (Exception e) {
                }
            }

            log.info("Clicking for attachBtn");
            attachBtn.click();
            this.wait(2);

//            for (String attachment : listOfAttachments) {
//                log.info("Clicking for seleteAttachmentBtn");
//                wait.until(ExpectedConditions.elementToBeClickable(seleteAttachmentBtn)).click();
//                this.wait(2);
//                File sAttachmentFullPath = new File(attachmentFolderPath, attachment);
//                StringSelection strPath = new StringSelection(sAttachmentFullPath.getPath());
//                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(strPath, null);
//                this.wait(2);
//
//                Robot rb = new Robot();
//                rb.keyPress(KeyEvent.VK_CONTROL);
//                rb.keyPress(KeyEvent.VK_V);
//
//                rb.keyRelease(KeyEvent.VK_CONTROL);
//                rb.keyRelease(KeyEvent.VK_V);
//                this.wait(2);
//
//                rb.keyPress(KeyEvent.VK_ENTER);
//                rb.keyRelease(KeyEvent.VK_ENTER);
//            }
            String sScriptPath = System.getProperty("user.dir") + EnvSetup.sAutoITScriptRelativePath + "uploadFile.exe";
            for (String file : listOfAttachments) {
                String filePath = attachmentFolderPath + file;
                wait.until(ExpectedConditions.elementToBeClickable(seleteAttachmentBtn)).click();
                this.wait(3);
                Runtime.getRuntime().exec(sScriptPath + " " + filePath);
                this.wait(5);
            }
            wait.until(ExpectedConditions.elementToBeClickable(uploadAttachmentBtn)).click();
            Thread.sleep(3000);

            List<WebElement> SendButton = driver.findElements(By.xpath("//span[contains(text(),'Send')]"));
            for (WebElement sendButton : SendButton) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", sendButton);

                if (sendButton.isDisplayed()) {
                    sendButton.click();
                    log.info("Adhoc email is sent successfully.");
                }
            }
            if (driver.findElements(By.xpath("//button[.='OK']")).size() == 1) {
                driver.findElements(By.xpath("//button[.='OK']")).get(0).click();
            }

        } catch (Exception e) {
            // To send exception to log file
            log.info("Addhoc email operation is Failed:", e);
            e.printStackTrace();
        }
    }

    public void deleteFilesInFolder(String directory, List<String> files) {
        for (String file : files) {
            File filePath = new File(directory + file);
            filePath.delete();
        }
    }

    public boolean checkAttachmentIsCorrect(List<String> filesDownload, String attachment) {
        for (String fileDownload : filesDownload) {
            if (fileDownload.equals(attachment)) {
                log.info(String.format("The attachment: %s found", attachment));
                return true;
            }
        }
        return false;
    }

    /**
     * Action button Email Adhoc
     */
    @FindBy(xpath = "//button[@puppeteer-id='email-send--button']")
    public WebElement btnSendEmailAdhoc;

    @FindBy(xpath = "//a[@ng-click='toggleBcc()']")
    public WebElement changeBcc;

    @Step("Click to add/remove Email Adhoc")
    public void click_ChangeBcc() {
        changeBcc.click();
    }

    @Step("Click button Send Email Adhoc")
    public boolean clickSendEmailAdhoc() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", btnSendEmailAdhoc);
            if (!btnSendEmailAdhoc.isEnabled()) {
                log.info("[click_SendEmailAdhoc]: Button disable");
                return false;
            } else {
                btnSendEmailAdhoc.click();
                log.info("Successfully: Click button Send Email Adhoc]");
                return true;
            }
        } catch (Exception e) {
            log.info("FAILED:[click_SendEmailAdhoc] Do not such element");
            return false;
        }
    }


    /**
     * Field Adhoc Email
     */

    @Step("Fill in field selected space")
    public Boolean fillAdhoc(WebElement field, String EmailAddress) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        Thread.sleep(2000);
        try {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", field);
            if (field.isDisplayed()) {
                field.sendKeys(EmailAddress);
                field.sendKeys(Keys.RETURN);
                log.info("Successfully: Fill to address email");
                return true;
            } else {
                log.info("Do not fill cc address email");
                return false;
            }
        } catch (Exception e) {
            log.info("FAILED: No Such Element");
            return false;
        }
    }

    @Step("Select and fill in field email adhoc")
    public Boolean fillAddressEmailAdhoc(String nameField, String emailAddress) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        switch (nameField) {
            case "To":
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", toEmailAdhoc);
                return fillAdhoc(toEmailAdhoc, emailAddress);
            case "Cc":
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", ccEmailAdhoc);
                return fillAdhoc(ccEmailAdhoc, emailAddress);
            case "Bcc":
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", bccEmailAdhoc);
                return fillAdhoc(bccEmailAdhoc, emailAddress);
            default:
                log.info("No Such case");
                return false;
        }
    }

    @Step("Clear fill in field address Email Adhoc")
    public void clearFieldAdhoc(WebElement field) throws InterruptedException {
        Thread.sleep(2000);
        int i = 0;
        try {
            while (field.isDisplayed()) {
                field.click();
                i++;
            }
        } catch (Exception e) {
            log.info("Have [" + i + "] address email adhoc clear");
        }
    }

    @Step("Click button on Nav Email Adhoc")
    public boolean click_Btn_Nav(WebElement btnNav) {
        try {
            WebDriverWait wait5= new WebDriverWait(driver,5);
            wait5.until(ExpectedConditions.elementToBeClickable(btnNav));
            if (!btnNav.isEnabled()) {
                log.info("[click_Btn_Nav]: Button disable");
                return false;
            } else {
                ((JavascriptExecutor) driver).executeScript("arguments[0].click();", btnNav);
                log.info("Successfully: [click_Btn_Nav]");
                return true;
            }
        } catch (Exception e) {
            log.info("FAILED:[click_CreateEmail] Do not such element");
            return false;
        }
    }

    @Step("Click Button on Nav in Workspaces")
    public Boolean Click_Initiate_Interaction(String btnNav) {
        log.info("Clicking on the Initiate Interaction");
        switch (btnNav) {
            case "Access Code":
                log.info("Click button Access Code successfully");
                return click_Btn_Nav(btnNavAccessCode);

            case "Call":
                log.info("Click button Call successfully");
                return click_Btn_Nav(btnNavCall);

            case "Last Number":
                log.info("Click button Last Number");
                return click_Btn_Nav(btnNavLastNumber);

            case "Call Sup":
                log.info("Click button Call Sup:");
                return click_Btn_Nav(btnNavCallSup);

            case "Create Adhoc":
                log.info("Click button Create Adhoc:");
                return click_Btn_Nav(btnNavCreatAdhoc);

            case "Open Deferred List":
                log.info("Click button Deferred List:");
                return click_Btn_Nav(btnNavDeferredList);

            default:
                log.info("Button Not Found");
        }
        return false;
    }

    @Step("Clear field address email adhoc")
    public void clearFieldAddressEmailAdhoc(String nameField) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        switch (nameField) {
            case "To":
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", clearToAddress);
                log.info("Clear To address");
                clearFieldAdhoc(clearToAddress);
                break;
            case "Cc":
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", clearCCAdhoc);
                log.info("Clear CC address");
                clearFieldAdhoc(clearCCAdhoc);
                break;
            case "Bcc":
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", clearBCCAdhoc);
                log.info("Clear Bcc address");
                clearFieldAdhoc(clearBCCAdhoc);
                break;
            default:
                log.info("No Such case");
        }
    }

    @Step
    public void fillSubjectEmailAdhoc(String sEmailKeyWord) {
        subjFill.sendKeys(sEmailKeyWord);
    }

    @Step
    public void fillBodyEmailAdhoc(String bodyText) {
        for (WebElement body : bodyAdhoc) {
            if (body.isDisplayed())
                body.sendKeys(bodyText);
        }
    }

    @FindBy(xpath = "//button[.='OK']")
    public WebElement dialogBtnOKSendEmail;

    /**
     * Methods for Adhoc Email
     */

    @Step("Click Ok send email adhoc")
    public Boolean clickOkSendAdhocEmail() {
        try {
            dialogBtnOKSendEmail.click();
            return true;
        } catch (Exception e) {
            log.info("Dialog send email is not display");
            return false;
        }
    }

    @Step("Download Attachments received Display On Ws")
    public int DownloadAttachmentReceivedDisplayOnWS(List<String> filenames) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String home = System.getProperty("user.home");
        String downloadDirectory = home + "/Downloads/";
        deleteFilesInFolder(downloadDirectory, filenames);
        boolean result = Boolean.FALSE;
        int failedFlag = 0;
        List<String> downloadedAttachments = new ArrayList<String>();
        List<WebElement> elAttachments = driver.findElements(By.xpath("//div[contains(@class,'file-attachment__name')]"));
        for (WebElement elAttachment : elAttachments) {
//            if (elAttachment.isDisplayed()) {
            try {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", elAttachment);
                elAttachment.click();
                downloadedAttachments.add(elAttachment.getText());
                this.wait(2);
            } catch (Exception e) {
            }

//            }
        }
        log.info("Downloaded the attachments: " + downloadedAttachments);
        log.info(String.format("Verify attachment downloaded in %s", downloadDirectory));
        for (String fileName : filenames) {
            if (!checkAttachmentIsCorrect(downloadedAttachments, fileName)) {
                failedFlag++;
                log.info(String.format("FAILED. The attachment: %s not found", fileName));
            }
        }
        return failedFlag;
    }

    public boolean verifyEmailSubjectCustomerHistorySearch(int emailNumber, int replayNumber, String expected) {
        log.info("---Verify email subject in Customer History Search.");
        WebElement emailSubject = driver.findElement(By.xpath("(//cc-history-detail-item[@puppeteer-id='customerHistorySearch-history-details-item__" + emailNumber + "']//span[@class='email-header-subject flex'])[" + (replayNumber + 1) + "]"));
        String actual = emailSubject.getText();
        log.info("Expected: " + expected);
        log.info("Actual: " + actual);
        if (!actual.contains(expected)) {
            log.info("FAILED. Email subject show incorrectly");
            return false;
        } else {
            log.info("Email subject show correctly");
            return true;
        }
    }

    public boolean verifyEmailContentCustomerHistorySearch(int emailNumber, int replayNumber, String expected) {
        log.info("---Verify email content in Customer History Search.");
        WebElement emailContent = driver.findElement(By.xpath("(//cc-history-detail-item[@puppeteer-id='customerHistorySearch-history-details-item__" + emailNumber + "']//div[@id='email--textarea'])[" + replayNumber + 1 + "]"));
        String actual = emailContent.getText();
        log.info("Expected: " + expected);
        log.info("Actual: " + actual);
        if (!actual.contains(expected)) {
            log.info("FAILED. Email content show incorrectly");
            return false;
        } else {
            log.info("Email content show correctly");
            return true;
        }
    }

    @Step("Open the email details On The Customer Journey")
    public void OpenEmailDetailsOnTheCustomerJourney(int desiredEmail) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
//        WebElement btnCustJourney = driver.findElement(By.xpath("//button[@class='sidebar__button aoc-customer-journey md-button']"));
        log.info("Click The Customer Journey");
        Click_Widget("Customer_Journey");
//        btnCustJourney.click();
        this.wait(3);
        List<WebElement> emailsJourney = driver.findElements(By.xpath("//div[@class='journey-horizontalTimeline']//*[name()=\"svg\" and @id=\"email_Layer_1\"]"));
        this.wait(1);
        int firstLocation = emailsJourney.size();
        int desiredLocation = emailsJourney.size() - desiredEmail + 1;
        int coverLocation = emailsJourney.size() - desiredEmail;
        this.wait(1);
        WebElement firstEmailContent = driver.findElement(By.xpath("(//div[@class='journey-horizontalTimeline']//*[name()=\"svg\" and @id=\"email_Layer_1\"])[" + firstLocation + "]"));
        this.wait(1);
        WebElement desiredEmailContent = driver.findElement(By.xpath("(//div[@class='journey-horizontalTimeline']//*[name()=\"svg\" and @id=\"email_Layer_1\"])[" + desiredLocation + "]"));
        this.wait(1);
        WebElement coverEmailContent = driver.findElement(By.xpath("(//div[@class='journey-horizontalTimeline']//*[name()=\"svg\" and @id=\"email_Layer_1\"])[" + coverLocation + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", firstEmailContent);
        firstEmailContent.click();
        if (desiredEmail != 1) {
            this.wait(3);
            Actions act = new Actions(driver);
            for (int i = 0; i <= 100; i++) {
                act.moveToElement(firstEmailContent).click().perform();
                act.doubleClick(firstEmailContent).perform();
                if (isClickable(desiredEmailContent)) {
                    log.info("Open Email details: " + desiredEmail);
                    break;
                }
            }
        }
        this.wait(3);
    }

    @Step("Click close a channel toggle touch point On The Customer Journey")
    public void clickCloseToggleTouchPointOfAChannelCustomerJourney(String channelType) {
        log.info("Click close a channel toggle touch point On The Customer Journey");
        Click_Widget("Customer_Journey");
        this.wait(15);
        WebElement channelJourney = driver.findElement(By.xpath("(//div[@class='journey-horizontalTimeline']//*[name()=\"svg\" and @id=\"" + channelType + "_Layer_1\"])[1]"));
        channelJourney.click();
        this.wait(3);
        log.info("Touchpoint on Customer Journey for channel  " + channelType + " was closed");

    }


    public boolean isClickable(WebElement webel) {
        try {
            webel.click();
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public int OpenTranscriptAndCompareEmailDetailsOnTheCustomerJourney(String sEmailKeyWord, String fromEmailAddress, String toEmailAddress, String sEmailBodyText) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int failedFlag = 0;
        log.info("Open Transcript");
        WebElement transcripIcon = driver.findElement(By.xpath("//div[@class=\"transcriptButtonContainer transcriptLabel\"]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", transcripIcon);
        if (transcripIcon.isDisplayed()) {
            transcripIcon.click();
            this.wait(5);
        } else {
            log.info("Cannot find to Transcript.");
        }
        List<WebElement> journeyEmailDetailsFields = driver.findElements(By.xpath("//div[@class=\"journey-email-header\"]")); //journey-email-details
        int numOfJourneyDetails = journeyEmailDetailsFields.size();
        log.info("Num OF JOURNEY: " + numOfJourneyDetails);

        for (WebElement journeyEmailDetail : journeyEmailDetailsFields) {
            if (journeyEmailDetail.getText().contains("RE")) {
                String journeyContent = journeyEmailDetail.getText();
                log.info("INFO. Email fields on Transcript show: " + journeyContent);
                if (!journeyContent.trim().contains("Subject: " + sEmailKeyWord)) {
                    failedFlag++;
                    log.info("FAILED. Email field \"Subject\" on Transcript show incorrectly");
                }
                if (!journeyContent.trim().contains("From: " + fromEmailAddress)) {
                    failedFlag++;
                    log.info("FAILED. Email field \"From\" on Transcript show incorrectly");
                }
                if (!journeyContent.trim().contains("To: " + toEmailAddress.trim())) {
                    failedFlag++;
                    log.info("FAILED. Email field \"To\" on Transcript show incorrectly");
                }
            }
            break;
        }
        WebElement journeyEmailDetailsContent = driver.findElement(By.xpath("//p[@class=\"email-body-content\"]"));
        log.info("INFO. Email content on Transcript show: " + journeyEmailDetailsContent.getText());
        if (!journeyEmailDetailsContent.getText().contains(sEmailBodyText)) {
            failedFlag++;
            log.info("FAILED. Email body content on Transcript show incorrectly");
        }
        return failedFlag;
    }

    public int DownloadAttachmentsOnTheCustomerJourney(List<String> filenames) {
        log.info("Click download attachments on Transcript");
        String home = System.getProperty("user.home");
        String downloadDirectory = home + "/Downloads/";
        deleteFilesInFolder(downloadDirectory, filenames);
        int failedFlag = 0;
        List<String> downloadedAttachments = new ArrayList<String>();
        List<WebElement> elAttachments = driver.findElements(By.xpath("//div[contains(@class,'uploaded-attachment_name flexAuto')]"));
        for (WebElement elAttachment : elAttachments) {
//            if (elAttachment.isDisplayed()) {
            try {
                log.info("Download attachment: " + elAttachment.getText());
                elAttachment.click();
                downloadedAttachments.add(elAttachment.getText());
                this.wait(2);
            } catch (Exception e) {
            }

//            }
        }
        log.info("Downloaded the attachments: " + downloadedAttachments);
        log.info(String.format("Verify attachment downloaded in %s", downloadDirectory));
        for (String fileName : filenames) {
            if (!checkAttachmentIsCorrect(downloadedAttachments, fileName)) {
                failedFlag++;
                log.info(String.format("The attachment: %s not found", fileName));
            }
        }
        return failedFlag;
    }

    /**
     * <h1>VerifyEmailContentOnTheCustomerJourney</h1> The Function to verify email content on the Customer Journey
     * <p>
     *
     * @param desiredEmail      Order number
     * @param sEmailKeyWord     email subject
     * @param fromEmailAddress  Email address of mailbox
     * @param toEmailAddress    Email address of user
     * @param sEmailBodyText    Email body text
     * @param listOfAttachments Attachments
     * @return if all values is equal to expected value, return 0, else, return 1
     */
    public int VerifyEmailContentOnTheCustomerJourney(int desiredEmail, String sEmailKeyWord, String fromEmailAddress, String toEmailAddress, String sEmailBodyText, List<String> listOfAttachments) {
        int failedFlag = 0;
        OpenEmailDetailsOnTheCustomerJourney(desiredEmail);
        failedFlag += OpenTranscriptAndCompareEmailDetailsOnTheCustomerJourney(sEmailKeyWord, fromEmailAddress, toEmailAddress, sEmailBodyText);
        failedFlag += DownloadAttachmentsOnTheCustomerJourney(listOfAttachments);

        WebElement btnTranscripClose = driver.findElement(By.xpath("//button[@class=\"modal-footer-closeButton\"]"));
        if (btnTranscripClose.isDisplayed()) {
            btnTranscripClose.click();
            this.wait(1);
        } else {
            log.info("Cannot find to button Transcript close");
            failedFlag += 1;
        }
        return failedFlag;
    }

    /**
     * <h1>VerifyEmailContentOnTheCustomerHistory</h1> The Function to verify email content on the Customer History
     * <p>
     *
     * @param desiredEmail     Order number
     * @param sEmailKeyWord    email subject
     * @param fromEmailAddress Email address of mailbox
     * @param toEmailAddress   Email address of user
     * @param sEmailBodyText   Email body text
     * @return if all values is equal to expected value, return 0, else, return 1
     */
    public int VerifyEmailContentOnTheCustomerHistory(int desiredEmail, String sEmailKeyWord, String fromEmailAddress, String toEmailAddress, String sEmailBodyText) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int failedFlag = 0;
        log.info("Open Customer Details");
        Click_Widget("Customer_Details");
        this.wait(2);
        WebElement btnOpenDetailsCH = driver.findElement(By.xpath("(//div[contains(@ng-switch,'customerHistory')]//span[@class=\"aoc-email\"])[" + desiredEmail + "]/../..//button[contains(@type,'button')]"));
        if (btnOpenDetailsCH.isDisplayed()) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", btnOpenDetailsCH);
            btnOpenDetailsCH.click();
            this.wait(1);
        } else {
            log.info("FAILED. Cannot find to button Transcript close");
            failedFlag += 1;
        }
        log.info("Open email details on Customer History");
        WebElement fieldSubject = driver.findElement(By.xpath("(//cc-history-detail-item[@item=\"case.detail\"])[" + desiredEmail + "]//span[@class='email-header-subject flex']"));
        log.info("INFO. Email field \"Subject\" on Customer History: " + fieldSubject.getText());
        WebElement fieldFrom = driver.findElement(By.xpath("(//cc-history-detail-item[@item=\"case.detail\"])[" + desiredEmail + "]//span[@ng-if='detail.from']"));
        log.info("INFO. Email field \"From\" on Customer History: " + fieldFrom.getText());
        WebElement fieldTo = driver.findElement(By.xpath("(//cc-history-detail-item[@item=\"case.detail\"])[" + desiredEmail + "]//span[@ng-if='detail.to']"));
        log.info("INFO. Email field \"To\" on Customer History: " + fieldTo.getText());
        WebElement detailsContent = driver.findElement(By.xpath("(//cc-history-detail-item[@item=\"case.detail\"])[" + desiredEmail + "]//div[@class='text-editor__squire-container flex']"));
        log.info("INFO. Email content on Customer History: " + detailsContent.getText());
        if (!fieldSubject.getText().contains(sEmailKeyWord)) {
            failedFlag++;
            log.info("FAILED. Email field \"Subject\" on Customer History show incorrectly");
        }
        if (!fieldFrom.getText().contains(fromEmailAddress)) {
            failedFlag++;
            log.info("FAILED. Email field \"From\" on Customer History show incorrectly");
        }
        if (!fieldTo.getText().contains(toEmailAddress)) {
            failedFlag++;
            log.info("FAILED. Email field \"To\" on Customer History show incorrectly");
        }
        if (!detailsContent.getText().contains(sEmailBodyText)) {
            failedFlag++;
            log.info("FAILED. Email Content on Customer History show incorrectly");
        }
        return failedFlag;
    }

    /**
     * * <h1>composeAdhocEmailWithoutSendAction</h1> This method is used to compose adhoc email
     *
     * @param sEmailSubject    is subject of email
     * @param fromEmailAddress is address of email from customer/agent
     * @param toEmailAddress   is address of email to customer/agent
     * @param sEmailBody       is subject of email
     */
    @Step("Compose adhoc email without send action.")
    public void composeAdhocEmailWithoutSendAction(String sEmailSubject, String fromEmailAddress, String toEmailAddress, String sEmailBody) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            WebElement adhocBtn = driver.findElement(By.id("ow_create_email"));
            if (adhocBtn.isDisplayed()) {
                log.info("Clicking for Adhoc button.");
                adhocBtn.click();
                this.wait(2);
            } else {
                log.info("Cannot find to Adhoc button.");
            }
            //input From field

            WebElement fromFieldExpIcon = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_From']//span[@class='md-select-icon']"));
            if (fromFieldExpIcon.isDisplayed()) {
                log.info("Inserting for From address.");
                fromFieldExpIcon.click();
                this.wait(2);
                WebElement fromField = driver.findElement(By.xpath("//div[@class='md-select-menu-container md-active md-clickable']//div[text()='" + fromEmailAddress + "']"));
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", fromField);
                if (fromField.isDisplayed()) {
                    fromField.click();
                    this.wait(2);
                } else {
                    log.info("Cannot find to FROM field.");
                }
            } else {
                log.info("Cannot find to FROM field.");
            }

            //input To field
            WebElement toField = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_To']//input"));
            if (toField.isDisplayed()) {
                log.info("Inserting for TO address.");
                toField.click();
                toField.sendKeys(toEmailAddress);
            } else {
                log.info("Cannot find to TO field.");
            }

            //input Subject field
            WebElement subjField = driver.findElement(By.xpath("//input[@id='ow_Email_Field_Subject']"));
            if (subjField.isDisplayed()) {
                log.info("Inserting for Subject address.");
                subjField.click();
                this.wait(2);
                subjField.sendKeys(sEmailSubject);
            } else {
                log.info("Cannot find to Subject field.");
            }

            //input Body content
            List<WebElement> SendMessageBody = driver.findElements(By.xpath("(//div[@puppeteer-id='email-widget--textarea'])[3]"));
            for (WebElement sendmsg : SendMessageBody) {
                if (sendmsg.isDisplayed()) {
                    log.info("Inserting message body: " + sendmsg);
                    if (!sEmailBody.equals("")) {
                        sendmsg.click();
                        sendmsg.sendKeys(sEmailBody);
                    }
                }
            }

        } catch (Exception e) {
            // To send exception to log file
            log.info("Addhoc email operation is Failed:", e);
            e.printStackTrace();
        }

    }

    /**
     * * <h1>verifyWarningMessageOfEmptyEmailBodyExistOnWS</h1> This method is used to verify warning message of empty email body on workspace
     */
    public boolean verifyWarningMessageOfEmptyEmailBodyExistOnWS() {
        WebElement warningMessage = driver.findElement(By.xpath("//cc-email-editor[@ng-model='outboundEmail.body']/span[contains(text(),'The body of the email cannot be empty. Please enter a message.')]"));
        if (!warningMessage.isDisplayed()) {
            log.info("The warning message is not displayed");
            return false;
        } else {
            log.info("The warning message is displayed");
            String borderColor = driver.findElement(By.xpath("//div[@class='text-editor layout-column flex text-editor--empty']")).getCssValue("border-color");
            String hexColor = org.openqa.selenium.support.Color.fromString(borderColor).asHex();
            log.info("The warning message is " + warningMessage.getText() + " and highlight color is " + borderColor + " hex: " + hexColor);
            if (hexColor.equals("#dd2c00")) {
                borderColor = "red";
            }
            log.info("The warning message highlight border color is " + borderColor);

            if (!borderColor.toLowerCase().equals("red")) {
                log.info("The color is not red");
                return false;
            }
        }

        return true;
    }

    /**
     * * <h1>inputTextToAdhocEmailBodyOnW</h1> This method is used to input message to adhoc email body on workspace
     */
    public void inputTextToAdhocEmailBodyOnWS(String sEmailBodyText) {
        WebElement adhocEmailBody = driver.findElement(By.xpath("(//div[@puppeteer-id='email-widget--textarea'])[3]"));
        for (WebElement body : elEmailBody) {
            try {
                if (body.isDisplayed()) {
                    fillTextToInput(adhocEmailBody, sEmailBodyText, false);
                    break;
                }
            } catch (Exception e) {
            }

        }

    }

    /**
     * * <h1>isDisableAdhocEmailButton</h1> Verified status of Create Adhoc Email Button
     */
    @Step("Verified status of Create Adhoc Email Button")
    public boolean isDisableAdhocEmailButton() {
        WebElement adhocBtn = driver.findElement(By.xpath("//button[@id='ow_create_email']"));
        if (adhocBtn.isDisplayed()) {
            if (adhocBtn.isEnabled()) {
                log.info("Adhoc button is enable");
                return false;
            }
        }
        log.info("Adhoc button is disable");
        return true;
    }

    /**
     * <h1>reply_Email_WorkCard_with_Attachment_Not_Send</h1> This method is for reply email contact with Attachment but not send
     *
     * @param sEmailBodyText       Email body
     * @param fromEmailAddress     From Email Address
     * @param attachmentFolderPath file path of attachment
     */
    @Step("Agent reply email contact with Attachment but not send")
    public CCClientLoginPage reply_Email_WorkCard_with_Attachments_Not_Send(String sEmailBodyText, String fromEmailAddress, String attachmentFolderPath, List<String> listOfAttachments) {

        try {

            switch_between_SMS(fromEmailAddress);
            List<WebElement> Reply = driver.findElements(By.xpath("//span[text()='Reply']"));
            for (WebElement reply : Reply) {

                log.info("Inside reply for loop");
                if (reply.isDisplayed()) {
                    log.info("This Workcard  is displayed: " + reply);
                    reply.click();

                }
            }

            //input Body content
            log.info("input Body content");
            List<WebElement> SendMessageBody = driver.findElements(By.xpath("(//div[@puppeteer-id='email-widget--textarea'])[3]"));
            for (WebElement sendmsg : SendMessageBody) {
                if (sendmsg.isDisplayed()) {
                    log.info("Inserting message body: " + sendmsg);
                    sendmsg.click();
                    sendmsg.sendKeys(sEmailBodyText);
                }
            }

            log.info("Clicking for attachBtn");
            attachBtn.click();
            this.wait(2);

//            for (String attachment : listOfAttachments) {
//                log.info("Clicking for seleteAttachmentBtn");
//                wait.until(ExpectedConditions.elementToBeClickable(seleteAttachmentBtn)).click();
//                this.wait(2);
//                File sAttachmentFullPath = new File(attachmentFolderPath, attachment);
//                StringSelection strPath = new StringSelection(sAttachmentFullPath.getPath());
//                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(strPath, null);
//                this.wait(2);
//
//                Robot rb = new Robot();
//                rb.keyPress(KeyEvent.VK_CONTROL);
//                rb.keyPress(KeyEvent.VK_V);
//
//                rb.keyRelease(KeyEvent.VK_CONTROL);
//                rb.keyRelease(KeyEvent.VK_V);
//                this.wait(2);
//
//                rb.keyPress(KeyEvent.VK_ENTER);
//                rb.keyRelease(KeyEvent.VK_ENTER);
//                this.wait(5);
//            }
            String scriptPath = System.getProperty("user.dir") + EnvSetup.sAutoITScriptRelativePath + "uploadFile.exe";
            for (String file : listOfAttachments) {
                String filePath = attachmentFolderPath + file;
                wait.until(ExpectedConditions.elementToBeClickable(seleteAttachmentBtn)).click();
                this.wait(3);
                Runtime.getRuntime().exec(scriptPath + " \"" + filePath + "\"");
                this.wait(5);
            }
            wait.until(ExpectedConditions.elementToBeClickable(uploadAttachmentBtn)).click();
            Thread.sleep(5000);

        } catch (Exception e) {
            // To send exception to log file
            log.info("Reply to email Failed:", e);
        }
        return this;
    }

    /**
     * <h1><deferEmailWithInvalidTime/h1>
     *
     * @param deferByNins
     * @return none
     */
    @Step("Defer email contact with invalid time")
    public void deferEmailWithInvalidTime(String deferByNins) {
        LocalTime time = LocalTime.now();
        LocalTime deferTime = time.truncatedTo(ChronoUnit.HOURS).plusMinutes(time.getMinute() - Integer.parseInt(deferByNins));
        String hour = deferTime.toString().split(":")[0];
        String min = deferTime.toString().split(":")[1];
        log.info("Hour defer: " + hour);
        log.info("Minute defer: " + min);

        wait.until(ExpectedConditions.elementToBeClickable(Defer)).click();
        wait.until(ExpectedConditions.elementToBeClickable(CustomDefer)).click();

        Enterhour.sendKeys(Keys.chord(Keys.CONTROL, "a"));
        Enterhour.sendKeys(hour);

        Enterminutes.sendKeys(Keys.chord(Keys.CONTROL, "a"));
        Enterminutes.sendKeys(min);
    }

    /**
     * <h1>verifyTimeHighlighWhenEnterInvalidTime</h1> This method is used to verify Time will highlight when entering an invalid time
     *
     * @param Deferbymins Defer minute
     * @return int
     */
    @Step("Verify Time will highlight when entering an invalid time")
    public int verifyTimeHighlighWhenEnterInvalidTime(String Deferbymins) throws InterruptedException {
        int failedFlag = 0;
        try {
            wait.until(ExpectedConditions.elementToBeClickable(Defer)).click();
            wait.until(ExpectedConditions.elementToBeClickable(CustomDefer)).click();
            Thread.sleep(1000);

            if (!checkValidDeferDate.isDisplayed()) {
                failedFlag++;
                log.info("The date is highlighted with valid time");
            }
            if (!checkValidDeferHour.isDisplayed()) {
                failedFlag++;
                log.info("The hour is highlighted with valid time");
            }
            if (!checkValidDeferMin.isDisplayed()) {
                failedFlag++;
                log.info("The minute is highlighted with valid time");
            }
            Thread.sleep(1000);
            Actions actions = new Actions(driver);
            actions.moveToElement(getWorkcards).click().perform();
            actions.doubleClick();

            log.info("Set defer time with invalid value");
            deferEmailWithInvalidTime(Deferbymins);
            Thread.sleep(1000);
            if (!checkInvalidDeferDate.isDisplayed()) {
                failedFlag++;
                log.info("The date was not highlighted with invalid time");
            }
            if (!checkInvalidDeferHour.isDisplayed()) {
                failedFlag++;
                log.info("The hour was not highlighted with invalid time");
            }

            if (!checkInvalidDeferMin.isDisplayed()) {
                failedFlag++;
                log.info("The minute was not highlighted with invalid time");
            }
        } catch (Exception e) {
        }
        return failedFlag;
    }

    @Step("Agent reply email to all participants")
    public void emailReplyAll() {
        log.info("reply All");
        Email_Reply_all.click();
        wait(5);
        email_send.click();

        if (driver.findElements(By.xpath("//button[.='OK']")).size() == 1) {
            driver.findElements(By.xpath("//button[.='OK']")).get(0).click();
        }


    }

    public void copyEmailSubjectAndPasteToEmailBody() throws InterruptedException {
        WebElement emailsubjField = driver.findElement(By.xpath("//*[@id='ow_Email_Field_Subject']"));
        Actions act = new Actions(driver);
        act.moveToElement(emailsubjField).doubleClick().build().perform();
        driver.findElement(By.xpath("//*[@id='ow_Email_Field_Subject']")).sendKeys(Keys.chord(Keys.CONTROL, "c"));
        Thread.sleep(2000);
        List<WebElement> SendMessageBody = driver.findElements(By.xpath("(//div[@puppeteer-id='email-widget--textarea'])"));
        for (WebElement sendmsg : SendMessageBody) {
            if (sendmsg.isDisplayed()) {
                sendmsg.sendKeys(Keys.chord(Keys.CONTROL, "v"));

            }

        }
    }

    @FindBy(xpath = "//div[@class='email-details layout-row']/table/tbody/tr[4]")
    WebElement emailDetail;

    public int verifySubjectUnderShowDetailsSection(String subjectUnderShowDetails) throws InterruptedException {
        driver.findElement(By.xpath("//a[contains(text(),'Show Details')]")).click();
        Thread.sleep(20000);
        String emailSubject = subjectUnderShowDetails;
        int failedFlag = 0;
        if (emailDetail.getText().contains(emailSubject)) {
            log.info("The subject email on preview mode of agent side should be the same with customer side: " + emailDetail.getText());

        } else {
            log.info("FAILED. The subject email on preview mode of agent side should be NOT same with customer side.");
            failedFlag++;
        }

        return failedFlag;
    }

    public boolean verifySubject(String subjectExpected) {
        List<WebElement> subjectList = driver.findElements(By.xpath("//div[@class='email-info__subject email-no-hide-whitespaces']"));
        for (WebElement subject : subjectList) {
            if (subject.isDisplayed()) {
                String subjectText = subject.getText();
                log.info("Subject actual= " + subjectText);
                if (subjectText.equals(subjectExpected)) {
                    log.info("Subject show corectly");
                    return true;
                }
            }
        }
        return false;
    }

    public boolean verifySubjectInCustomerHistory(String subjectExpected) {
        String subject = driver.findElement(By.xpath("//td[@puppeteer-id='customer-history_interaction-details-container__0']//span[@class='email-header-subject flex']")).getText();
        log.info("Subject actual= " + subject);
        if (subject.equals(subjectExpected)) {
            log.info("Subject show corectly");
            return true;
        } else {
            return false;
        }
    }

    /**
     * <h1><retrieveDraftEmail/h1>
     */
    @Step("retrieves draft email")
    public void retrieveDraftEmail() {
        try {
            wait.until(ExpectedConditions.elementToBeClickable(getRetrieveDraftEmail)).click();
        } catch (Exception e) {
            log.info("Can not retrieve the draft email");
        }
    }

    /**
     * <h1><deleteSpecificFileFromUploadedFile/h1>
     */
    @Step("Delete specific file from the uploaded file")
    public boolean deleteSpecificFileFromUploadedFile(String fileName) {
        try {
            WebElement file = driver.findElement(By.xpath("//div[@class='file-attachment layout-row'][@aria-label='" + fileName + "']//button[@ng-click='removeAttachment(attachment)']"));
            file.click();
            return true;
        } catch (Exception e) {
            log.info("Can not remove the attachment file from the uploaded file");
            return false;
        }
    }

    @Step("Verify position From field Adhoc email")
    public boolean verifyPositionFromFieldAdhoc(String fromEmailAddress, int exPosition) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        wait(1);
        try {
            try {
                WebElement fromFieldExpIcon = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_From']//span[@class='md-select-icon']"));
                log.info("Inserting for From address.");
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", fromFieldExpIcon);
                fromFieldExpIcon.click();
            }catch (Exception e) {
                try {
                    WebElement fromFieldExpIcon = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_From']//md-select[@placeholder='Select Value']"));
                    log.info("Inserting for From address.");
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", fromFieldExpIcon);
                    fromFieldExpIcon.click();
                }catch (Exception a) {
                    log.info("Outgoing Email Address is blank by default is disable.");
                }
            }
            this.wait(2);
            if(!listAddressInFromAddresses.get(exPosition).getText().equals(fromEmailAddress)){
                log.info("The position from address incorrectly: "+listAddressInFromAddresses.get(exPosition).getText());
                actions().sendKeys(Keys.ESCAPE).build().perform();
                return false;
            }
        } catch (Exception e) {
            log.info("No such element");
            actions().sendKeys(Keys.ESCAPE).build().perform();
            return false;
        }
        actions().sendKeys(Keys.ESCAPE).build().perform();
        return true;
    }

    @Step("Input From field Adhoc email")
    public void Input_From_Field_Adhoc(String fromEmailAddress) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        wait(1);
        try {
            try {
                WebElement fromFieldExpIcon = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_From']//span[@class='md-select-icon']"));
                log.info("Inserting for From address.");
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", fromFieldExpIcon);
                fromFieldExpIcon.click();
            }catch (Exception e) {
                try {
                    WebElement fromFieldExpIcon = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_From']//md-select[@placeholder='Select Value']"));
                    log.info("Inserting for From address.");
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", fromFieldExpIcon);
                    fromFieldExpIcon.click();
                }catch (Exception a) {
                    log.info("Outgoing Email Address is blank by default is disable.");
                }
            }
            this.wait(2);
            WebElement fromField = driver.findElement(By.xpath("//div[@class='md-select-menu-container md-active md-clickable']//div[text()='" + fromEmailAddress + "']"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", fromField);
            if (fromField.isDisplayed()) {
                fromField.click();
                this.wait(2);
            } else {
                log.info("Cannot find to FROM field.");
            }
        } catch (Exception e) {
            log.info("Input from field Adhoc operation is Failed:", e);
        }
    }

    @Step("Double click on Subject field")
    public void Double_click_on_Subject_field() {
        wait(1);
        try {
            Actions actions = new Actions(driver);
            WebElement inputSearch = driver.findElement(By.xpath("//input[@id='ow_Email_Field_Subject']"));
            wait(1);
            actions.moveToElement(inputSearch).doubleClick().perform();
        } catch (Exception e) {
            log.info("Double click on Subject field operation is Failed:", e);
        }

    }

    @Step("Verify email address appears in To field")
    public boolean Verify_email_address_appears_in_To_field(String toEmailAddress) {
        boolean b = false;
        WebElement toField = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_To']//input"));
        if (toField.isDisplayed()) {
            Boolean EmailAddress1 = driver.findElements(By.xpath("//div[@id='ow_Email_Outbound_To']//span[normalize-space()='" + toEmailAddress + "']")).size() > 0;
            if (!EmailAddress1) {
                log.info("Email address disappears in To field");
            } else {
                WebElement EmailAddress = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_To']//span[normalize-space()='" + toEmailAddress + "']"));
                if (toEmailAddress.equals(EmailAddress.getText())) {
                    log.info("Email address appears in To field");
                    return true;
                } else {
                    log.info("Email address disappears in To field");
                }
            }
        } else {
            log.info("Cannot find to TO field.");
            return false;
        }
        return b;
    }

    public void inputBodyContentAdhocEmailPerLine(String sEmailBodyText, int line) {
        int expectedLine = line;
        log.info("input Body content");
        for (int i = 1; i <= elEmailBody.size(); i++) {
            try {
                if (elEmailBody.get(i - 1).isDisplayed()) {
                    List<WebElement> linesMessageBody = driver.findElements(By.xpath("(//div[@puppeteer-id='email-widget--textarea'])[" + i + "]//div"));
                    int lineCount = linesMessageBody.size();
                    if (lineCount >= expectedLine) {
                        WebElement lineMessageBody = driver.findElement(By.xpath("((//div[@puppeteer-id='email-widget--textarea'])[" + i + "]//div)[" + expectedLine + "]"));
                        lineMessageBody.sendKeys(sEmailBodyText);
                    } else {
                        for (int j = lineCount; j < expectedLine; j++) {
                            WebElement lineMessageBody = driver.findElement(By.xpath("(((//div[@puppeteer-id='email-widget--textarea'])[" + i + "]//div)[" + j + "]"));
                            lineMessageBody.sendKeys("\r\n");
                        }
                        WebElement expectedLineMessageBody = driver.findElement(By.xpath("(((//div[@puppeteer-id='email-widget--textarea'])[" + i + "]//div)[" + expectedLine + "]"));
                        expectedLineMessageBody.sendKeys(sEmailBodyText);
                    }
                    break;
                }

            } catch (Exception e) {
            }
        }

    }

    public static boolean checkElementVisible(WebElement el, WebDriver driver) {
        try {
            WebDriverWait wait = new WebDriverWait(driver, 10);
            wait.until(ExpectedConditions.elementToBeClickable(el));
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public void switchBetweenFontSize(String sFontSize) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        JavascriptExecutor executor = (JavascriptExecutor) driver;
        if (checkElementVisible(btnSmallFontSize, driver)) {
            log.info("Click btnSmallFontSize");
            executor.executeScript("arguments[0].click();", btnSmallFontSize);
        } else if (checkElementVisible(btnNormalFontSize, driver)) {
            log.info("Click btnNormalFontSize");
            executor.executeScript("arguments[0].click();", btnNormalFontSize);
        } else if (checkElementVisible(btnLargeFontSize, driver)) {
            log.info("Click btnLargeFontSize");
            executor.executeScript("arguments[0].click();", btnLargeFontSize);
        } else if (checkElementVisible(btnHugeFontSize, driver)) {
            log.info("Click btnHugeFontSize");
            executor.executeScript("arguments[0].click();", btnHugeFontSize);
        }
        this.wait(2);
        WebElement eleFontSize = driver.findElement(By.xpath("//div[@class='md-select-menu-container md-active md-clickable']//md-option[@ng-repeat=\"option in fontPtSizes\"]//div[text()='" + sFontSize + "']"));
        if (eleFontSize.isDisplayed()) {
            log.info("Clicking button to select: " + sFontSize);
            executor.executeScript("arguments[0].click();", eleFontSize);
            this.wait(2);
        }
    }

    @Step("Compose then send adhoc email with attachments")
    public void Send_Adhoc_Email_With_Select_Font_Size_Text(String sEmailKeyWord, String fromEmailAddress, String toEmailAddress, Map<String, String> sEmailBodyTexts) throws InterruptedException {
        Click_Initiate_Interaction("Create Adhoc");
        Input_From_Field_Adhoc(fromEmailAddress);
        fillAddressEmailAdhoc("To", toEmailAddress);
        fillSubjectEmailAdhoc(sEmailKeyWord);
        int line = 0;
        Set<String> setFontSizeID = sEmailBodyTexts.keySet();
        for (String fontSizeId : setFontSizeID) {
            line++;
            switch (fontSizeId) {
                case "Small":
                    switchBetweenFontSize("Small");
                    inputBodyContentAdhocEmailPerLine(sEmailBodyTexts.get(fontSizeId), line);
                    break;
                case "Normal":
                    switchBetweenFontSize("Normal");
                    inputBodyContentAdhocEmailPerLine(sEmailBodyTexts.get(fontSizeId), line);
                    break;
                case "Large":
                    switchBetweenFontSize("Large");
                    inputBodyContentAdhocEmailPerLine(sEmailBodyTexts.get(fontSizeId), line);
                    break;
                case "Huge":
                    switchBetweenFontSize("Huge");
                    inputBodyContentAdhocEmailPerLine(sEmailBodyTexts.get(fontSizeId), line);
                    break;
            }
            this.wait(1);
        }

        Click_Send_Adhoc_Email();
    }

    public String getTextLabelBcc(String label) {
        String value = null;
        switch (label) {
            case "Add Bcc":
                log.info("Get text label Add Bcc");
                value = add_bcc.getText();
                log.info("Text of label Add Bcc: " + value);
                return value;

            case "Remove Bcc":
                log.info("Get text label Remove Bcc");
                add_bcc.click();
                this.wait(2);
                value = add_bcc.getText();
                log.info("Text of label Remove Bcc: " + value);
                return value;
            default:
                log.info("Label Not Found");
                return value;
        }

    }

    public int verifyOpenUrl(String url) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int failedFlag = 0;
        wait(1);
        String defineURL = "(//div[@puppeteer-id='email-widget--textarea'])[3]//a[@href=\"%s\"]";
        String defineURLXpath = String.format(defineURL, url);
        wait(5);
        // totalTabBefore =
        int totalTabBeforeClick = driver.getWindowHandles().size();
        //wait click
        WebElement eUrl = driver.findElement(By.xpath(defineURLXpath));
        JavascriptExecutor js = (JavascriptExecutor) driver;
        js.executeScript("arguments[0].scrollIntoView(true)", eUrl);
        wait.until(ExpectedConditions.elementToBeClickable(eUrl)).click();
        // click -> totalTabAfterClick
        int totalTabAfterClick = driver.getWindowHandles().size();
        if (totalTabBeforeClick > totalTabAfterClick) {
            failedFlag++;
            log.info("FAILED. Failed to open URL");
        } else {
            wait(3);
            closeAllAnotherTab(driver.getTitle());
        }

        return failedFlag;
    }

    public int verifyOpenMailBox(String mailbox) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int failedFlag = 0;
        wait(1);
        String defineMailbox = "(//div[@puppeteer-id='email-widget--textarea'])[3]//a[@href=\"mailto:%s\"]";
        String defineMailboxXpath = String.format(defineMailbox, mailbox);

        int totalTabBeforeClick = driver.getWindowHandles().size();
        wait(5);
        // click mailbox
        WebElement eMailbox = driver.findElement(By.xpath(defineMailboxXpath));
        JavascriptExecutor js = (JavascriptExecutor) driver;
        js.executeScript("arguments[0].scrollIntoView(true)", eMailbox);
        wait.until(ExpectedConditions.elementToBeClickable(eMailbox)).click();
        // click -> totalTabAfterClick
        int totalTabAfterClick = driver.getWindowHandles().size();
        if (totalTabBeforeClick < totalTabAfterClick) {
            failedFlag++;
            log.info("FAILED. A new tab browser is not launched");
        } else {
            log.info("A new tab browser is launched");
        }
        wait(3);
        driver.switchTo().alert().dismiss();

        return failedFlag;
    }

    public int addNewURLAndMailbox(String newURL, String newMailbox) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int failedFlag = 0;
        List<WebElement> EmailBody = driver.findElements(By.xpath("(//div[@puppeteer-id='email-widget--textarea'])[3]//div[1]"));
        for (WebElement emailBody : EmailBody) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", emailBody);

            if (emailBody.isDisplayed()) {
                wait.until(ExpectedConditions.elementToBeClickable(emailBody)).click();
            } else {
                log.info("FAILED. Can not find location to add new url and mailbox");
            }
        }
        try {
            for (WebElement body : elEmailBody) {
                if (body.isDisplayed()) {
                    body.sendKeys(String.format(newURL));
                    body.sendKeys(Keys.ENTER);

                    body.sendKeys(String.format(newMailbox));
                    body.sendKeys(Keys.ENTER);
                    break;
                }
            }

        } catch (Exception ex) {
            failedFlag++;
            ex.printStackTrace();
        }
        return failedFlag;
    }

    public int verifyURLInSuggestResponse(String NameSuggestContent) {
        int failedFlag = 0;
        try {
            wait.until(ExpectedConditions.elementToBeClickable(div3InEmailBody)).click();
            wait(2);
            Insert_Suggest_Response_Email(NameSuggestContent);
            wait.until(ExpectedConditions.elementToBeClickable(findLinkInsertBySuggest(NameSuggestContent))).click();
            wait(2);
            closeAllAnotherTab(driver.getTitle());
        } catch (Exception ex) {
            log.info("FAILED. Can not click on the url in the suggest response");
            ex.printStackTrace();
            failedFlag++;
        }
        return failedFlag;
    }

    @Step("Search category or template")
    public Boolean searchTemplateOrCategory(String templateName, String categoryName, String inputSearch) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            wait(2);
            inputSearchCategory.clear();
            inputSearchCategory.sendKeys(inputSearch);
            inputSearchCategory.sendKeys(Keys.RETURN);
            wait(5);
            if (templateName == null) {
                WebElement categoryTemplate = driver.findElement(By.xpath("//div[contains(text(),'" + categoryName + "')]//../div/button"));
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", categoryTemplate);
                return true;
            } else {
                try {
                    WebElement InsertTemplate = driver.findElement(By.xpath("//div[text()='" + templateName + "']/..//button[@aria-label='Insert']"));
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", InsertTemplate);
                    return true;
                } catch (Exception e) {
                    WebElement categoryTemplate = driver.findElement(By.xpath("//div[contains(text(),'" + categoryName + "')]//../div/button"));
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", categoryTemplate);
                    categoryTemplate.click();
                    WebElement InsertTemplate = driver.findElement(By.xpath("//div[text()='" + templateName + "']/..//button[@aria-label='Insert']"));
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", InsertTemplate);
                    return true;
                }
            }
        } catch (Exception e) {
            log.info("Not found category or template");
            return false;
        }
    }

    @Step("Insert Email Template with Attachments")
    public void Insert_Email_Template_with_Attachments(String insertTemplateEmail) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            //search Email Template with Attachments
            WebElement searchField = driver.findElement(By.xpath("//*[@id=\"tab__2\"]/div[2]/div/div/div/div/div/md-input-container/input"));
            if (searchField.isDisplayed()) {
                log.info("Inserting Email Template with Attachments.");
                searchField.click();
                searchField.sendKeys(insertTemplateEmail);
            } else {
                log.info("Cannot find to Search field.");
            }

            //Click Preview
            List<WebElement> Buttons = driver.findElements(By.xpath("//*[@id='templates-md-content']/md-virtual-repeat-container/div/div[2]/div[3]/div/div[2]/span[1]/button"));
            for (WebElement Button : Buttons) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", Button);
                if (Button.isDisplayed()) {
                    Button.click();
                }
            }

            //Click Insert
            WebElement BtnInsert = driver.findElement(By.xpath("//*[@id=\"tab__2\"]/div[2]/div/div/div/div[2]/div[6]/button[2]"));
            if (BtnInsert.isDisplayed()) {
                log.info("Click Insert button");
                BtnInsert.click();
            } else {
                log.info("Cannot find Insert button.");
            }


            //Click Cancel
            WebElement BtnCancel = driver.findElement(By.xpath("//*[@id=\"tab__2\"]/div[2]/div/div/div/div[2]/div[6]/button[1]/span"));
            if (BtnCancel.isDisplayed()) {
                log.info("Click Cancel button");
                BtnCancel.click();
            } else {
                log.info("Cannot find Cancel button.");
            }

            wait(1);
        } catch (Exception e) {
            // To send exception to log file
            log.info("Insert Email Template with Attachments is Failed:", e);
            e.printStackTrace();
        }
    }

    @Step("Delete All Attachments")
    public void Delete_All_Attachments() {
        try {
            List<WebElement> attachments = driver.findElements(By.xpath("//div[contains(@class,'file-attachment layout-row')]"));
            log.info("Number of attachments:" + attachments.size());
            for (int i = 0; i < attachments.size(); i++) {
                log.info("The attachment name" + i + ":" + attachments.get(i).getAttribute("aria-label"));
                wait.until(ExpectedConditions.elementToBeClickable(btnDelete));
                btnDelete.click();
                //wait 2 seconds
                Thread.sleep(2000);
            }
        } catch (Exception e) {
            log.info("Delete All Attachments are Failed:", e);
            e.printStackTrace();
        }
    }

    @Step("isAlertPresent")
    public boolean isAlertPresent(String messageNotification) {
        try {
            driver.switchTo().alert();
            WebElement Error = driver.findElement(By.xpath("//ul[@class='toast__list']//span[contains(text(),'" + messageNotification + "')]"));
            if (Error.isDisplayed()) {
                return true;
            }
        } catch (Exception e) {
            log.info("The error is not display");
        }
        return false;
    }

    @Step("Verify suggest response is inserted after retrieve draft email")
    public boolean Check_Email_Body_Is_Displayed_Correctly_After_Retrieve_Draft_Email(String EmailBodyExpected) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        boolean b = false;
        try {
            List<WebElement> EmailBody = driver.findElements(By.xpath("//cc-email-editor[@class='ng-pristine ng-untouched ng-valid layout-column flex ng-not-empty']//div[@id='email--textarea']"));
            for (WebElement emailBody : EmailBody) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", emailBody);
                log.info("Inside emailBody for loop");
                if (emailBody.isDisplayed()) {
                    String Emailbody = emailBody.getText();
                    log.info("Email Body : " + Emailbody);
                    log.info("Email Body Expected :" + EmailBodyExpected);
                    log.info("Verify email body contains email body expected ");
                    if (Emailbody.contains(EmailBodyExpected)) {
                        log.info("Email Body show as expected");
                        return true;
                    } else {
                        log.info("Email expected is not found");
                        return false;
                    }
                }
            }
        } catch (Exception e) {
            log.info("Error in verify email body", e);
        }
        return b;
    }

    @Step("Focus on Chrome")
    public void focusChrome() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        ((JavascriptExecutor) driver).executeScript("window.focus();");
    }

    @Step("Create a text signature")
    public void CreateATextSignature(String option, String textSignature, boolean autoInsert) throws InterruptedException {
        List<WebElement> emailSignatures = driver.findElements(By.xpath("//div[@id=\"ow_settings_tabs\"]//span[text()=\"Email Signature\"]"));
        List<WebElement> optionSignatures = driver.findElements(By.xpath("//span[text()=\"HTML\"]"));
        List<WebElement> textAreas = driver.findElements(By.xpath("//div[@id=\"email--textarea\"]"));
        if (option.equals("Plain")) {
            optionSignatures = driver.findElements(By.xpath("//span[text()=\"PLAIN\"]"));
            textAreas = driver.findElements(By.xpath("//textarea[@class=\"text-editor--textarea\"]"));
        }
        List<WebElement> saveSignatures = driver.findElements(By.xpath("//md-content[@class=\"email-signature-composer _md\"]//text-idle[text()=\"Save\"]"));
        for (WebElement emailSignature : emailSignatures) {
            if (emailSignature.isDisplayed()) {
                emailSignature.click();
                this.wait(2);
                break;
            }
        }
        for (WebElement optionSignature : optionSignatures) {
            if (optionSignature.isDisplayed()) {
                if (checkElementVisible(optionSignature, driver)) {
                    log.info("Click html email Signature displayed: " + optionSignature);
                    optionSignature.click();
                    this.wait(2);
                } else {
                    log.info("This html email Signature displayed: " + optionSignature);
                }
                for (WebElement textArea : textAreas) {
                    if (textArea.isDisplayed()) {
                        textArea.sendKeys(Keys.chord(Keys.CONTROL, "a"));
                        this.wait(1);
                        textArea.sendKeys(Keys.chord(Keys.DELETE));
                        this.wait(1);
                        log.info("Input html email Signature");
                        textArea.sendKeys(textSignature);
                        this.wait(2);
                    }
                }
            }
        }
        List<WebElement> checkBoxs = driver.findElements(By.xpath("(//md-checkbox[contains(@aria-label,'Automatically insert my signature in all emails')])"));
        for (WebElement checkBox : checkBoxs) {
//            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", checkBox);
            if (checkBox.isDisplayed()) {
                if (autoInsert) {
                    if (!checkBox.getAttribute("aria-checked").equals("true")) {
                        checkBox.click();
                    }
                } else {
                    if (checkBox.getAttribute("aria-checked").equals("true")) {
                        checkBox.click();
                    }
                }
            }
        }
        for (WebElement saveSignature : saveSignatures) {
            if (saveSignature.isDisplayed()) {
                log.info("Save email Signature");
                saveSignature.click();
                this.wait(2);
                break;
            }
        }

    }

    @Step("Insert and verify text signature")
    public boolean insert_and_verify_signature(String option, String expectedSignature) {
        WebElement insertSignature = driver.findElement(By.xpath("//span//a[text()=\"Insert Signature\"]"));
        log.info("Insert email Signature");
        insertSignature.click();
        this.wait(2);
        if (option.equals("Plain")) {
            WebElement messageBody = driver.findElement(By.xpath("(//textarea[@class='text-editor--textarea'])[3]"));
            if (messageBody.getAttribute("value").contains(expectedSignature)) {
                log.info("Signature appears in email body content");
                return true;
            } else {
                log.info("Signature does not appear in email body content");
                return false;
            }
        } else {
            WebElement messageBody = driver.findElement(By.xpath("(//div[@id='email--textarea'])[3]"));
            if (messageBody.getText().contains(expectedSignature)) {
                log.info("Signature appears in email body content");
                return true;
            } else {
                log.info("Signature does not appear in email body content");
                return false;
            }
        }
    }

    @Step("Cancelling Adhoc email")
    public void Cancel_Adhoc_Email() {
        try {
            WebElement cancelButton = driver.findElement(By.xpath("//button[@puppeteer-id='cancel-button--email-widget']"));
            cancelButton.click();
            this.wait(1);
            log.info("Click End Interaction");
            driver.findElement(By.xpath("//button[.='End Interaction']")).click();


        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.info("No buttons cancel found");
        }

    }

    public void Close_Adhoc_Email() {
        try {
            driver.findElement(By.xpath("//button[@ng-click='end()']")).click();
            wait(1);
            driver.findElement(By.xpath("//button[.='End Interaction']")).click();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.info("No buttons cancel found");
        }

    }

    @Step("Verify button is disabled or not")
    public boolean isDisable(WebElement element) {
        if (!element.isEnabled()) {
            log.info("Button was disable");
            return true;
        } else {
            log.info("Button was enable");
            return false;
        }
    }

    @Step("Set Defer Time with date, hour, minute")
    public void setDeferTime(String deferBydate, String deferByHour, String deferByMin, String resonCodeName, boolean deferAction) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        wait.until(ExpectedConditions.elementToBeClickable(Defer)).click();
        wait(2);
        if (!resonCodeName.isEmpty()) {
            log.info("Select for reason defer.");
            WebElement eSearchRC = driver.findElement(By.xpath("//div[@id='defer_left-panel']//md-input-container//input[@ng-model='query']"));
            eSearchRC.click();
            eSearchRC.sendKeys(resonCodeName);

            WebElement sResultSearch = driver.findElement(By.xpath("//md-radio-button[@aria-label='" + resonCodeName + "']"));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", sResultSearch);
            Thread.sleep(2000);
            sResultSearch.click();
            Thread.sleep(2000);
        }
        wait.until(ExpectedConditions.elementToBeClickable(CustomDefer)).click();

        Enterdate.sendKeys(Keys.chord(Keys.CONTROL, "a"));
        Enterdate.sendKeys(deferBydate);

        Enterhour.sendKeys(Keys.chord(Keys.CONTROL, "a"));
        Enterhour.sendKeys(deferByHour);

        Enterminutes.sendKeys(Keys.chord(Keys.CONTROL, "a"));
        Enterminutes.sendKeys(deferByMin);

        if (deferAction) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", ClickDefer);
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", ClickDefer);
        }
    }

    @Step("Verify defer button is grayed out or not")
    public boolean checkDeferButtonGrayOut() {
        return isDisable(ClickDefer);
    }

    @Step("Click Extend time")
    public void clickExtendTime() {
        wait.until(ExpectedConditions.elementToBeClickable(btnExtendACW)).click();
    }

    @Step("Verify the widget template have display or not")
    public boolean isWidgetTemplate() {
        try {
            if (widgetTemplate.isDisplayed()) {
                log.info("The widget template is display");
                return true;
            }

        } catch (Exception e) {
            log.info("The widget template is not display");
        }
        return false;
    }

    @Step("Move the pointer end of the content")
    public void Move_the_pointer_end_of_the_content() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            List<WebElement> checkTexts = driver.findElements(By.xpath("(//div[@puppeteer-id='email-widget--textarea'])[3]"));
            for (WebElement checkText : checkTexts) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", checkText);
                if (checkText.isDisplayed()) {
                    checkText.click();
                    this.wait(1);
                    checkText.sendKeys(Keys.PAGE_DOWN);
                    this.wait(1);
                }
            }
        } catch (Exception e) {
        }
    }

    @Step("Verify the position of pointer after pressing the Insert Signature ")
    public boolean Verify_the_position_of_pointer(String sTextInsert, String sExpectedText) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        List<WebElement> checkTexts = driver.findElements(By.xpath("(//div[@puppeteer-id='email-widget--textarea'])[3]"));
        String sCurrentText = null;
        for (WebElement checkText : checkTexts) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", checkText);
            if (checkText.isDisplayed()) {
                log.info("Continue typing a short text to check the pointer");
                log.info("Text is: " + checkText.getText());
                this.wait(2);
                checkText.sendKeys(sTextInsert);
                Thread.sleep(1000);
            }
            WebDriverWait wait = new WebDriverWait(driver, 10);
            sCurrentText = wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("(//div[@puppeteer-id='email-widget--textarea'])[3]")))).getText();
            log.info("Text actual= " + sCurrentText);

            if (sCurrentText.equals(sExpectedText)) {
                log.info("The position of the pointer is kept at the email signature inserted");
                return true;
            } else {
                log.info("The position of the pointer is not kept at the email signature inserted");
                return false;
            }
        }
        return false;
    }

    @Step("Check size of attachment displayed on WS or tooltip of attachment")
    public boolean Verify_Size_Of_Attachment_Displayed() {
        boolean b = false;
        try {
            List<WebElement> SizeAttachment = driver.findElements(By.xpath("//div[contains(@class,'file-attachment__size')]"));
            wait(1);
            if (SizeAttachment.size() > 0) {
                log.info("Size of attachment displayed on WS");
                return true;
            } else {
                log.info("Size of attachment not displayed");
            }
        } catch (Exception e) {
            log.info("Size of attachment not displayed", e);
            e.printStackTrace();
        }
        return b;
    }

    @Step("Verify Name Attachments Display")
    public boolean Verify_Attachment_Name_On_Tooltip(List<String> attachments) {
        List<WebElement> elAttachments = driver.findElements(By.xpath("//div[contains(@class,'file-attachment ')]"));
        List<String> value = new ArrayList<String>();
        for (WebElement Attachments : elAttachments) {
            value.add(Attachments.getAttribute("aria-label"));
        }
        if (value.equals(attachments)) {
            log.info("Attachment names show up correctly on tooltip");
            return true;
        } else {
            log.info("Attachment names show up incorrectly on tooltip");
            return false;
        }

    }

    @Step("Click button forward")
    public void clickForwardBtn() {
        wait(2);
        wait.until(ExpectedConditions.elementToBeClickable(btnForward)).click();
    }

    @FindBy(xpath = "//button[@class='card-button md-icon-button aoc-defer-in js-defer-in md-button md-ink-ripple']")
    public WebElement btnDeferIcon;

    @Step("Verify the defer icon displays on work card as expected")
    public boolean verifyDeferIconDisplayOrNot() {
        if (btnDeferIcon.isDisplayed()) {
            log.info("The defer icon displays on work card as expected");
            return Boolean.TRUE;
        } else {
            return Boolean.FALSE;
        }
    }

    @Step("Select category template")
    public void selectCategory(String categoryName) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            wait(2);
            WebElement categoryTemplate = driver.findElement(By.xpath("//div[contains(text(),'" + categoryName + "')]//../div/button"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", categoryTemplate);
            categoryTemplate.click();
        } catch (Exception e) {
            log.info("FAILED: No such element");
        }
    }

    @Step("Preview template")
    public void clickBtnPreviewTemplate(String templateName) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            wait(2);
            WebElement previewTemplate = driver.findElement(By.xpath("//div[text()='" + templateName + "']/..//button[@aria-label='Preview']"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", previewTemplate);
            previewTemplate.click();
        } catch (Exception e) {
            log.info("FAILED: No such element");
        }
    }

    @Step("Insert template")
    public void clickBtnInsertTemplate(String templateName) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            wait(2);
            WebElement InsertTemplate = driver.findElement(By.xpath("//div[text()='" + templateName + "']/..//button[@aria-label='Insert']"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", InsertTemplate);
            InsertTemplate.click();
        } catch (Exception e) {
            log.info("FAILED: No such element");
        }
    }

    @Step("verify element enable")
    public boolean verifyEnable(WebElement element) {
        try {
            wait(2);
            if (element.isEnabled()) {
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            log.info("FAILED: No such element");
            return false;
        }
    }

    @Step("Click button cancel Email Adhoc")
    public boolean clickBtnCancelEmailAdhoc() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", btnCancelEmailAdhoc);
            if (!btnCancelEmailAdhoc.isEnabled()) {
                log.info("[click_CancelEmailAdhoc]: Button disable");
                return false;
            } else {
                btnCancelEmailAdhoc.click();
                log.info("Successfully: Click button cancel Email Adhoc]");
                return true;
            }
        } catch (Exception e) {
            log.info("FAILED:[click_CancelEmailAdhoc] Do not such element");
            return false;
        }
    }

    /**
     * <h1>Close_call</h1> This method is insert Image
     */
    @Step("click Insert Image button")
    public void click_Insert_Image() {
        List<WebElement> btnInsertImgs = driver.findElements(By.xpath("//button[@class='toolbar-actions__item aoc-screen-captures']"));
        btnInsertImgs.get(btnInsertImgs.size() - 1).click();
    }

    /**
     * <h1><DeleteSelectedImageinPool/h1>
     *
     * @return none
     */
    @Step("Delete Selected Image in Pool")
    public boolean Click_to_Delete_Selected_Image() {
        try {
            if (existImageList != null) {
                for (WebElement file : existImageList) {
                    List<WebElement> btnList = driver.findElements(By.xpath("//*[@class=\"view-name-dialog\"]//button"));
                    if (btnList.size() == 1) {
                        file.click();
                    }
                    if (imageInUse.isEnabled()) {
                        wait.until(ExpectedConditions.elementToBeClickable(imageInUse)).click();
                        Thread.sleep(1000);
                    } else {
                        return false;
                    }
                }
                return true;
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * <h1><uploadInlineImage1/h1>
     *
     * @return none
     */
    @Step("upload Inline Image in Pool")
    public void uploadInlineImage(String inlineImagePath, boolean seleteImage) throws InterruptedException, AWTException, IOException {
        wait.until(ExpectedConditions.elementToBeClickable(uploadBtn)).click();
        Thread.sleep(1000);
        StringSelection strPath = new StringSelection(inlineImagePath);
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(strPath, null);

        Thread.sleep(1000);
//        Robot rb = new Robot();
//        rb.keyPress(KeyEvent.VK_CONTROL);
//        rb.keyPress(KeyEvent.VK_V);
//
//        rb.keyRelease(KeyEvent.VK_CONTROL);
//        rb.keyRelease(KeyEvent.VK_V);
//        Thread.sleep(1000);
//
//        rb.keyPress(KeyEvent.VK_ENTER);
//        rb.keyRelease(KeyEvent.VK_ENTER);
//        Thread.sleep(3000);
        String scriptPath = System.getProperty("user.dir") + EnvSetup.sAutoITScriptRelativePath + "uploadFile.exe";
        Runtime.getRuntime().exec(scriptPath + " \"" + inlineImagePath + "\"");
        Thread.sleep(3000);

        if (seleteImage == true) {
            wait.until(ExpectedConditions.elementToBeClickable(seleteImageBtn)).click();
            log.info("Insert Selected Image");
            Thread.sleep(3000);
        } else {
            log.info("Don't click to insert Selected Image ");
        }
    }

    @Step("Verify Image On File Explore Window")
    public int Verify_Image_On_File_Explore_Window(List<String> imageNames) {
        int failedFlag = 0;
        try {
            for (String imageName : imageNames) {
                WebElement checkImage = driver.findElement(By.xpath("//md-card-content[contains(text(),'" + imageName + "')]"));
                log.info(String.format("The image: %s", imageName));
                log.info(checkImage.getText());
                String checkImage1 = checkImage.getText();

                if (!checkImage1.contains(imageName)) {
                    log.info(String.format("FAILED: The image: %s did not find.", imageName));
                    failedFlag++;
                } else {
                    log.info(String.format("The image: %s found.", imageName));
                    log.info("All images are still existed");
                }
            }
        }catch (Exception e){
            log.info("No such element");
            failedFlag++;
        }
        return failedFlag;
    }

    /**
     * <h1>Close_call</h1> This method is close File Explore Window
     */
    @Step("Closing contact")
    public void close_File_Explore_Window() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            List<WebElement> Closingcontact = driver.findElements(By.xpath("//*[@id='image-pool']/div[1]/i"));
            for (WebElement closingContact : Closingcontact) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", closingContact);
                log.info("Inside emailBody for loop");
                if (closingContact.isDisplayed()) {
                    closingContact.click();
                }
            }
        } catch (Exception e) {
        }
    }

    @Step("Insert and verify text signature")
    public boolean verify_signature(String option, String expectedSignature) {
        if (option.equals("Plain")) {
            WebElement messageBody = driver.findElement(By.xpath("//cc-email-editor[@puppeteer-id='email-signature--plain']//textarea[@class='text-editor--textarea']"));
            if (messageBody.getAttribute("value").contains(expectedSignature)) {
                log.info("Signature appears in email body content.");
                return true;
            } else {
                log.info("Signature does not appear in email body content.");
                return false;
            }
        } else {
            WebElement messageBody = driver.findElement(By.xpath("//cc-email-editor[@puppeteer-id='email-signature--html']//div[@id=\"email--textarea\"]"));
            if (messageBody.getText().contains(expectedSignature)) {
                log.info("Signature appears in email body content");
                return true;
            } else {
                log.info("Signature does not appear in email body content");
                return false;
            }
        }
    }

    @Step("Highlight some content then press Delete key")
    public void highlightSomeTextAndUsingDeleteKey(String sEmailBodyText) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String query = sEmailBodyText;
        for (WebElement emailBody : getEmailBody) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", emailBody);
            if (emailBody.isDisplayed()) {
                emailBody.getText();
            }
        }
        Actions actions = new Actions(driver);
        actions.sendKeys(Keys.HOME).build().perform();
        int length = query.substring(0, 2).length();
        actions.keyDown(Keys.LEFT_SHIFT);
        for (int i = 0; i < length; i++) {
            actions.sendKeys(Keys.ARROW_RIGHT);
        }
        actions.keyUp(Keys.LEFT_SHIFT);
        actions.sendKeys(Keys.chord(Keys.DELETE));
        actions.build().perform();

    }

    @Step("Click cancel icon in add attach File ")
    public void clickCancelInAttachFile() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        WebElement Cancel = driver.findElement(By.xpath("//i[@aria-label='Cancel']"));
        log.info("Click cancel icon");
        JavascriptExecutor executor = (JavascriptExecutor) driver;
        executor.executeScript("arguments[0].click();", Cancel);

    }

    public Map<String, String> getAttachmentFileWithSize() {
        Map<String, String> attachments = new HashMap<>();
        List<WebElement> elAttachments = driver.findElements(By.xpath("//div[@class=\"file-attachment layout-row\"]"));
        for (WebElement elAttachment : elAttachments) {
            String fileName = elAttachment.findElement(By.xpath(".//div[contains(@class,'file-attachment__name')]")).getText();
            String fileSize = elAttachment.findElement(By.xpath(".//div[contains(@class,'file-attachment__size')]")).getText();
            attachments.put(fileName, fileSize.substring(0, fileSize.length() - 1));
        }
        return attachments;
    }

    @Step("Verify attachments size after agent click forward")
    public int verifyAttachmentSize(Map<String, String> expectedAttachments) {
        Map<String, String> currentAttachments = getAttachmentFileWithSize();
        int failedFlag = 0;
        if (currentAttachments.size() != expectedAttachments.size()) {
            return 1;
        }
        for (String key : expectedAttachments.keySet()) {
            if (!expectedAttachments.get(key).equals(currentAttachments.get(key))) {
                log.info("FAILED. The expected attachment is not in the list");
                failedFlag++;
            }
        }
        return failedFlag;
    }

    @Step("Click tab on Setting")
    public boolean clickOnTabInSettingWidget(String settingTab) {
        try {
            WebElement tab = driver.findElement(By.xpath("//div[@id='ow_settings_tabs']//md-tab-item/span[text()='" + settingTab + "']"));
            wait.until(ExpectedConditions.elementToBeClickable(tab)).click();
            this.wait(1);
            return true;
        }catch (Exception e){
            log.info("No such "+settingTab+" tab on setting");
            return false;
        }

    }

    @Step("Create a image signature")
    public String CreateEmailSignatureWithImage(String imagePath, boolean autoInsert) throws InterruptedException, AWTException, IOException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String imageID = "";
        wait.until(ExpectedConditions.elementToBeClickable(htmlSignatures)).click();

        log.info("delete the existing Signature");
        htmlTextAreas.sendKeys(Keys.chord(Keys.CONTROL, "a"));
        this.wait(1);
        htmlTextAreas.sendKeys(Keys.chord(Keys.DELETE));
        this.wait(1);

        log.info("insert a new signature image");
        insertInlineImage(imagePath);
        Thread.sleep(1000);
        WebElement img = driver.findElement(By.xpath("(//img[@data-hash])[1]"));
        imageID = (img.getAttribute("data-hash"));
        log.info(imageID);

        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", autoInsertSignature);
        if (autoInsert) {
            if (!autoInsertSignature.getAttribute("aria-checked").equals("true")) {
                autoInsertSignature.click();
            }
        } else {
            if (autoInsertSignature.getAttribute("aria-checked").equals("true")) {
                autoInsertSignature.click();
            }
        }
        saveHtmlSignaturesBtn.click();
        this.wait(2);
        return imageID;
    }

    public boolean verifyDeferTimesInterval(int[] deferTimes) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int failedFlag = 0;
        for (int i = 1; i <= 5; i++) {

            String days = "";
            String hours = "";
            String minutes = "";

            int totalMinutes = deferTimes[i - 1];
            WebElement elementTimeDisplay = driver.findElement(By.xpath("//*[@id=\"defer_right-panel\"]/md-content/md-radio-group/span/md-radio-button[" + i + "]/div[2]"));
            String timeDisplay = ((JavascriptExecutor) driver).executeScript("return arguments[0].textContent;", elementTimeDisplay).toString().trim();
            log.info("--Verify time interval--");

            int daysToDisplay = totalMinutes / 1440;
            int hoursToDisplay = (totalMinutes - (daysToDisplay * 1440)) / 60;
            int minutesToDisplay = totalMinutes - (daysToDisplay * 1440 + hoursToDisplay * 60);

            if (daysToDisplay == 1)
                days = String.valueOf(daysToDisplay) + " day ";
            else if (daysToDisplay > 1)
                days = String.valueOf(daysToDisplay) + " days ";

            if (hoursToDisplay == 1)
                hours = String.valueOf(hoursToDisplay) + " hr ";
            else if (hoursToDisplay > 1)
                hours = String.valueOf(hoursToDisplay) + " hrs ";

            if (minutesToDisplay > 0)
                minutes = String.valueOf(minutesToDisplay) + " mins";

            String timeDefer = (days + hours + minutes).trim();
            log.info("Defer time " + i + "= " + timeDefer);
            if (timeDefer.equals(timeDisplay.trim())) {
                log.info("Defer time" + i + " display correctly \n");
            } else {
                log.info("Actual defer time= " + timeDisplay);
                log.info("FAILED.Defer time interval " + i + " display incorrectly .\n");
                failedFlag++;
            }
        }
        Actions action = new Actions(driver);
        action.sendKeys(Keys.ESCAPE).build().perform();
        if (failedFlag == 0) return true;
        else {
            log.info("Failed flag= " + failedFlag);
            return false;
        }


    }

    public void clickDeferByInteractionID(String interationID) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        log.info("Clicking defer button");
        WebElement deferBtn = driver.findElement(By.xpath("//*[@id=\"card-container_wrapper_" + interationID + "\"]/ng-switch/div/ng-include/div/card-actions/div/div/button"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].click();", deferBtn);
        wait(2);
    }

    @Step("verify element display")
    public boolean verifyDisplay(WebElement element) {
        try {
            wait(6);
            if (element.isDisplayed()) {
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            return false;
        }
    }

    @Step("Click button at widget Preview template")
    public void clickBtnInsertPreviewTemplate() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            wait(2);
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", btnInsertTemplate);
            btnInsertTemplate.click();
        } catch (Exception e) {
            log.info("FAILED: No such element");
        }
    }

    @Step("Click button at widget Preview template")
    public void clickBtnCanclePreviewTemplate() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            wait(2);
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", btnCancelTemplate);
            btnCancelTemplate.click();
        } catch (Exception e) {
            log.info("FAILED: No such element");
        }
    }

    @Step("Get text of the body template HTML")
    public String getTextBodyTemplate() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            wait(2);
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", bodyTemplate);
            return bodyTemplate.getText();
        } catch (Exception e) {
            log.info("FAILED: No such element");
            return null;
        }
    }

    @Step("Get text of the body template Plain Text")
    public String getTextBodyTemplatePlainText() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            wait(2);
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", bodyTemplatePlainText);
            bodyTemplatePlainText.sendKeys(Keys.chord(Keys.CONTROL, "a"));
            bodyTemplatePlainText.sendKeys(Keys.chord(Keys.CONTROL, "c"));
            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
            // Get data stored in the clipboard that is in the form of a string (text)
            String text = (String) c.getData(DataFlavor.stringFlavor);
            return text;
        } catch (Exception e) {
            log.info("FAILED: No such element");
            return null;
        }
    }

    @Step("Verify defer button display or not display on WS")
    public boolean verifyDeferButtonDisplayOrNot() {
        boolean b = false;
        try {
            List<WebElement> buttonDefer = driver.findElements(By.xpath("//button[contains(@aria-label,'Defer ')]"));
            wait(1);
            if (buttonDefer.size() > 0) {
                log.info("Defer button is still displaying on WS");
                return true;
            } else {
                log.info("Defer button is not displayed on WS");
            }
        } catch (Exception e) {
            log.info("Defer button is not displayed on WS", e);
            e.printStackTrace();
        }
        return b;
    }

    @Step("Defer email without setting time")
    public void DeferEmailDefault(String resonCodeName) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        log.info("Select Defer option.");
        wait.until(ExpectedConditions.elementToBeClickable(Defer)).click();
        wait(2);
        log.info("Select for reason defer.");
        WebElement eSearchRC = driver.findElement(By.xpath("//div[@id='defer_left-panel']//md-input-container//input[@ng-model='query']"));//input[@class='ng-pristine ng-valid md-input ng-empty ng-touched']
        eSearchRC.click();
        eSearchRC.sendKeys(resonCodeName);

        WebElement sResultSearch = driver.findElement(By.xpath("//md-radio-button[@aria-label='" + resonCodeName + "']"));
        JavascriptExecutor executor = (JavascriptExecutor) driver;
        executor.executeScript("arguments[0].click();", sResultSearch);
        Thread.sleep(2000);
        sResultSearch.click();
        Thread.sleep(2000);

        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", ClickDefer);
        ((JavascriptExecutor) driver).executeScript("arguments[0].click();", ClickDefer);
    }

    @Step("get tooltip of Deferred Interactions")
    public String getTooltipOfDeferredInteractions(int deferredMailNumber, int columNumber ) throws InterruptedException {
        String sFieldText = "";
        Actions actions = new Actions(driver);
        //Open Deferred Interactions
        actions.moveToElement(btnNavDeferredList).click().perform();
        try {
            int line = deferredMailNumber + 1;
            WebElement fieldName = driver.findElement(By.xpath("(//div[@class='cc-defer-list']//tbody/tr)[" + line + "]//td[" + columNumber + "]"));
            wait(1);
            log.info("hover mouse over the defer email");
            actions.moveToElement(fieldName).build().perform();
            wait(1);
            WebElement toolTipElement = driver.findElement(By.xpath("//div[@class='cc-tooltip bottom']"));
            sFieldText = toolTipElement.getText();
            log.info("Tooltip Display: " + sFieldText);
            //Close Deferred List
            actions.moveToElement(btnNavDeferredList).click().perform();
            return sFieldText;
        } catch (Exception e) {
            log.info("No Deferred Email Present");
            //Close Deferred List
            actions.moveToElement(btnNavDeferredList).click().perform();
            return sFieldText;
        }
    }

    @Step("clear the content of a element")
    public void clearContent(WebElement element) {
        try {
            element.clear();
        } catch (Exception e) {
            log.info("Can not clear content");
        }
    }

    @Step("clear the signature")
    public void clearSignatureBody(String type) {
        if (type.equals("HTML")) {
            clearContent(htmlTextAreas);
        } else if (type.equals("Plain")) {
            clearContent(plainTextAreas);
        }
    }

    @Step("Choose the type of Signature")
    public void chooseKindOfSignature(String type) {
        try {
            WebElement tab = driver.findElement(By.xpath("//md-tab-item/span[text()='" + type + "']"));
            wait.until(ExpectedConditions.elementToBeClickable(tab)).click();
        } catch (Exception e) {
            log.info("Can not Choose the signature type");
        }
    }

    @Step("Mouse to this element")
    public void moveMouseToElement(WebElement element) {
        try {
            Actions actions = new Actions(driver);
            actions.moveToElement(element).perform();
        } catch (Exception e) {
            log.info("Can not move mouse to this element");
        }
    }

    @Step("Get text of element")
    public String getTextOfElement(WebElement element) {
        try {
            return element.getText();
        } catch (Exception e) {
            log.info("Cannot get text of element");
            return null;
        }
    }

    @Step("Verify the string inputted into body of Signature or not")
    public boolean verifyStringInputtedIntoBodyArea(String textValue) {
        String bodyContent = getTextOfElement(htmlTextAreas);
        log.info("The content of body signature: " + bodyContent);

        String saveContent = getTextOfElement(saveHtmlSignaturesBtn);
        log.info("The content of save button: " + saveContent);
        if (saveContent.contains(textValue) || (!bodyContent.contains(textValue))) {
            return false;
        } else {
            return true;
        }
    }

    @Step("Send text into body of Signature")
    public boolean sendTextToSignature(String type, String textValue, boolean saveSignature) {
        boolean result = false;
        try {
            if (type.equals("Plain")) {
                plainTextAreas.clear();
                sendKeys(driver, plainTextAreas, textValue);
                if (saveSignature) {
                    savePlainSignaturesBtn.click();
                }
            } else {
                htmlTextAreas.clear();
                sendKeys(driver, htmlTextAreas, textValue);
                if (saveSignature) {
                    saveHtmlSignaturesBtn.click();
                }
            }
            result = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }


    @FindBy(xpath = "//button[.='CANCEL']")
    public WebElement dialogBtnCANCELSendEmail;

    @Step("Click ButtonConfirmSendEmail")
    public void clickButtonConfirmSendEmail(WebElement element) throws InterruptedException {
        Thread.sleep(10000);
        if (element.isDisplayed()) {
            log.info("Click button");
            element.click();
        } else {
            log.info("Cannot find button");
        }
    }

    @Step("Agent click Send button ")
    public void clickSendbutton() throws InterruptedException {
        Thread.sleep(3000);
        if (email_send.isDisplayed()) {
            log.info("Click for Send button");
            email_send.click();

            if(driver.findElements(By.xpath("//button[.='OK']")).size()==1){
                clickButtonConfirmSendEmail(dialogBtnOKSendEmail);
            }
            Thread.sleep(1000);
        } else {
            log.info("Cannot find to Send button");
        }
    }

    @Step("Get list attachment of template")
    public List<String> getListAttachmentTemplate() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        List<String> list = new ArrayList<String>();
        try {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", attachmentTemplate);
            WebElement nameAttachment = driver.findElement(By.xpath("//div[@puppeteer-id='template-details__file-attachment']/div[1]"));
            int i = 2;
            while (nameAttachment.isDisplayed()) {
                list.add(nameAttachment.getText());
                nameAttachment = driver.findElement(By.xpath("(//div[@puppeteer-id='template-details__file-attachment']/div[1])[" + i + "]"));
                i++;
            }
        } catch (Exception e) {
            return list;
        }
        return list;
    }


    @Step("Get list attachment of email widget")
    public List<String> getListAttachmentEmailWidget() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        List<String> list = new ArrayList<String>();
        try {
            wait(3);
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", elAttachments);
            for (WebElement attactment : elAttachments) {
                list.add(attactment.getText());
            }
        } catch (Exception e) {
            return list;
        }
        return list;
    }

    @Step("Getting Interaction ID of retrieved email base on customer email")
    public String getInteractionIdOfRetrievedEmail(String custEmail) {
        log.info("------------------------Getting the ID of the retrieved email WorkCard on the agent Workspace------------------------");
        String ID = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@aria-label='ACTIVE INCOMING EMAIL interaction " + custEmail + "']/card-container"))).getAttribute("interaction-id");
        return ID;
    }

    @Step("Getting tool tip of defer icon on email workcard")
    public String getTooltipOfDeferIconInWorkCard(String iID) throws InterruptedException {

        String sFieldText = "";
        Actions actions = new Actions(driver);
        try {
            WebElement deferIcon = driver.findElement(By.xpath("//*[@id=\"card-container_wrapper_" + iID + "\"]/ng-switch/div/ng-include/div/card-header/span[@class='card__header-icon aoc-defer-inbox']"));
            wait(1);
            log.info("hover mouse over the defer icon on email work card");
            actions.moveToElement(deferIcon).build().perform();
            wait(1);
            sFieldText = deferIcon.getAttribute("aria-label");
            log.info("Tooltip defer icon display: " + sFieldText);

            return sFieldText;
        } catch (Exception e) {
            log.info("No Deferred Email Present");
            return sFieldText;
        }
    }

    @Step("Insert a exist image in pool")
    public String insertExistImageInPool() {
        String result = "";
        try {
            if (existImageList.size() != 0) {

                List<WebElement> btnList = driver.findElements(By.xpath("//*[@class=\"view-name-dialog\"]//button"));
                if (btnList.size() == 1) {
                    existImageList.get(0).click();
                }
                WebElement image = driver.findElement(By.xpath("(//md-grid-tile//md-card-content)[1]"));
                result = image.getAttribute("aria-label");
                Thread.sleep(1000);
                wait.until(ExpectedConditions.elementToBeClickable(seleteImageBtn)).click();
            } else {
                log.info("There is no image in pool, please upload it before running this method");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }


    @Step("Verify defer reason display or not display on WS")
    public boolean verifyDeferReasonDisplayOrNot(String resonCodeName) {
        boolean b = false;
        try {
            log.info("Search Deferr Reason on WS");
            WebElement eSearchRC = driver.findElement(By.xpath("//div[@id='defer_left-panel']//md-input-container//input[@ng-model='query']"));
            eSearchRC.click();
            eSearchRC.sendKeys(resonCodeName);
            List<WebElement> lResultSearch = driver.findElements(By.xpath("//md-radio-button[@aria-label='" + resonCodeName + "']"));
            wait(5);
            if (lResultSearch.size() > 0) {
                return true;
            }
        } catch (Exception e) {
            log.info("FAILED: Defer reason is not displayed on WS", e);
            e.printStackTrace();
        }
        return b;
    }

    @Step("Click element")
    public void clickElement(WebElement element) {
        try {
            wait(2);
            element.click();
            wait(2);
        } catch (Exception e) {
            log.info("FAILED: No such element");
        }
    }

    public void scrollToAndClickElement(WebElement element){
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
        if (element.isDisplayed()) {
            element.click();
        }
    }

    public String getImageSrc() {
        wait(2);
        if (elInlineImageInsert.isDisplayed()) {
            return (elInlineImageInsert.getAttribute("src"));
        }
        return "FAILED: Not found the inline image";
    }

    public int verifyInlineImageOnWS(String expectedImageSrc) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int failedFlag = 0;

        String actualImageSrc = "";
        try {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", elInlineImageTranscript);
            if (elInlineImageTranscript.isDisplayed()) {
                actualImageSrc = elInlineImageTranscript.getAttribute("src");
                if (expectedImageSrc.equalsIgnoreCase(actualImageSrc))
                    return 0;
            }
        } catch (Exception ex) {
            log.info("FAILED: Not found the expected inline image");
            failedFlag++;
            ex.printStackTrace();
        }
        return failedFlag;
    }

    public void openPreviousEmailInCustomerHistory(String UserFromEmail) {
//        wait(2);
        Click_Widget("Customer_Details");
        wait.until(ExpectedConditions.elementToBeClickable(btnOpenPreviousCHSEmail));
        btnOpenPreviousCHSEmail.click();
        wait(2);
    }

    public void closeCustomerJourneyTranscript() {
//        wait(2);
        wait.until(ExpectedConditions.elementToBeClickable(btnCloseCustomerJourney)).click();
    }

    public boolean VerifyElementToBeClickable(WebElement element) {
        try {
            WebDriverWait wait = new WebDriverWait(driver, 5);
            wait.until(ExpectedConditions.elementToBeClickable(element));
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public boolean VerifyElementVisibility(WebElement element) {
        try {
            WebDriverWait wait = new WebDriverWait(driver, 5);
            wait.until(ExpectedConditions.visibilityOf(element));
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    @Step("get Subject")
    public String getSubject() {
        try {
            String subject = null;
            WebElement Subject = driver.findElement(By.xpath("//*[@id=\"ow_Email_Field_Subject\"]"));
            subject = Subject.getAttribute("aria-label");
            log.info("get text subject = " + subject);
            return subject;
        } catch (Exception e) {
            log.info("get Subject Failed:", e);
            e.printStackTrace();
            return null;
        }
    }

    public int verifiedEmailBodyOnTheCustomerJourneyWithoutAttachment(String sEmailBodyText) {
        int failedFlag = 0;
        WebElement journeyEmailDetailsContent;
        try {
            journeyEmailDetailsContent = driver.findElement(By.xpath("//p[@class=\"email-body-content\"]"));
        } catch (Exception e) {
            journeyEmailDetailsContent = driver.findElement(By.xpath("//*[@class=\"modal-body ps\"]"));
        }
        log.info("Content: " + journeyEmailDetailsContent.getText());
        if (!journeyEmailDetailsContent.getText().contains(sEmailBodyText)) {
            failedFlag++;
            log.info("FAILED. Email \"Body\" on Transcript show incorrectly");
        }
        log.info("INFO. The message exist on Customer Journey Transcript.");

        return failedFlag;
    }

    @Step("Get warning message from File Explorer")
    public String getWarningMessageOnFileExplorer() {
        String result = "";
        try {
            WebElement warnMess = driver.findElement(By.xpath("//*[@class='aoc-warning-filled error-msg']/span"));
            result = warnMess.getText();
        } catch (Exception e) {
            log.info("Failed: Cannot get warning message");
            e.printStackTrace();
        }
        return result;
    }

    /**
     * <h1>switch_To_Email_WorkCard</h1> This method is for selecting workcard base on To Email Address
     *
     * @param toEmailAddress is address need to send to
     */
    @Step("Selecting workcard base on To Email Address")
    public void switch_To_Email_WorkCard(String toEmailAddress) {

        objUtil.wait(10);
        WebElement cust = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[@class='card__header-text']//*[@aria-label='" + toEmailAddress + "']")));
        log.info("Value of required Email card is :" + toEmailAddress);
        cust.click();
        log.info("Email card with address " + toEmailAddress + " is activated");

    }

    public List<String> GetListMailboxInFromAddresses() {
        WebElement fromFieldExpIcon = driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_From']//md-select")); //chrome
        //WebElement fromFieldExpIcon= driver.findElement(By.xpath("//md-select[@aria-label='Select Value']")); firefox?
        ////div[@id='ow_Email_Outbound_From']//span[@class='md-select-icon'] chrome disable outgoing blank
        List<WebElement> lstMailbox = driver.findElements(By.xpath("//md-option[contains(@ng-repeat,'address in fromAddresses')]"));

        log.info("Open and get list mailbox for From address.");
        wait.until(ExpectedConditions.elementToBeClickable(fromFieldExpIcon));
        fromFieldExpIcon.click();
        wait.until(ExpectedConditions.visibilityOfAllElements(lstMailbox));
        int elementSize = lstMailbox.size();
        log.info("Number of mailbox in the From address are : " + elementSize);
        List<String> lstMailboxsNames = new ArrayList<String>();
        for (int i = 0; i < elementSize; i++) {
            String mailboxNames = lstMailbox.get(i).getText();
            lstMailboxsNames.add(i, mailboxNames);
        }
        log.info("Close list mailbox for From address");
        Actions actions = new Actions(driver);
        actions.moveToElement(btnopenemail).click().perform();
        return lstMailboxsNames;
    }

    /**
     * <h1><AttachFileinPool/h1>
     *
     * @return none
     */
    public void AttachFileinPool(boolean AttachBtn, String filePath, boolean Upload) throws InterruptedException, AWTException, IOException {
        if (AttachBtn) {
            wait.until(ExpectedConditions.elementToBeClickable(attachBtn)).click();
            Thread.sleep(3000);
        }
        wait.until(ExpectedConditions.elementToBeClickable(seleteAttachmentBtn)).click();
        Thread.sleep(3000);

        String scriptPath = System.getProperty("user.dir") + EnvSetup.sAutoITScriptRelativePath + "uploadFile.exe";
        Runtime.getRuntime().exec(scriptPath + " \"" + filePath + "\"");
        Thread.sleep(3000);

        if (Upload) {
            wait.until(ExpectedConditions.elementToBeClickable(uploadAttachmentBtn)).click();
        }
        Thread.sleep(3000);
    }

    /**
     * <h1><removeSpecificAttachFileFromPool/h1>
     */
    @Step("remove Specific Attach File From Pool")
    public boolean removeSpecificAttachFileFromPool(String fileName) {
        try {
            WebElement file = driver.findElement(By.xpath("//md-card[@class='bounding _md']//md-card-content[@aria-label='" + fileName + "']"));
            file.click();
            if (btnRemoveinPool.isEnabled()) {
                btnRemoveinPool.click();
                return true;
            } else {
                log.info("Remove button is disable");
                return false;
            }
        } catch (Exception e) {
            log.info("Can not remove the attachment file from the pool");
            return false;
        }
    }

    @Step("Verify the position of inline image")
    public boolean VerifyPositionOfInlineImageAfterInsert(String sExpectedText) throws InterruptedException {
        String sCurrentText = driver.findElement(By.xpath("(//div[@puppeteer-id='email-widget--textarea'])[3]")).getAttribute("innerHTML");
        log.info("HTML content: " + sCurrentText);
        if (sCurrentText.contains(sExpectedText)) {
            return true;
        } else {
            log.info("Failed: The position of the inline image is incorrect");
            return false;
        }
    }

    @Step("Insert email body text in bold and italic")
    public boolean insertEmailBodyHTMLFormatBoldItalic(String bodyText) {
        try {
            Actions act = new Actions(driver);
            this.wait(2);
            log.info("Click button Bold");
            act.click(btnBold).build().perform();
            this.wait(2);
            log.info("Click button Italic");
            act.click(btnItalic).build().perform();
            this.wait(5);
            log.info("Input email body text");
            for (WebElement body : bodyAdhoc) {
                if (body.isDisplayed()) {
                    body.sendKeys(bodyText);
                    break;
                }
            }

            this.wait(3);
            return true;

        } catch (Exception e) {
            log.info("Fail");
            return false;
        }
    }

    @Step("Get warning message on Attach File")
    public String getWarningMessageOnAttachFile() {
        String result = "";
        try {
            WebElement warnMess = driver.findElement(By.xpath("//div[@class='aoc-error-filled error-msg']/span[1]"));
            WebElement sizeExceeded = driver.findElement(By.xpath("//div[@class='aoc-error-filled error-msg']/span[2]"));
            result = warnMess.getText() + " " + sizeExceeded.getText();
        } catch (Exception e) {
            log.info("Failed: Cannot get warning message");
            e.printStackTrace();
        }
        return result;
    }

    public int sendChatToCustomer(String message) {
        int failedFlag = 0;
        try {
//            wait(1);
            log.info(String.format("------------------------Sending message %s From Workspaces-----------------------------------------------------------", message));
            for (WebElement elMessageArea : messageArea) {
                if (elMessageArea.isDisplayed()) {
                    elMessageArea.sendKeys(message);
                    break;
                }
            }
            for (WebElement btnSend : btnSendMessage) {
                if (btnSend.isDisplayed()) {
                    btnSend.click();
//                    wait(2);
                    break;
                }
            }
        } catch (Exception ex) {
//            log.info("FAILED: Chat session is interrupted");
            log.info("FAILED: "+ex);
            failedFlag++;
            ex.printStackTrace();
        }
        return failedFlag;
    }

    public void fillAndCopyPaste(WebElement element1, WebElement element2, String value) {
        Actions actions = new Actions(driver);
        element1.clear();
        element1.sendKeys(value);
        actions.keyDown(Keys.CONTROL).sendKeys("a").keyUp(Keys.CONTROL).build().perform();
        actions.keyDown(Keys.CONTROL).sendKeys("c").keyUp(Keys.CONTROL).build().perform();
        element2.click();
        actions.keyDown(Keys.CONTROL).sendKeys("v").keyUp(Keys.CONTROL).build().perform();

    }

    public Boolean VerifyEmailAddress(String nameField, String emailAddress) {
        switch (nameField) {
            case "To":
                String fieldTo = getTextOfElement(driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_To']//md-chip//div[@aria-label='" + emailAddress + ". Press delete to remove this chip.']")));
                return fieldTo.equals(emailAddress);
            case "Cc":
                String fieldCc = getTextOfElement(driver.findElement(By.xpath("//div[@id='ow_Email_Outbound_CC']//md-chip//div[@aria-label='" + emailAddress + ". Press delete to remove this chip.']")));
                return fieldCc.equals(emailAddress);
            case "Bcc":
                String fieldBcc = getTextOfElement(driver.findElement(By.xpath("//div[@ng-if='showBcc']//md-chip//div[@aria-label='" + emailAddress + ". Press delete to remove this chip.']")));
                return fieldBcc.equals(emailAddress);
            default:
                log.info("No Such case");
                return false;
        }
    }

    @Step("Get detail content on Customer History Search")
    public Map<String, String> getDetailContentOnCHS(int emailNumber, int replayNumber) throws ParseException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        Map<String, String> result = new HashMap<String, String>();
        log.info("Get DATE AND TIME in Customer History Search.");
        WebElement latestTime = driver.findElement(By.xpath("//button[@puppeteer-id='customerHistorySearch-history-results_toggle-interaction-details__" + emailNumber + "']//parent::td/parent::tr/td[1]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", latestTime);
        result.put("Time On Title", latestTime.getText());

        log.info("Get STATUS in Customer History Search.");
        WebElement status = driver.findElement(By.xpath("//button[@puppeteer-id='customerHistorySearch-history-results_toggle-interaction-details__" + emailNumber + "']//parent::td/parent::tr/td[2]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", status);
        result.put("Status", status.getText());

        log.info("Get PRIORITY in Customer History Search.");
        WebElement priority = driver.findElement(By.xpath("//button[@puppeteer-id='customerHistorySearch-history-results_toggle-interaction-details__" + emailNumber + "']//parent::td/parent::tr/td[3]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", priority);
        result.put("Priority", priority.getText());

        log.info("Get ID in Customer History Search.");
        WebElement id = driver.findElement(By.xpath("//span[@ng-if='detail.latestActionId']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", id);
        String sID = id.getText().split(":")[1].trim();
        result.put("ID", sID);

        log.info("Get CUSTOMER NAME in Customer History Search.");
        WebElement name = driver.findElement(By.xpath("//span[@ng-if='detail.name']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", name);
        String sName = name.getText().split(":")[1].trim();
        result.put("Name", sName);

        log.info("Get TO in Customer History Search.");
        WebElement to = driver.findElement(By.xpath("//span[@ng-if='detail.to']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", to);
        String sTo = to.getText().split(":")[1].trim();

        log.info("Get FROM in Customer History Search.");
        WebElement lastFrom = driver.findElement(By.xpath("//span[@ng-if='detail.from']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", lastFrom);
        String sLastFrom = lastFrom.getText().split(":")[1].trim();

        WebElement from = driver.findElement(By.xpath("(//span[@class='email-header-from flex'])[" + (replayNumber + 1) + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", from);
        String sFrom = from.getText().split(":")[1].trim();

        log.info("Get CC in Customer History Search.");
        if (driver.findElements(By.xpath("//*[@puppeteer-id='customerHistorySearch-history-details-item__" + emailNumber + "']//md-title-text/span")).size() >= 5) {
            WebElement cc = driver.findElement(By.xpath("//span[@ng-if='detail.cc']"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", cc);
            String sCC = to.getText().split(":")[1].trim();
            result.put("CC", sCC);
        }

        if (replayNumber == 0) {
            result.put("To", sTo);
            result.put("From", sLastFrom);
        } else {
            result.put("From", sFrom);
            if (sFrom.equals(sLastFrom)) {
                result.put("To", sTo);
            } else {
                result.put("To", sLastFrom);
            }
        }
        log.info("Get SUBJECT in Customer History Search");
        WebElement subject = driver.findElement(By.xpath("(//span[@class='email-header-subject flex'])[" + (replayNumber + 1) + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", subject);
        result.put("Subject", subject.getText());

        log.info("Get CONTENT in Customer History Search");
        List<WebElement> contents = driver.findElements(By.xpath("(//div[@id='email--textarea'])[" + (replayNumber + 1) + "]/div"));
        String contentText = null;
        for(WebElement content: contents) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", content);
            contentText += content.getText();
        }
        result.put("Content", contentText);

        log.info("Get TIME stamp in Customer History Search");
        WebElement timeStamp = driver.findElement(By.xpath("(//span[@class='email-header-date flex'])[" + (replayNumber + 1) + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", timeStamp);
        result.put("Time", timeStamp.getText());
        return result;
    }

    @Step("Click open Customer Journey")
    public void clickOpenTranscriptOnCustomerJouney() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        log.info("Open Transcript");
        WebElement transcripIcon = driver.findElement(By.xpath("//div[@class=\"transcriptButtonContainer transcriptLabel\"]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", transcripIcon);
        if (transcripIcon.isDisplayed()) {
            transcripIcon.click();
            this.wait(5);
        } else {
            log.info("Cannot find to Transcript.");
        }
    }

    @Step("Get Timeline Customer Journey")
    public Map<String, String> getTimeOnCustomerJouney() throws ParseException, InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        Map<String, String> result = new HashMap<String, String>();
        List<WebElement> timeLine = driver.findElements(By.xpath("//*[contains(@class, \"cd-timeline-block blockNumber\")]"));

        for (int i = 1; i < timeLine.size() + 1; i++) {
            List<String> timeList = new ArrayList<>();
            timeList.clear();
            WebElement label = driver.findElement(By.xpath("(//*[contains(@class, 'cd-timeline-block blockNumber')])[" + i + "]//*[@class='timelineContentStatus-Label']"));
            List<WebElement> time = driver.findElements(By.xpath("//*[contains(@class, \"cd-timeline-block blockNumber\")][" + i + "]/div[1]/span"));
            for (WebElement t : time) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", t);
                timeList.add(t.getText());
            }
            result.put(label.getText() + " Time", timeList.get(0) + " " + timeList.get(1));
        }

        WebElement title = driver.findElement(By.xpath("//*[@class='summaryPanelTimeLabel']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", title);
        String titleTime = driver.findElement(By.xpath("//*[@class='summaryPanelTimeLabel']")).getText();
        result.put("Time On Title", titleTime);

        clickOpenTranscriptOnCustomerJouney();
        Thread.sleep(2000);
        List<WebElement> TSTime = driver.findElements(By.xpath("//*[contains(text(),'Created: ')]"));
        int i = 1;
        for (WebElement time : TSTime) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", time);
            result.put("Created Time " + i, time.getText().split("Created:")[1].trim());
            i++;
        }
        closeCustomerJourneyTranscript();

        return result;
    }

    public int verifyScreenPopURL(String screenPopURL, boolean clearExternal) {
        int failedFlag = 0;
        wait(10);
        if(clearExternal) {
            closeAllAnotherTab(driver.getTitle());
        }
        for (WebElement iframe : iframes) {
            if (iframe.isDisplayed()) {
                if (!iframe.getAttribute("cc-url").toString().equalsIgnoreCase(screenPopURL)) {
                    log.info("FAILED. The screenpop url is not correct" + iframe.getAttribute("cc-url"));
                    failedFlag++;
                }
            }
        }
        return failedFlag;
    }

    public String getAtrributeOfElement(List<WebElement> element, String attribute){
        try{
            for(WebElement e : element){
                if (e.isDisplayed()) {
                    log.info("Attribute: "+e.getAttribute(attribute));
                    return e.getAttribute(attribute);
                }
            }
            return null;
        }catch (Exception e){
            log.info("Element no exist or element has'nt attribute "+attribute);
            return null;
        }
    }

    public int verifyOriginatingAddressesInteractionDetails(String contextOriginatingAddress) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int failedFlag = 0;
        for (WebElement originatingAddress : originatingAddresses) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", originatingAddress);
            if (originatingAddress.isDisplayed()) {
                if (!contextOriginatingAddress.equalsIgnoreCase(originatingAddress.getText())) {
                    log.info("FAILED. The originating address is not correct");
                    failedFlag++;
                }
            }
        }
        return failedFlag;
    }

    public int verifyDigitNumberInteractionDetails(String digit) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int failedFlag = 0;
        String digitExpected = digit.replaceAll("[^0-9]", "");
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", collectedDigit);
        if (!collectedDigit.isDisplayed() || !digitExpected.equalsIgnoreCase(collectedDigit.getText().replaceAll("[^0-9]", ""))) {
            log.info("FAILED. The digit number is not correct");
            failedFlag++;
        }
        return failedFlag;
    }

    public int verifyAutosuggestContentInEmailBody(String autoSuggest) {
        int failedFlag = 0;
        wait(2);
        for (WebElement body : elEmailBody) {
            if (body.isDisplayed()) {
                if (!body.getText().contains(autoSuggest)) {
                    log.info("FAILED. AutoSuggest content is not presented in email");
                    failedFlag++;
                }
                break;
            }
        }
        return failedFlag;
    }

    @Step("Compose email body with different font size")
    public void Compose_Email_With_Different_Font_Size_Text(String sEmailKeyWord, String fromEmailAddress, String toEmailAddress, Map<String, String> sEmailBodyTexts) throws InterruptedException {
        int line = 0;
        Set<String> setFontSizeID = sEmailBodyTexts.keySet();
        for (String fontSizeId : setFontSizeID) {
            line++;
            switch (fontSizeId) {
                case "Small":
                    switchBetweenFontSize("Small");
                    inputBodyContentAdhocEmailPerLine(sEmailBodyTexts.get(fontSizeId), line);
                    break;
                case "Normal":
                    switchBetweenFontSize("Normal");
                    inputBodyContentAdhocEmailPerLine(sEmailBodyTexts.get(fontSizeId), line);
                    break;
                case "Large":
                    switchBetweenFontSize("Large");
                    inputBodyContentAdhocEmailPerLine(sEmailBodyTexts.get(fontSizeId), line);
                    break;
                case "Huge":
                    switchBetweenFontSize("Huge");
                    inputBodyContentAdhocEmailPerLine(sEmailBodyTexts.get(fontSizeId), line);
                    break;
            }
            this.wait(1);
        }
    }

    /**
     * <h1>Insert_Suggest_Response_Email</h1>
     * This method is used to insert suggest content into email body by email workcard order.
     *
     * @param index              is order of email workcard
     * @param NameSuggestContent is name of the suggest response
     */
    @Step("Agent click suggest content by nth email")
    public void Insert_Suggest_Response_Email_By_Email_Workcard_Order(int index, String NameSuggestContent) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        WebElement SuggestedContent = driver.findElement(By.xpath("(//button//span[text()=\"" + NameSuggestContent + "\"])[" + index + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", SuggestedContent);
        if (SuggestedContent.isDisplayed()) {
            try {
                SuggestedContent.click();
                System.out.println("click on suggest content: " + NameSuggestContent);
            } catch (Exception e) {
                System.out.println("Cannot click auto suggest");
                throw (e);
            }

        } else {
            System.out.println("Auto suggest is not displayed");
        }
    }

    @Step("Verify notification")
    public boolean verifyNotification(String Notification) {
        try {
            wait(10);
            if(bannerNotifications.size() == 0) {
                wait.until(ExpectedConditions.elementToBeClickable(BtnNotifications)).click();
            }
            WebElement notifications = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[contains(text(),'" + Notification + "')]")));
            if (notifications.isDisplayed()) {
                Actions action = new Actions(driver);
                action.sendKeys(Keys.ESCAPE).build().perform();
                return true;
            } else {
                log.info("Exception: no Notification appear as expected");
                return false;
            }
        } catch (Exception e) {
            log.info("Exception: to verify notification ");
            return false;
        }
    }

    @Step("Verify customer id")
    public boolean verifyCustomerIdHistorySearch(int emailNumber, int replayNumber, String expected) {
        log.info("---Verify  customer id  in Customer History Search.");
        WebElement emailSubject = driver.findElement(By.xpath("(//cc-history-detail-item[@puppeteer-id='customerHistorySearch-history-details-item__" + emailNumber + "']//span[@class='email-header-subject flex'])[" + replayNumber + 1 + "]"));
        String actual = emailSubject.getText().split("<")[1].split(">")[0];
        log.info("Expected: " + expected);
        log.info("Actual: " + actual);
        if (!actual.contains(expected)) {
            log.info("FAILED.  customer id show incorrectly");
            return false;
        } else {
            log.info("Email customer id show correctly");
            return true;
        }
    }

    @Step("Remove link ")
    public boolean removeLinkAndVerifyLinkRemoved(String linkAddress) {
        boolean b = false;
        String Link = "//a[@title=\"%s\"]";
        String linkRemove = String.format(Link, linkAddress);

        Actions act = new Actions(driver);
        this.wait(2);
        log.info("Click insert link");
        act.click(elBtnUpdateLink).build().perform();
        this.wait(2);
        log.info("Click remove link");
        act.click(BtnRemoveLink).build().perform();
        this.wait(5);
        log.info("Verify link removed");
        List<WebElement> LinkRemove = driver.findElements(By.xpath(linkRemove));
        wait(5);
        if (LinkRemove.size() > 0) {
            log.info("FAILED. Remove link is not working properly");
            return false;
        } else return true;

    }

    @Step("Download Many Times Attachment Received Display On WS")
    public int DownloadManyTimesAttachmentReceivedDisplayOnWS(int downloadtimes, List<String> filenames) {
        int failedFlag = 0;
        for (int i = 0; i < downloadtimes; i++) {
            failedFlag += DownloadAttachmentReceivedDisplayOnWS(filenames);
            log.info("Downloaded " + i + " times");
        }
        return failedFlag;
    }

    @Step("Download Many Times Attachments On The Customer Journey")
    public int DownloadManyTimesAttachmentsOnTheCustomerJourney(int downloadtimes, int desiredEmail, String sEmailKeyWord, String fromEmailAddress, String toEmailAddress, String sEmailBodyText, List<String> listOfAttachments) {
        int failedFlag = 0;
        OpenEmailDetailsOnTheCustomerJourney(desiredEmail);
        failedFlag += OpenTranscriptAndCompareEmailDetailsOnTheCustomerJourney(sEmailKeyWord, fromEmailAddress, toEmailAddress, sEmailBodyText);
        for (int i = 0; i < downloadtimes; i++) {
            failedFlag += DownloadAttachmentsOnTheCustomerJourney(listOfAttachments);
            log.info("Downloaded " + i + " times");
        }

        WebElement btnTranscripClose = driver.findElement(By.xpath("//button[@class=\"modal-footer-closeButton\"]"));
        if (btnTranscripClose.isDisplayed()) {
            btnTranscripClose.click();
            this.wait(1);
        } else {
            log.info("Cannot find to button Transcript close");
            failedFlag += 1;
        }
        return failedFlag;
    }

    /**
     * <h1><getManyImagesSrc/h1>
     * This method is used to get many ImagesSrc.
     *
     * @return imagesSrc
     */
    public List<String> getManyImagesSrc() {
        List<String> imagesSrc = new ArrayList<String>();
        List<WebElement> elImagesSrc = driver.findElements(By.xpath("//img[@data-hash]"));
        for (WebElement elImageSrc : elImagesSrc) {
            if (elImageSrc.isDisplayed()) {
                imagesSrc.add(elImageSrc.getAttribute("src"));
            }
        }
        return imagesSrc;
    }

    /**
     * <h1>verifyManyImageInlineOnWS</h1>
     * This method is used to select and insert Image in pool.
     *
     * @param imageName
     */
    @Step("Insert a image in pool")
    public void insertImageInPool(String imageName) {
        String result = "";
        try {
            if (existImageList.size() != 0) {
                log.info("Insert image: " + imageName);
                WebElement elImage = driver.findElement(By.xpath("//md-grid-tile//md-card-content[contains(text(),'" + imageName + "')]"));
                wait.until(ExpectedConditions.elementToBeClickable(elImage)).click();
                wait(1);
                wait.until(ExpectedConditions.elementToBeClickable(seleteImageBtn)).click();
            } else {
                log.info("There is no image in pool, please upload it before running this method");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * <h1>verifyManyImageInlineOnWS</h1>
     * This method is used to verify many Image Inline On WS.
     *
     * @param expectedImageSrc
     */
    public int verifyManyImageInlineOnWS(String expectedImageSrc) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int failedFlag = 1;
        String actualImageSrc = "";
        try {
            List<WebElement> elImagesSrc = driver.findElements(By.xpath("//img[@alt='image']"));
            for (WebElement elImageSrc : elImagesSrc) {
//                if (elImageSrc.isDisplayed()) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", elImageSrc);
                actualImageSrc = elImageSrc.getAttribute("src");
                if (expectedImageSrc.equalsIgnoreCase(actualImageSrc)) {
                    return 0;
                }
            }
//            }
        } catch (Exception ex) {
            log.info("FAILED: Not found the elements inline image");
            failedFlag++;
            ex.printStackTrace();
        }
        log.info("FAILED: Not found the expected inline image");
        return failedFlag;
    }

    /**
     * <h1>inputBodyContentEmailAdhoc</h1>
     * This method is used to insert Body Conten Email.
     *
     * @param bodyText
     */
    @Step
    public void inputBodyContentEmailAdhoc(String bodyText) {
        List<WebElement> SendMessageBody = driver.findElements(By.xpath("//div[@puppeteer-id='email-widget--textarea']"));
        for (WebElement sendmsg : SendMessageBody) {
            if (sendmsg.isDisplayed()) {
                log.info("Inserting message body");
                sendmsg.click();
                sendmsg.sendKeys(Keys.ARROW_RIGHT);
                sendmsg.sendKeys(bodyText);
            }
        }
    }

    @Step("Download Attachments received Display On CHS")
    public int DownloadAttachmentReceivedDisplayOnCHS(List<String> filenames) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String home = System.getProperty("user.home");
        String downloadDirectory = home + "/Downloads/";
        deleteFilesInFolder(downloadDirectory, filenames);
        boolean result = Boolean.FALSE;
        int failedFlag = 0;
        filenames.size();
        log.info(filenames.size());

        List<String> downloadedAttachments = new ArrayList<String>();
        for (String filename : filenames) {
            WebElement elAttachment = driver.findElement(By.xpath("(//div[@class='email-inbound-attachments layout-wrap layout-align-start-center layout-row'])[1]//div[@class='file-attachment__name flex-auto'][text()='" + filename + "']"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", elAttachment);
            if (elAttachment.isDisplayed()) {
                elAttachment.click();
                downloadedAttachments.add(elAttachment.getText());
                this.wait(2);
            }
            log.info("Downloaded the attachments: " + downloadedAttachments);
            log.info(String.format("Verify attachment downloaded in %s", downloadDirectory));
            if (!checkAttachmentIsCorrect(downloadedAttachments, filename)) {
                failedFlag++;
                log.info(String.format("FAILED. The attachment: %s not found", filename));
            }
        }
        return failedFlag;
    }

    @Step("Get email subject original")
    public String getSubjectOriginal(String emailSubject) {
        WebElement subjectOriginal = driver.findElement(By.xpath("//div[contains(text(),'RE: " + emailSubject + "')]"));
        if (subjectOriginal.isDisplayed()) {
            String subject = subjectOriginal.getText().split("Subject:")[1].trim();
            log.info(subject);
            return subject;
        } else {
            log.info("FAILED : no such element");
            return null;
        }
    }

    @Step("Verify status interaction")
    public boolean verifyStatusInteractionHistoryseach(String expected) {
        WebElement status = driver.findElement(By.xpath("//table[@class='widget__table widget__table--accessible']//tr[1]//td[2]"));
        String actual = status.getText();
        if (!actual.equals(expected)) {
            log.info("FAILED. Status is: " + actual);
            return false;
        } else {
            log.info("PASSED. Status is show correctly");
            return true;
        }
    }

    @Step("Click End Interaction")
    public void clickEndInteraction(String option) {
        try {
            if (option.equals("End Interaction")) {
                WebElement btnEndInteraction = driver.findElement(By.xpath("//button[.='End Interaction']"));
                log.info("Click End Interaction");
                wait.until(ExpectedConditions.elementToBeClickable(btnEndInteraction)).click();
            } else if (option.equals("Cancel")) {
                WebElement btnCancelEndInteraction = driver.findElement(By.xpath("//md-dialog[@aria-label='End Interaction? Dialog']//button[.='Cancel']"));
                log.info("Click Cancel End Interaction");
                wait.until(ExpectedConditions.elementToBeClickable(btnCancelEndInteraction)).click();
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.info("No buttons found");
        }
    }

    @Step("Press shortcut key")
    public void sendShortcutKey(String key1, String key2) {
        Actions action = new Actions(driver);
        log.info(String.format("Press shortcut: %s + %s", key1, key2));
        action.keyDown(Keys.valueOf(key1)).sendKeys(key2).keyUp(Keys.valueOf(key1)).build().perform();
    }

    @Step("Verify plain text email transcript on Customer History")
    public int VerifyEmailBodyPlainTextOnCustomerHistory(int desiredEmail, String sEmailBodyText) throws IOException, UnsupportedFlavorException {
        int failedFlag = 0;
        log.info("Open Customer Details");
        Click_Widget("Customer_Details");
        this.wait(2);
        log.info("Open email details on Customer History");
        WebElement btnOpenDetailsCH = driver.findElement(By.xpath("(//div[contains(@ng-switch,'customerHistory')]//span[@class=\"aoc-email\"])[" + desiredEmail + "]/../..//button[contains(@type,'button')]"));
        if (btnOpenDetailsCH.isDisplayed()) {
            btnOpenDetailsCH.click();
            this.wait(1);
        } else {
            log.info("FAILED. Cannot find to button Transcript open");
            failedFlag += 1;
        }
        log.info("Copy plain text email transcript in Customer History");
        WebElement emailBodyPlainText = driver.findElement(By.xpath("(//cc-history-detail-item[@item='case.detail'])[" + desiredEmail + "]//textarea[@class='text-editor--textarea']"));
        emailBodyPlainText.sendKeys(Keys.chord(Keys.CONTROL, "a"));
        emailBodyPlainText.sendKeys(Keys.chord(Keys.CONTROL, "c"));
        Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
        // Get data stored in the clipboard that is in the form of a string (text)
        String text = (String) c.getData(DataFlavor.stringFlavor);

        log.info("INFO. Email content on Customer History: " + text);
        log.info("Verify email plain text transcript on Customer History");
        if (!text.contains(sEmailBodyText)) {
            failedFlag++;
            log.info("FAILED. Email Content on Customer History show incorrectly");
        }
        this.wait(2);
        log.info("Close email details on Customer History");
        WebElement btnCloseDetailsCH = driver.findElement(By.xpath("(//div[contains(@ng-switch,'customerHistory')]//span[@class=\"aoc-email\"])[" + desiredEmail + "]/../..//button[contains(@type,'button')]"));
        if (btnCloseDetailsCH.isDisplayed()) {
            btnCloseDetailsCH.click();
            this.wait(1);
        } else {
            log.info("FAILED. Cannot find to button Transcript close");
            failedFlag += 1;
        }
        return failedFlag;
    }

    @Step("Open the table record with date query in Customer History Search")
    public void openRecoardsWithDateQueryInCHS(String dateFrom, String dateTo) {
        Click_Widget("Customer_Search");
        this.wait(2);
        wait.until(ExpectedConditions.elementToBeClickable(searchByCHS));
        searchByCHS.click();
        this.wait(2);
        wait.until(ExpectedConditions.elementToBeClickable(searchByDate));
        searchByDate.click();
        this.wait(2);
        wait.until(ExpectedConditions.elementToBeClickable(inputDateFrom));
        inputDateFrom.clear();
        inputDateFrom.sendKeys(dateFrom);
        this.wait(2);
        wait.until(ExpectedConditions.elementToBeClickable(inputDateTo));
        inputDateTo.clear();
        inputDateTo.sendKeys(dateTo);
        wait.until(ExpectedConditions.elementToBeClickable(btnSearchCHS));
        this.wait(2);
        btnSearchCHS.click();
        this.wait(2);
    }

    public int countEmaiSubjectInTableRecordCHS(String emailSubject) {
        List<WebElement> subjects = driver.findElements(By.xpath("//span[@class='no-hide-whitespaces']"));
        int i = 0;
        if (subjects.size() > 0) {
            for (WebElement subject : subjects) {
                this.wait(1);
                if (subject.getText().equals(emailSubject)) {
                    i++;
                }
            }
        } else {
            log.info("FAILED: No such elemnt");
        }
        return i;
    }

    @Step("Verify Specific Channel Icon On Agent State Summary")
    public boolean verifySpecificChannelIconOnAgentStateSummary(String messageTooltipChannelIcon, String sExpectedColor) {
        WebElement textState = driver.findElement(By.xpath("//span[@aria-label=\"" + messageTooltipChannelIcon + "\"]"));
        String stextState = textState.getAttribute("aria-label");
        if (!textState.isDisplayed()) {
            log.info("FAILED: The state of Channel is not displayed as expected");
            return false;
        } else {
            String borderColor = textState.getCssValue("color");
            String hexColor = org.openqa.selenium.support.Color.fromString(borderColor).asHex();
            log.info("The message is " + stextState + ", color is " + sExpectedColor + ", hex: " + hexColor);
            switch (sExpectedColor.toLowerCase()) {
                case "orange":
                    if (hexColor.equals("#fab107")) {
                        log.info("The color is orange");
                    } else {
                        log.info("FAILED: The color is not orange");
                        return false;
                    }
                    break;
                case "gray":
                    if (hexColor.equals("#5a646e")) {
                        log.info("The color is gray");
                    } else {
                        log.info("FAILED: The color is not gray");
                        return false;
                    }
                    break;
                case "green":
                    if (hexColor.equals("#008000")) {
                        log.info("The color is green");
                    } else {
                        log.info("FAILED: The color is not green");
                        return false;
                    }
                    break;
            }
        }
        return true;
    }

    public void searchCustomerHistoryByKeyword(String key, String value1, String value2) {
        if (searchByCHS.isDisplayed()) {
            wait.until(ExpectedConditions.elementToBeClickable(searchByCHS));
            searchByCHS.click();
        }

        Actions actions = new Actions(driver);
        switch (key) {
            case "Date":
                wait.until(ExpectedConditions.elementToBeClickable(searchByDate));
                searchByDate.click();
                this.wait(2);
                wait.until(ExpectedConditions.elementToBeClickable(inputDateFrom));
                inputDateFrom.clear();
                inputDateFrom.sendKeys(value1);
                this.wait(2);
                wait.until(ExpectedConditions.elementToBeClickable(inputDateTo));
                inputDateTo.clear();
                inputDateTo.sendKeys(value2);
                this.wait(2);
                break;
            case "Customer Email":
                wait.until(ExpectedConditions.elementToBeClickable(searchByCustomerEmail));
//                searchByCustomerEmail.click();
                actions.moveToElement(searchByCustomerEmail).click().perform();
                this.wait(2);
                wait.until(ExpectedConditions.elementToBeClickable(inputCustomerEmail));
                inputCustomerEmail.clear();
                inputCustomerEmail.sendKeys(value1);
                break;
            case "Subject":
                wait.until(ExpectedConditions.elementToBeClickable(searchBySubject));
                searchBySubject.click();
                this.wait(2);
                wait.until(ExpectedConditions.elementToBeClickable(inputSubject));
                inputSubject.clear();
                inputSubject.sendKeys(value1);
                break;
            case "To Address":
                wait.until(ExpectedConditions.elementToBeClickable(searchByToAddress));
                this.wait(2);
                searchByToAddress.click();
                this.wait(2);
                wait.until(ExpectedConditions.elementToBeClickable(inputToAddress));
                inputToAddress.clear();
                inputToAddress.sendKeys(value1);
                break;
        }
        wait.until(ExpectedConditions.elementToBeClickable(btnSearchCHS));
        btnSearchCHS.click();
        this.wait(2);
    }

    @Step("Get description message form Workcard")
    public String getDescriptionMessageFromWorkCard(String strInteractionId) {
        String result = "";
        try {
            WebElement workCard = driver.findElement(By.xpath("//card-container[@interaction-id='" + strInteractionId + "']//*[contains(@class,'card__details-description')]"));
            result = workCard.getText();
            log.info(result);
        } catch (Exception e) {
            log.info("Exception occured when get description label from workcard");
        }
        return result;
    }

    @Step("Get ACW timout")
    public int getACWTimeout(String strInteractionId) {
        int result = 0;
        try {
            WebElement ACWTimeout = driver.findElement(By.xpath("//card-container[@interaction-id='" + strInteractionId + "']//*[contains(@id,'ow_card_timer')]"));
            String timout = ACWTimeout.getText().split(" ")[1];
            if (timout.chars().filter(num -> num == ':').count() == 2) {
                int hour = Integer.parseInt(timout.split(":")[0]);
                int min = Integer.parseInt(timout.split(":")[1]);
                int sec = Integer.parseInt(timout.split(":")[2]);
                result = hour * 3600 + min * 60 + sec;
            } else {
                int min = Integer.parseInt(timout.split(":")[0]);
                int sec = Integer.parseInt(timout.split(":")[1]);
                result = min * 60 + sec;

            }
            log.info("ACW timeout: " + result + "s");
        } catch (Exception e) {
            log.info("Exception occured when get ACW timeout");
        }
        return result;
    }

    @Step("Check Email widget is active or not")
    public boolean checkEmailWigetIsActive(String strInteractionId) {
        try {
            if ((this.eXISTs(driver, By.xpath("//*[@id='email__" + strInteractionId + "']//div[@class='widget widget--email']"), 3) != null)) {
                return true;
            }
        } catch (Exception e) {
            log.info("The Workcard was not active");
            return false;
        }
        return false;
    }

    @Step("check Customer Name On Workcard")
    public boolean checkCustomerNameOnWorkcard(String toEmailAddress) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
//        objUtil.wait(10);
        WebElement cust = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[@class='card__header-text']//*[@aria-label='" + toEmailAddress + "']")));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", cust);
        if (!cust.isDisplayed()) {
            log.info("FAILED: Value of Email address should be :" + toEmailAddress);
            return false;
        }
        log.info("Value of required Email card is :" + toEmailAddress);
        return true;
    }

    public String getTooltipSubjectCHS() {
        String sFieldText = "";
        Actions actions = new Actions(driver);
        try {
            List<WebElement> subjectFields = driver.findElements(By.xpath("//span[@class=\"email-header-subject flex\"]"));
            wait(1);
            for (WebElement subjectField : subjectFields) {
                if (subjectField.isDisplayed()) {
                    wait(1);
                    log.info("Hover over Subject field to view fully");
                    actions.moveToElement(subjectField).build().perform();
                    wait(1);
                }
            }
            WebElement tooltipSubject = driver.findElement(By.xpath("//div[@class='cc-tooltip bottom']"));
            wait(1);
            sFieldText = tooltipSubject.getText();
            log.info("Tooltip display: " + sFieldText);
        } catch (Exception ex) {
            log.info("FAILED. Can not view the tooltip subject");
            ex.printStackTrace();
        }
        return sFieldText;
    }

    /**
     * <h1>searchContactByFieldInCustomerHistory</h1>
     * This method is used to search the contact by field in Customer History.
     *
     * @param sSearchField (Subject/Customer Email/To Address)
     * @param sSearchField
     */
    @Step("Search the contact by field in Customer History")
    public boolean searchContactByFieldInCustomerHistory(String sSearchField, String sContent) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int rowsPerPage = 0;
        Boolean result = true;
        wait.until(ExpectedConditions.elementToBeClickable(btnSearchCustomerHistory)).click();
//        this.wait(2);
//        WebElement clearSearch = driver.findElement(By.xpath("//div[@class='ch-search-field-row layout-row']//md-icon[@class='aoc-end ch-button-clean aoc']"));
//        clearSearch.click();
        this.wait(2);
        WebElement fieldsExpIcon = driver.findElement(By.xpath("//div[@class='widget widget--customer-history']//div[@class='ch-search-field-row layout-row']//span[@class='md-select-icon']"));
        if (fieldsExpIcon.isDisplayed()) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", fieldsExpIcon);
            this.wait(2);
        }
        WebElement searchField = driver.findElement(By.xpath("//div[contains(@class,'md-clickable')]//div[text()='" + sSearchField + "']"));
        searchField.click();
        this.wait(2);
        log.info("Inserting text for Search field " + sSearchField);
        WebElement inputContentSearching;
        if(sSearchField.toLowerCase().equals("to address")){
            inputContentSearching = driver.findElement(By.xpath("*//input[contains(@placeholder,'To Address')]"));
        }
        else{
            inputContentSearching = driver.findElement(By.xpath("*//input[contains(@placeholder,'" + sSearchField + "')]"));
        }
        inputContentSearching.sendKeys(sContent);
        WebElement btnSearchSubmit = driver.findElement(By.xpath("//div[@class='widget widget--customer-history']//button[@puppeteer-id='history-search_submit-search']"));
        wait.until(ExpectedConditions.elementToBeClickable(btnSearchSubmit)).click();
        WebElement elRowsPerPage = driver.findElement(By.xpath("//div//label[contains(text(),\"Rows per page:\")]//..//md-select-value[@class='md-select-value']//div[@class='md-text']"));
        if (elRowsPerPage.isDisplayed()) {
            rowsPerPage = Integer.parseInt(elRowsPerPage.getText());
        } else {
            result = false;
        }
        List<WebElement> lstButtonsInteractionDetails = driver.findElements(By.xpath("//button[contains(@puppeteer-id,'customerHistory-history-results_toggle-interaction-details')]"));
        if (rowsPerPage != lstButtonsInteractionDetails.size()) {
            result = false;
        }
        return result;
    }

    @Step("Open Email content in Customer History")
    public void openEmailContentInCustomerHistory(int emailNumber) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        JavascriptExecutor executor = (JavascriptExecutor) driver;
        log.info("Scroll to email " + emailNumber);
        WebElement btnOpenCHEmail = driver.findElement(By.xpath("//button[@puppeteer-id='customerHistory-history-results_toggle-interaction-details__" + emailNumber + "']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", btnOpenCHEmail);
        log.info("Click on button open detail");
        executor.executeScript("arguments[0].click();", btnOpenCHEmail);
        WebElement transcriptContainerForm = driver.findElement(By.xpath("//*[@puppeteer-id='customerHistory-history-details-item__" + emailNumber + "']"));
        wait.until(ExpectedConditions.visibilityOf(transcriptContainerForm));
    }

    @Step("Click to before contact")
    public void clickBeforeContact() {
        btnBeforeItem.click();
    }

    public int checkToastMessage(int waitTime) {
        int failedFlag = 0;
        int seconds = 0;
        do {
            for (WebElement toast : toastMessages) {
                if (toast.isDisplayed()) {
                    log.info("Error message: " + toast.getText());
                    log.info("FAILED. An error message is displayed.");
                    return ++failedFlag;
                }
            }
            WebElement workCardFocus = driver.findElement(By.xpath("//card-container[@interaction-state=\"ALERTING\"]//cc-timer"));
            String[] mins = workCardFocus.getText().split(":");
            seconds = Integer.parseInt(mins[1]);
            wait(1);
        } while (seconds < waitTime);
        return failedFlag;
    }

    @Step("Verify status contact Customer History")
    public boolean verifyStatusContactCustomerHistory(String expected, int index) {
        boolean b = false;
        List<WebElement> status = driver.findElements(By.xpath("//table[@class='widget__table widget__table--accessible']//tr[@ng-repeat-start][" + index + "]//td[2]"));
        for (WebElement Status : status) {
            if (Status.isDisplayed()) {
                String actual = Status.getText();
                wait(1);
                if (!actual.equals(expected)) {
                    log.info("FAILED. Status is: " + actual);
                } else {
                    return true;
                }
            }
        }
        return b;
    }

    @Step("Get Interaction ID Ad-hoc email")
    public String GetIDAdhocEmail() {
        log.info("------------------------Getting the ID of the Ad-hoc email WorkCard displayed on the agent Workspace------------------------");
        String IDGeneratedDynamically = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@aria-label=\"ACTIVE OUTGOING EMAIL interaction \"]//card-container"))).getAttribute("id");
        String[] IDGeneratedDynamically_trimmed = IDGeneratedDynamically.split("_");
        String interactionID = IDGeneratedDynamically_trimmed[2];
        return interactionID;
    }

    @Step("Get interaction details in customer details")
    public String GetInteractionDetailsInCustomerDetails(String interactionID, String option) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String value = "";
        WebElement elWorkCard = driver.findElement(By.xpath("//div/card-container[@id='card-container_wrapper_" + interactionID + "']"));
        elWorkCard.click();
        this.wait(1);
        Click_Widget("Customer_Details");
        this.wait(2);
        log.info("Getting the " + option + " of interaction details in customer details");
        List<WebElement> elFieldDetails = driver.findElements(By.xpath("//tr/td[contains(text(),'" + option + "')]/following-sibling::td"));
        for (WebElement field : elFieldDetails) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", field);
            if (field.isDisplayed()) {
                value = field.getText();
                break;
            }
        }
        return value;
    }

    @Step("Get code setting on WorkCard")
    public String GetCodeSettingOnWorkCard(String interactionID, String optionCode) {
        String value = "";
        if (optionCode.equals("Work Code")) {
            value = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[@puppeteer-id='card-content__work-code-icon--" + interactionID + "']"))).getAttribute("aria-label");
        } else if (optionCode.equals("Dispostions Code")) {
            value = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[@puppeteer-id='card-content__disposition-code-icon--" + interactionID + "']"))).getAttribute("aria-label");
        }
        return value;
    }

    @Step("Get info on More interaction details On WorkCard")
    public String GetMoreInfoDetailsOnWorkCard(String interactionID, String optionCode) {
        String value = "";
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@id='ow_Card_More_btn_" + interactionID + "']"))).click();
        log.info("Clicking Interaction Details label");
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@id='ow_interaction_details_" + interactionID + "']"))).click();
        wait(2);
        List<WebElement> elFieldDetails = driver.findElements(By.xpath("//div[contains(text(),'" + optionCode + "')]/following-sibling::div[@class='menu-item-value']"));
        for (WebElement field : elFieldDetails) {
            if (field.isDisplayed()) {
                value = field.getText();
                field.click();
                break;
            }
        }
        return value;
    }

    public int verifyEmailBodyInPreviewMode(String expectedContent) {
        int failedFlag = 0;
        log.info("Email body: " + emailBodyInPreviewMode.getText());
        if (!emailBodyInPreviewMode.getText().contains(expectedContent)) {
            failedFlag++;
            log.info("FAILED. Email body is not displayed on Preview mode");
        }
        return failedFlag;
    }

    @Step("Verify priority on Customer History")
    public boolean verifyPriorityOnCustomerHistory(int emailNumber, String expected) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        WebElement status = driver.findElement(By.xpath("((//tr[@ng-repeat-start='case in customerHistory track by $index'])[1]/..//td[3])[" + emailNumber + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", status);
        String actual = status.getText();
        if (!actual.equals(expected)) {
            log.info("FAILED. Priority is: " + actual);
            return false;
        } else {
            return true;
        }
    }

    public void doubleClickOnElement(WebElement element) {
        try {
            Actions actions = new Actions(driver);
            Point location = element.getLocation();
            wait(5);
            actions.moveByOffset(location.getX(), location.getY()).doubleClick().perform();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void selectAllElement(WebElement element) {
        try {
            wait(2);
            element.sendKeys(Keys.chord(Keys.CONTROL, "a"));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public String getTextInTextToDisplayField() throws IOException, UnsupportedFlavorException {
        String text = "";
        try {
            wait(2);
            elTextToDisplay.sendKeys(Keys.chord(Keys.CONTROL, "a"));
            elTextToDisplay.sendKeys(Keys.chord(Keys.CONTROL, "c"));
            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
            text = (String) c.getData(DataFlavor.stringFlavor);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return text;
    }

    public void goToANewLine(WebElement element) {
        try {
            Actions actions = new Actions(driver);
            actions.moveToElement(element).sendKeys(Keys.ARROW_RIGHT).perform();
            element.sendKeys(Keys.ENTER);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    @Step("Get workflow on Customer Journey")
    public List<String> getWorkflowOnCustomerJouney() throws ParseException, InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        List<String> result = new ArrayList<>();
        List<String> workflow = new ArrayList<>();
        List<WebElement> labelLists = driver.findElements(By.xpath("//*[contains(@class, \"cd-timeline-block blockNumber\")]"));
        for (int i = 1; i < labelLists.size() + 1; i++) {
            WebElement label = driver.findElement(By.xpath("(//*[contains(@class, 'cd-timeline-block blockNumber')])[" + i + "]//*[@class='timelineContentStatus-Label']"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", label);
            result.add(label.getText());
            log.info(label.getText());
        }
        workflow = Lists.reverse(result);
        String flow = "Workflow: ";
        for (int i = 0; i < workflow.size(); i++) {
            flow = flow.concat(workflow.get(i));
            if (i < workflow.size() - 1) {
                flow = flow.concat("--->");
            }
        }
        log.info(flow);
        return workflow;
    }

    @Step("Get detail info on Customer Journey")
    public Map<String, String> getDetailOfTranscriptOnCustomerJouney(int numTranscript) throws ParseException, InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        Map<String, String> result = new HashMap<String, String>();
        clickOpenTranscriptOnCustomerJouney();
        Thread.sleep(1000);
        if (numTranscript != 1) {
            moveMouseToElement(driver.findElement(By.xpath("//*[contains(@class,'modal-body')]")));
            WebElement showContent = driver.findElement(By.xpath("(//*[@class=\"expand-more-arrow\"])[" + numTranscript + "]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", showContent);
            showContent.click();
            this.wait(1);
        }

        log.info("Get TIME on Customer Journey");
        WebElement time = driver.findElement(By.xpath("(//*[@class='journey-email-header']//*[contains(text(),'Created: ')])[" + numTranscript + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", time);
        result.put("Created Time", time.getText().split("Created:")[1].trim());

        log.info("Get FROM on Customer Journey");
        WebElement from = driver.findElement(By.xpath("(//*[@class='journey-email-header']//*[contains(text(),'From: ')])[" + numTranscript + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", from);
        result.put("From", from.getText().split("From:")[1].trim());

        log.info("Get TO on Customer Journey");
        WebElement to = driver.findElement(By.xpath("(//*[@class='journey-email-header']//*[contains(text(),'To: ')])[" + numTranscript + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", to);
        result.put("To", to.getText().split("To:")[1].trim());

        log.info("Get SUBJECT on Customer Journey");
        WebElement subject = driver.findElement(By.xpath("(//*[@class='journey-email-header']//*[contains(text(),'Subject: ')])[" + numTranscript + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", subject);
        result.put("Subject", subject.getText().split("Subject:")[1].trim());

        log.info("Get CONTENT on Customer Journey");
        WebElement content = driver.findElement(By.xpath("(//*[contains(@class,'email-body-content')])[" + numTranscript + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", content);
        result.put("Content", content.getText());
        closeCustomerJourneyTranscript();
        return result;
    }

    public void clickInsertLinkBtn() {
        try {
            for (WebElement insertBtn : btnInsertLink) {
                wait(2);
                if (insertBtn.isDisplayed()) {
                    insertBtn.click();
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    @Step("Search and verify detail info of transcript on Customer Journey")
    public boolean SearchAndVerifyDetailOfTranscriptOnCustomerJouney(int numTranscript, String keyword) throws ParseException, InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        boolean result = false;
        searchBoxOnTranscript.clear();
        searchBoxOnTranscript.sendKeys(keyword);
        this.wait(3);

        String match = driver.findElement(By.xpath("//*[@class=\"data-card-filter-matchResult\"]")).getText();
        if (match.contains("Match")) {
            WebElement content = driver.findElement(By.xpath("(//*[@class='modal-dialog']//div[contains(@style,'margin:')])[" + numTranscript + "]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", content);
            String htmlContent = content.getAttribute("innerHTML");
            String keys = "";
            if (keyword.contains(" ")) {
                List<String> lists = Arrays.asList(keyword.split(" "));
                for (String key : lists) {
                    keys = keys.concat("<mark data-markjs=\"true\">" + key + "</mark> ");
                }
                if (htmlContent.contains(keys.trim())) {
                    result = true;
                }
            } else {
                if (htmlContent.contains("<mark data-markjs=\"true\">" + keyword + "</mark>")) {
                    result = true;
                }
            }
        }
        return result;
    }

    @Step("Verify service name displayed correctly on WS")
    public boolean VerifyServiceNameDisplayedOrNot(String serviceEmail) {
        boolean b = false;
        Boolean ServiceName = driver.findElements(By.xpath("//span[@aria-label='" + serviceEmail + "']")).size() > 0;
        if (!ServiceName) {
            log.info("Service name email not displayed on WS");
            return false;
        } else {
            WebElement serviceName = driver.findElement(By.xpath("//span[@aria-label='" + serviceEmail + "']"));
            if (serviceEmail.equals(serviceName.getText())) {
                log.info("Service name is displayed on WS");
                return true;
            } else {
                log.info("Service name displayed incorrectly on ws");
            }
        }
        return b;
    }

    @Step("Verify suggested content widget on WS ")
    public boolean verifySuggestedContentDisplayOrNotOnWS() {
        try {
            if (suggestedContent.isDisplayed()) {
                return true;
            }

        } catch (Exception e) {
            log.info("Suggested Content widget NOT appear");

        }
        return false;

    }


    @Step("Verify rejected email")
    public boolean verifyRejectedEmail(String nameRejectionCode) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            wait(3);
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", btnDetailRejectEmail);
            btnDetailRejectEmail.click();
            Thread.sleep(5000);
            WebElement detailRejectionCode = driver.findElement(By.xpath("//div[@class='md-panel-outer-wrapper md-panel-is-showing']//span[text()='" + nameRejectionCode + "']"));
            if (detailRejectionCode.isDisplayed()) {
                Thread.sleep(2000);
                driver.findElement(By.xpath("//div[@class='md-panel-outer-wrapper md-panel-is-showing']")).click();
                return true;
            } else {
                log.info("FAILED: RejectionCode detail is not display");
                Thread.sleep(2000);
                return false;
            }
        } catch (Exception e) {
            log.info("FAILED: No such element");
            return false;
        }
    }

    @Step("Verify priority on Customer History Search")
    public boolean verifyPriorityOnCustomerHistorySearch(int emailNumber, String expectedPriority) {
        WebElement status = driver.findElement(By.xpath("((//tr[@ng-repeat-start='item in customerSearchResults track by $index'])[1]/..//td[3])[" + emailNumber + "]"));
        String actual = status.getText();
        if (!actual.equals(expectedPriority)) {
            log.info("FAILED. actual priority is: " + actual);
            log.info("expected priority is: " + expectedPriority);
            return false;
        } else {
            return true;
        }
    }

    @Step("Get text body email reply")
    public String getTextBodyEmailReply() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", bodyEmailReply);
            bodyEmailReply.sendKeys(Keys.chord(Keys.CONTROL, "a"));
            bodyEmailReply.sendKeys(Keys.chord(Keys.CONTROL, "c"));
            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
            // Get data stored in the clipboard that is in the form of a string (text)
            String text = (String) c.getData(DataFlavor.stringFlavor);
            log.info("Body email reply: " + text);
            return text;
        } catch (Exception e) {
            log.info("FAILED: No such element body email reply");
            return null;
        }
    }

    @Step("Getting Interaction ID of transfer base on customer email")
    public String getInteractionId0fTransfer(String custEmail) {
        log.info("------------------------Getting the ID WorkCard on the agent Workspace------------------------");
        String ID = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@aria-label='ALERTING INCOMING EMAIL interaction " + custEmail + "']/card-container"))).getAttribute("interaction-id");
        return ID;
    }

    @Step("Insert a image Signature and return source ID")
    public String insertImageSignature() {
        log.info("Insert email Signature");
        insertSignature.click();
        this.wait(1);

        log.info("get email body contains the signature image ID");
        WebElement img = driver.findElement(By.xpath("(//img[@data-hash])[2]"));
        String imageID = (img.getAttribute("data-hash"));
        log.info(imageID);

        return imageID;
    }

    @Step("Checking the alerting workcard is reject email ")
    public boolean checkingForAlertingWorkCardIsRejectEmail() {
        boolean reject = false;
        try {
            log.info("------------------------Waiting for the workcard alert to display------------------------------------------------");
            if ((this.eXISTs(driver, By.xpath("//div[@class='card card--alerting card--email']//div[@aria-label='Your email was rejected']"), 300) != null)) {
                this.wait(2);
                List<WebElement> RejectEmail = driver.findElements(By.xpath("//div[@class='card card--alerting card--email']//div[@aria-label='Your email was rejected']"));
                if (RejectEmail.size() > 0) {
                    log.info("This is an reject email.");
                    reject = true;
                } else {
                    log.info("Not found alerting workcards reject");
                }
            } else {
                Assert.fail("ERROR: Contact not alert on Workspaces");
            }
        } catch (Exception e) {
            log.info("Not found alerting work cards reject", e);
            e.printStackTrace();
        }
        return reject;
    }

    /**
     * <h1>compose_reply_plain_text_Email</h1>
     * This method is used to composes email content for PLAIN text email
     *
     * @param sEmailBodyText Email body content
     */
    @Step("Agent composes email")
    public boolean compose_reply_plain_text_Email(String sEmailBodyText) {
        try {
            bodyEmailPlainTextReply.sendKeys(sEmailBodyText);
            log.info("Compose reply plain text email :" + "\"" + sEmailBodyText + "\"");
            return true;
        } catch (Exception e) {
            log.info("Failed. Compose reply plain text email unsuccessful");
            return false;
        }
    }

    @Step("Double click on workcard")
    public void doubleClickOnWorkCard(int numContact) {
        try {
            Actions actions = new Actions(driver);
            actions.moveToElement(getWorkcards).click().perform();
            actions.doubleClick();
        } catch (Exception e) {
            log.info("FAILED: No found this element");
        }
    }

    @Step("Get and check typing state")
    public boolean getAndVeifyTypingState(int times, String expectedContent) {
        boolean result = false;
        try {
            int i = 0;
            while (i < times) {
                try {
                    List<WebElement> contents = driver.findElements(By.xpath("//*[@class=\"messenger-status layout-align-space-between-center layout-row\"]//span"));
                    for (WebElement content : contents) {
                        if (content.isDisplayed()) {
                            log.info("the state of typing: " + content.getText());
                            if (content.getText().contains(expectedContent)) {
                                result = true;
                                break;
                            }
                        }
                    }
                } catch (org.openqa.selenium.StaleElementReferenceException ex) {
                    i++;
                    continue;
                }
                Thread.sleep(500);
                i++;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return result;
    }

    @Step("Getting Chat body content")
    public int verifyChatBodyContent(String expectedBodyContent) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        wait(2);
        WebElement status = driver.findElement(By.xpath("(//md-content[@puppeteer-id='messages-content__agent-customer']/..//span[contains(text(),'" + expectedBodyContent + "')])[1]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", status);
        String actual = status.getText();
        int failedFlag = 0;
        log.info("The email body content is the same as expected : " + actual);
        if (!actual.contains(expectedBodyContent)) {
            log.info("FAILED. The Chat body content is not the same as expected: " + expectedBodyContent);
            failedFlag++;
        }
        return failedFlag;
    }

    @Step("Verify content message side on Transcript")
    public boolean verifyContentMessageSideOnTranscript(String content, String side) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        boolean result = false;
        try {
            WebElement elcontent = driver.findElement(By.xpath("//*[@class=\"chat-transcript\"]//*[contains(text(),'" + content + "')]/../.."));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", elcontent);
            log.info(elcontent.getAttribute("Class"));
            if (elcontent.getAttribute("class").contains(side)) {
                result = true;
            }
        } catch (Exception e) {
            log.info("FAILED: No found this element");
            result = false;
        }
        return result;
    }

    @Step("Get detail content on Customer History Search channel chat")
    public Map<String, String> getDetailOnCHS(int chatNumber, int replayNumber) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        Map<String, String> result = new HashMap<String, String>();
        log.info("Get DATE AND TIME in Customer History Search.");
        WebElement latestTime = driver.findElement(By.xpath("//button[@puppeteer-id='customerHistorySearch-history-results_toggle-interaction-details__" + chatNumber + "']//parent::td/parent::tr/td[1]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", latestTime);
        result.put("Time On Title", latestTime.getText());

        log.info("Get STATUS in Customer History Search.");
        WebElement status = driver.findElement(By.xpath("//button[@puppeteer-id='customerHistorySearch-history-results_toggle-interaction-details__" + chatNumber + "']//parent::td/parent::tr/td[2]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", status);
        result.put("Status", status.getText());

        log.info("Get PRIORITY in Customer History Search.");
        WebElement priority = driver.findElement(By.xpath("//button[@puppeteer-id='customerHistorySearch-history-results_toggle-interaction-details__" + chatNumber + "']//parent::td/parent::tr/td[3]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", priority);
        result.put("Priority", priority.getText());

        log.info("Get ID in Customer History Search.");
        WebElement id = driver.findElement(By.xpath("//span[@ng-if='detail.latestActionId']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", id);
        String sID = id.getText().split(":")[1].trim();
        result.put("ID", sID);

        log.info("Get CUSTOMER NAME in Customer History Search.");
        WebElement name = driver.findElement(By.xpath("//span[@ng-if='detail.name']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", name);
        String sName = name.getText().split(":")[1].trim();
        result.put("Name", sName);

        log.info("Get FROM in Customer History Search.");
        WebElement from = driver.findElement(By.xpath("//span[@ng-if='detail.from']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", from);
        String sFrom = from.getText().split(":")[1].trim();
        result.put("From", sFrom);

        log.info("Get CONTENT in Customer History Search");
        WebElement content = driver.findElement(By.xpath("(//div[@class='chat-transcript'])[" + (replayNumber + 1) + "]"));
        List<WebElement> spans = driver.findElements(By.xpath("((//div[@class='chat-transcript'])[" + (replayNumber + 1) + "]/span)"));
        String transcript = "";
        int i = 0;
        for(WebElement span : spans){
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", spans.get(i));
            transcript = transcript + "\n" + span.getText();
            i++;
        }
        result.put("Content", transcript);

        log.info("Get TIME stamp in Customer History Search");
        WebElement timeStamp = driver.findElement(By.xpath("(//span[@class='chat-header chat-header-right'])[" + (replayNumber + 1) + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", timeStamp);
        result.put("Time", timeStamp.getText());
        return result;

    }

    @Step("Verify text in Interaction Detail ís in a straight line")
    public int verifyTextInInteractionDetailIsInAStraightLine(String interactionID) {
        int failedFlag = 0;
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@id='ow_Card_More_btn_" + interactionID + "']"))).click();
        log.info("Clicking Interaction Details label");
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@id='ow_interaction_details_" + interactionID + "']"))).click();
        wait(2);

        List<WebElement> elsize = driver.findElements(By.xpath("(//*[@class=\"menu-rounded md-menu-bar-menu md-dense new-menu-content ps\"])[1]/md-menu-item"));
        for (int i = 1; i <= elsize.size(); i++) {
            if (i == 1) {
                WebElement el1 = driver.findElement(By.xpath("(//*[@class=\"menu-rounded md-menu-bar-menu md-dense new-menu-content ps\"])[1]/md-menu-item[" + i + "]//button/span"));
                WebElement el2 = driver.findElement(By.xpath("(//*[@class=\"menu-rounded md-menu-bar-menu md-dense new-menu-content ps\"])[1]/md-menu-item[" + i + "]//md-icon"));
                int checkValue1 = el1.getLocation().getY();
                int checkValue2 = el2.getLocation().getY();
                log.info(el1.getText() + ": " + checkValue1 + ", " + checkValue2);
                if ((checkValue1 + 4) != checkValue2) {
                    failedFlag++;
                    log.info("Failed: Text in 2 column in Interaction Detail are not in a straight line");
                }
            } else {
                WebElement el1 = driver.findElement(By.xpath("(//*[@class=\"menu-rounded md-menu-bar-menu md-dense new-menu-content ps\"])[1]/md-menu-item[" + i + "]/button/div[1]"));
                WebElement el2 = driver.findElement(By.xpath("(//*[@class=\"menu-rounded md-menu-bar-menu md-dense new-menu-content ps\"])[1]/md-menu-item[" + i + "]/button/div[2]"));
                int checkValue1 = el1.getLocation().getY();
                int checkValue2 = el2.getLocation().getY();
                log.info(el1.getText() + checkValue1 + ", " + checkValue2);
                if (checkValue1 != checkValue2) {
                    failedFlag++;
                    log.info("Failed: Text in 2 column in Interaction Detail are not in a straight line");
                }
            }
        }
        return failedFlag;
    }

    public boolean sendChatAutoPhrases(String phrases, String  ID, boolean modify) {
        try {
            wait(2);
            driver.findElement(By.xpath("//div[@interaction-id='"+ID+"']//md-tab-item[text()='Phrases']")).click();
            driver.findElement(By.xpath("//div[@interaction-id='"+ID+"']//input[@placeholder='Search by phrase']")).clear();
            driver.findElement(By.xpath("//div[@interaction-id='"+ID+"']//input[@placeholder='Search by phrase']")).sendKeys(phrases);
            if (modify == false) {
                WebElement autoPhrases = driver.findElement(By.xpath("//div[@interaction-id='"+ID+"']//div//bdi[text()='" + phrases + "']/../../button"));
                autoPhrases.click();
                return true;
            } else {
                WebElement autoPhrases = driver.findElement(By.xpath("//div[@interaction-id='"+ID+"']//div//bdi[text()='" + phrases + "']/../../button"));
                Actions actions = new Actions(driver);
                actions.moveToElement(autoPhrases);
                wait(1);
                WebElement editPhrases = driver.findElement(By.xpath("//div[@interaction-id='"+ID+"']//div//bdi[text()='" + phrases + "']/../..//button[@aria-label='Edit Suggestion']"));
                actions.moveToElement(editPhrases);
                actions.click().build().perform();
                return true;
            }
        } catch (Exception e) {
            log.info("Not found the auto phrases: " + phrases);
            return false;
        }
    }

    public boolean sendChatPagePushURL(String description, String url, String ID) {
        try {
            wait(2);
            driver.findElement(By.xpath("//div[@interaction-id='"+ID+"']//md-tab-item[text()='URLs']")).click();
            driver.findElement(By.xpath("//div[@interaction-id='"+ID+"']//input[@placeholder='Search by url description or address']")).clear();
            driver.findElement(By.xpath("//div[@interaction-id='"+ID+"']//input[@placeholder='Search by url description or address']")).sendKeys(url);
            wait(2);
            WebElement autoPhrases = driver.findElement(By.xpath("//div[@interaction-id='"+ID+"']//div//bdi[text()='" + description + " ']/a[text()='(" + url + ")']/../../../button"));
            autoPhrases.click();
            return true;
        } catch (Exception e) {
            log.info("Not found the page push url: " + url);
            return false;
        }
    }

    @Step("Checking the alerting workcard is approval email ")
    public boolean checkingForAlertingWorkCardIsApproval() {
        boolean approval = false;
        try {
            this.wait(2);
            List<WebElement> x = driver.findElements(By.xpath("//div[@aria-label='E-mail verification is required']"));
            if (x.size() == 1) {
                if (driver.findElements(By.xpath("//button[@ng-click='end()']")).size() != 0) {
                    approval = false;
                } else {
                    log.info("This is an approval email.");
                    approval = true;
                }
            } else if (x.size() > 1) {
                List<WebElement> y = driver.findElements(By.xpath("//button[@ng-click='end()']"));
                int i = y.size() + 1;
                if (i == x.size()) {
                    log.info("This is an approval email.");
                    approval = true;
                }
            } else {
                log.info("Not found alerting workcards approval");
            }
        } catch (Exception e) {
            approval = false;
        }
        return approval;
    }

    @Step("Verify Chat widget is justified aligned")
    public int verifyChatWidgetIsJustifiedAligned(String interactionID) {
        int failedFlag = 0;
        try {
            List<WebElement> elements = driver.findElements(By.xpath("//*[@interaction-id='" + interactionID + "' and @class='widget widget--web-chat']//md-pagination-wrapper"));
            for (WebElement element : elements) {
                if (element.isDisplayed()) {
                    log.info(element.getAttribute("ng-class"));
                    if (!element.getAttribute("ng-class").contains("center")) {
                        failedFlag++;
                        log.info("Failed: Customer name isn't aligned to Center");
                    }
                }
            }
        } catch (Exception e) {
            log.info("FAILED: No found this element");
            failedFlag++;
        }
        return failedFlag;
    }

    @Step("Verify Suggested Content widget is justified aligned")
    public int verifySuggestedContentWidgetIsJustifiedAligned(String interactionID) {
        int failedFlag = 0;
        try {
            WebElement el = driver.findElement(By.xpath("//*[@interaction-id='" + interactionID + "' and @class='widget widget--suggested-content']//md-pagination-wrapper"));
            log.info(el.getAttribute("ng-class"));
            if (!el.getAttribute("ng-class").contains("center")) {
                failedFlag++;
                log.info("Failed: Phrase/URL tab from the Suggested Content widget aren't aligned to Center");
            }
            List<String> checkLists = new ArrayList<>();
            String width;
            List<WebElement> elements = driver.findElements(By.xpath("//*[@interaction-id='" + interactionID + "' and @class='widget widget--suggested-content']//md-pagination-wrapper/md-tab-item"));
            for (WebElement element : elements) {
                width = element.getAttribute("style").split(":")[1].split("px")[0].trim();
                log.info("Width: " + width);
                checkLists.add(width);
            }
            if (!checkLists.get(0).equals(checkLists.get(1))) {
                failedFlag++;
                log.info("Failed: Phrase/URL tab from the Suggested Content widget aren't justified aligned");
            }
        } catch (Exception e) {
            log.info("FAILED: No found this element");
            failedFlag++;
        }
        return failedFlag;
    }

    public List<Map<String, String>> getDataEmailInDeferInteractions(String customerName) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        List<Map<String, String>> mapList = new ArrayList<>();
        try {
            String Name = "";
            String Reason = "";
            String Service = "";
            String Deferred = "";
            this.wait(2);
            wait.until(ExpectedConditions.elementToBeClickable(DeferEmailList)).click();
            List<WebElement> deferList = driver.findElements(By.xpath("//div[@class='defer-table-container']//tr[contains(@aria-label,'" + customerName + "')]"));
            if (deferList.size() > 0) {
                for (int i = 0; i < deferList.size(); i++) {
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", deferList.get(i));
                    String text = deferList.get(i).getAttribute("aria-label");
                    Map<String, String> mapData = new HashMap<>();
                    Name = text.split("Name:")[1].split("<br/>")[0].trim();
                    mapData.put("Name", Name);
                    Reason = text.split("Reason:")[1].split("<br/>")[0].trim();
                    mapData.put("Reason", Reason);
                    Service = text.split("Service:")[1].split("<br/>")[0].trim();
                    mapData.put("Service", Service);
                    Deferred = text.split("Deferred:")[1].split("<br/>")[0].trim();
                    mapData.put("Deferred", Deferred);
                    mapList.add(mapData);
                    this.wait(2);
                }
            }
            Actions action = new Actions(driver);
            action.sendKeys(Keys.ESCAPE).build().perform();
        } catch (Exception e) {
            log.info("FAILED. Please check log.");
        }
        return mapList;

    }

    public boolean verifyDataDisplayForDeferredEmail(String custEmail, String ServiceName, String ReasonCode, int rowIndex) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            String Service = "";
            String Email = "";
            String DefReasonCode = "";
            int flag = 0;
            List<WebElement> listOfRows = driver.findElements(By.xpath("//div[@class='cc-defer-list']//table[@class='widget__table defer-table']/tbody/tr"));
            List<WebElement> listOfCols = driver.findElements(By.xpath("//div[@class='cc-defer-list']//table[@class='widget__table defer-table']/tbody/tr[1]/th"));
            wait(2);
            for (int colIndex = 1; colIndex <= listOfCols.size() - 3; colIndex++) {
                WebElement unique = driver.findElement(By.xpath("//div[@class='cc-defer-list']//table[@class='widget__table defer-table']/tbody/tr[" + rowIndex + "]/td[" + colIndex + "]"));
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", unique);
                wait(1);
                if (colIndex == 1) {
                    log.info(" Getting Email Address: ");
                    Email = unique.getText();
                    if (Email.equalsIgnoreCase(custEmail)) {
                        log.info("Email Display Correctly " + Email);
                    } else {
                        log.info("Email is not  Correct " + Email);
                        ++flag;
                    }
                }
                if (colIndex == 2) {
                    log.info(" Getting Reason Code: ");
                    DefReasonCode = unique.getText();
                    if (DefReasonCode.equalsIgnoreCase(ReasonCode)) {
                        log.info("Reason Code  Display Correctly " + DefReasonCode);
                    } else {
                        log.info("Reason Code is not  Correct " + DefReasonCode);
                        ++flag;
                    }
                }
                if (colIndex == 3) {
                    log.info(" Getting service name: ");
                    Service = unique.getText().trim();
                    if (Service.equals(ServiceName)) {
                        log.info("Service Name display correctly " + Service);
                    } else {
                        log.info("Service Name displayes incorrectly. Actual: " + Service);
                        ++flag;
                    }
                }
            }
            if (flag == 0) {
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            e.printStackTrace();
            log.info("No Deferred Email Present");
            return true;
        }
    }

    @Step("Agent transfer file to customer")
    public void transferFileToCustomer(String attachmentFolderPath, String file) {
        try {
            this.wait(2);
            for (WebElement btnTransfer : btnTransferFile) {
                if (btnTransfer.isDisplayed()) {
                    log.info("Clicking for transfer file button");
                    btnTransfer.click();
                    this.wait(2);
                    String sScriptPath = System.getProperty("user.dir") + EnvSetup.sAutoITScriptRelativePath + "uploadFile.exe";
                    String filePath = attachmentFolderPath + file;
                    wait.until(ExpectedConditions.elementToBeClickable(btnSelectFile)).click();
                    this.wait(2);
                    Runtime.getRuntime().exec(sScriptPath + " \"" + filePath + "\"");
                    this.wait(2);
                    wait.until(ExpectedConditions.elementToBeClickable(btnUploadFile)).click();
                    log.info("Click transfer file successfully");
                }
            }
        } catch (Exception e) {
            log.info("FAILED: No such element");
            e.printStackTrace();
        }


    }

    @Step("Preview draft email")
    public void previewDraftEmail() {
        try {
            wait.until(ExpectedConditions.elementToBeClickable(getPreviewDraftEmail)).click();
            this.wait(5);
        } catch (Exception e) {
            log.info("Can not preview the draft email");
        }
    }

    public boolean verifyTimeTitleOnCHS(int chatNumber, String expectedTime) throws ParseException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        log.info("Verify Time stamp");
        WebElement timeStamp = driver.findElement(By.xpath("//button[@puppeteer-id='customerHistorySearch-history-results_toggle-interaction-details__" + chatNumber + "']//parent::td/parent::tr/td[1]"));
        log.info(timeStamp.getText());
        log.info(expectedTime);
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", timeStamp);
        String format = "M/d/yy" +
                "\nh:mm a";
        Date actualDate = new SimpleDateFormat(format).parse(timeStamp.getText());
        log.info("actualDate: " + actualDate);
        Date expectedDate = new SimpleDateFormat(format).parse(expectedTime);
        log.info("Expected: " + expectedDate);
        if (abs(expectedDate.getTime() - actualDate.getTime()) > 60000) {
            log.info(abs(expectedDate.getTime() - actualDate.getTime()));
            log.info("FAILED.Time stamp show incorrectly ");
            log.info("Expected: " + expectedTime);
            log.info("Actual: " + timeStamp.getText());
            return false;
        }
        return true;
    }

    @Step("Get TIME of Customer Chat on History Search channel chat")
    public Map<String, String> getTimeOnWS(int replayNumber) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        Map<String, String> result = new HashMap<String, String>();
        log.info("Get TIME stamp in Customer History Search");
        WebElement timeStamp = driver.findElement(By.xpath("(//span[@puppeteer-id='message-info__receive-time'])[" + replayNumber + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", timeStamp);
        result.put("Time", timeStamp.getText());
        return result;
    }

    @Step("Get TIME of Agent Chat on History Search channel chat")
    public Map<String, String> getAgentTimeOnCHS(int replayNumber) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        Map<String, String> result = new HashMap<String, String>();
        log.info("Get TIME stamp in Customer History Search");
        WebElement timeStamp = driver.findElement(By.xpath("(//span[@class='chat-header chat-header-right'])[" + (replayNumber + 1) + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", timeStamp);
        result.put("Time", timeStamp.getText());
        return result;
    }

    @Step("Get TIME of Customer Chat on History Search channel chat")
    public Map<String, String> getCustomerTimeOnCHS(int replayNumber) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        Map<String, String> result = new HashMap<String, String>();
        log.info("Get TIME stamp in Customer History Search");
        WebElement timeStamp = driver.findElement(By.xpath("(//span[@class='chat-header chat-header-left'])[" + (replayNumber + 1) + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", timeStamp);
        result.put("Time", timeStamp.getText());
        return result;
    }

    @Step("Get content on Agent Chat History Search channel chat")
    public Map<String, String> getContentOnCHS(int replayNumber) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        Map<String, String> result = new HashMap<String, String>();
        log.info("Get CONTENT in Customer History Search");
//        for(WebElement span : spans){
//            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", spans.get(i));
//            transcript = transcript + "\n" + span.getText();
//            i++;
//        }

        WebElement content = driver.findElement(By.xpath("(//div[@class='chat-transcript'])[" + (replayNumber + 1) + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", content);
        result.put("Content", content.getText());
        return result;
    }

    @Step("Verify timestamp transcript's message on customer history search")
    public boolean verifyTimeStampMessageTranscriptOnCHS(String message, String exTimeStamp) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            WebElement header = driver.findElement(By.xpath("//span[@class='chat-body-preformatted' and contains(text(),'" + message + "')]//..//..//span[contains(@class,'chat-header')]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", header);
            String timeStampActual = header.getText().split("-")[0].trim();
            String format = "M/d/yy h:mm a";
            Date expectedDate = new SimpleDateFormat(format).parse(exTimeStamp);
            Date actualDate = new SimpleDateFormat(format).parse(timeStampActual);
            if (abs(expectedDate.getTime() - actualDate.getTime()) > 60000) {
                log.info("FAILED.Time stamp show incorrectly ");
                log.info("Expected: " + exTimeStamp);
                log.info("Actual: " + timeStampActual);
                return false;
            }
            return true;
        }catch (Exception e){
            log.info("No such element");
            return false;
        }
    }

    @Step("Verify Save button is grayed out or not")
    public boolean checkSaveButtonGrayOut() {
        List<WebElement> saveSignatures = driver.findElements(By.xpath("//button[@class=\"md-raised md-button_high-contrast md-primary progress-button__inner settings-button md-button\"]"));
        for (WebElement saveSignature : saveSignatures) {
            if (saveSignature.isDisplayed()) {
                log.info("checkSaveButtonGrayOut:" + saveSignature.getAttribute("disabled"));
                if (!(saveSignature.getAttribute("disabled") == null)) {
                    log.info("Save button is grayed out");
                    return true;
                }
            }
        }
        return false;
    }

    @Step("Verify Automatically Insert Signature is Enabled or not")
    public boolean checkAutomaticallyInsertSignatureEnabled() {
        List<WebElement> scheckBox = driver.findElements(By.xpath("//md-checkbox[@aria-label= 'Automatically insert my signature in all emails']"));
        for (WebElement checkBox : scheckBox) {
            if (checkBox.isDisplayed()) {
                if ((checkBox.getAttribute("disabled") == null)) {
                    log.info("Automatically Insert Signature is Enabled");
                    return true;
                }
            }
        }
        return false;
    }

    @Step("Verify Automatically Insert Signature is checked or not")
    public boolean checkAutomaticallyInsertSignatureCheck() {
        List<WebElement> sCheckBox = driver.findElements(By.xpath("//md-checkbox[@aria-label= 'Automatically insert my signature in all emails']"));
        for (WebElement checkBox : sCheckBox) {
            if (checkBox.isDisplayed()) {
                log.info("AutomaticallyInsertCheck:" + checkBox.getAttribute("aria-disabled"));
                if (checkBox.getAttribute("aria-checked").equals("true")) {
                    log.info("Automatically Insert Signature is checked");
                    return true;
                }
            }
        }
        return false;
    }

    @Step("Agent switch tab chat with customer when supervisor coaching")
    public boolean agent_switch_tab_chat_with_customer_when_supervisor_coaching(String sCustName) {
        try {
            driver.findElement(By.xpath("//div[@class='context-tab layout-row flex']//*[name()='md-tab-item' and contains(text(),'" + sCustName + "')]")).click();
            log.info("Agent switch tab successfully");
            return true;
        } catch (Exception e) {
            log.info("The customer tab could not be found");
            return false;
        }
    }

    @Step("Read text from txt file")
    public String readTextFromFile(String filePath) {
        String data = "";
        try {
            File myObj = new File(filePath);
            Scanner myReader = new Scanner(myObj);
            while (myReader.hasNextLine()) {
                data = data.concat(myReader.nextLine());
            }
            myReader.close();
            log.info(data);
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
        return data;
    }

    @Step("Send Chat without send")
    public int sendChatToCustomerWithoutSend(String message) {
        int failedFlag = 0;
        try {
            wait(1);
            log.info(String.format("------------------------Sending message %s From Workspaces------------------------", message));
            for (WebElement elMessageArea : messageArea) {
                if (elMessageArea.isDisplayed()) {
                    elMessageArea.sendKeys(message);
                }
            }
        } catch (Exception ex) {
            log.info("FAILED: Chat session is interrupted");
            failedFlag++;
            ex.printStackTrace();
        }
        return failedFlag;
    }

    @Step("Move the cursor to the index of the elements")
    public void moveCurseToIndexOfElementBody(List<WebElement> elements, String side, int length) {
        try {
            for (WebElement elMessageArea : elements) {
                if (elMessageArea.isDisplayed()) {
                    Actions actions = new Actions(driver);
                    if (!side.equalsIgnoreCase("Right") && !side.equalsIgnoreCase("left")) {
                        actions.keyDown(Keys.CONTROL);
                    }
                    for (int i = 0; i < length; i++) {
                        if (side.equalsIgnoreCase("Right")) {
                            actions.sendKeys(Keys.ARROW_RIGHT);
                        } else if (side.equalsIgnoreCase("Left")) {
                            actions.sendKeys(Keys.ARROW_LEFT);
                        } else if (side.equalsIgnoreCase("Up")) {
                            actions.sendKeys(Keys.ARROW_UP);
                        } else if (side.equalsIgnoreCase("Down")) {
                            actions.sendKeys(Keys.ARROW_DOWN);
                        }
                    }
                    if (!side.equalsIgnoreCase("Right") && !side.equalsIgnoreCase("left")) {
                        actions.keyUp(Keys.CONTROL);
                    }
                    actions.build().perform();
                }
            }

        } catch (Exception ex) {
            log.info("FAILED: Cannot move cursor");
            ex.printStackTrace();
        }
    }

    @Step("Remove Character By Backspace key")
    public void removeCharByBackspace(int charNum, List<WebElement> elements) {
        try {
            for (WebElement elMessageArea : elements) {
                if (elMessageArea.isDisplayed()) {
                    Actions actions = new Actions(driver);
                    for (int i = 0; i < charNum; i++) {
                        actions.sendKeys(Keys.BACK_SPACE);
                    }
                    actions.build().perform();
                }
            }
        } catch (Exception ex) {
            log.info("FAILED: cannot send Backspace key");
            ex.printStackTrace();
        }
    }

    @Step("Copy character on the left of cursor")
    public String copyCharOnTheLeftSideOfCursor(int charNum, List<WebElement> elements) {
        String result = "";
        try {
            for (WebElement elMessageArea : elements) {
                if (elMessageArea.isDisplayed()) {
                    Actions actions = new Actions(driver);
                    actions.keyDown(Keys.SHIFT);
                    for (int i = 0; i < charNum; i++) {
                        actions.sendKeys(Keys.ARROW_LEFT);
                    }
                    actions.keyUp(Keys.SHIFT);
                    actions.build().perform();
                    actions.keyDown(Keys.CONTROL);
                    actions.sendKeys("c");
                    actions.keyUp(Keys.CONTROL);
                    actions.build().perform();
                    result = (String) Toolkit.getDefaultToolkit()
                            .getSystemClipboard().getData(DataFlavor.stringFlavor);
                }
            }
        } catch (Exception ex) {
            log.info("FAILED: Cannot copy characters");
            ex.printStackTrace();
        }
        return result;
    }

    @Step("Verify confirm message close interaction")
    public boolean verifyMessageCloseInteraction(String strInteractionId) throws InterruptedException {
        boolean result = false;
        closeInteraction.click();
        Thread.sleep(1000);
        String getText = getCloseConfirmMess.getText();
        log.info(getText);
        if (getText.contains("You will have no further opportunity to interact with this emai")) {
            log.info("Alert was present");
            result = true;
        }
        return result;
    }

    public void approveEmail() {
        log.info("This is an approval email.");
        click(driver, reviewBtn);
        log.info("Approve the Email");
        email_approval_feature();
    }

    @Step("Verify Auto Phrases display when Supervisor Coaching")
    public boolean verifyMessageDisplayWhenSupervisorCoachingOrBarge(String messageText) {
        try {
            wait.until(ExpectedConditions.textToBePresentInElement(ChatMessageContainerCoach, messageText));
            log.info("Inside verify chat session messages at Agent window:\n" + ChatMessageContainerCoach.getText());
            return true;
        } catch (Exception e) {
            log.error("The text specified not found inside chat session at Agent window." + " " + messageText);
            e.getMessage();
            Assert.assertFalse(false);
            return false;
        }
    }


    public void OpenContactDetailsOnTheCustomerJourney(int desiredChat, String contactType) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        log.info("Click The Customer Journey");
        Click_Widget("Customer_Journey");
        this.wait(10); // Waiting for loading Customer Journey
        List <WebElement> elements = driver.findElements(By.xpath("//*[@class='labels']/*"));
        for (WebElement element:elements){
            wait.until(ExpectedConditions.elementToBeClickable(element)).click();
//            if (element.isDisplayed()){
//                element.click();
//            }
        }
        WebElement elChat = driver.findElement(By.xpath("//*[@class='labels']/*[@class='label "+ contactType.toLowerCase() + "']"));
        elChat.click();
        wait(2);//Waiting for reload Chat's touch point
        List<WebElement> emailsJourney = driver.findElements(By.xpath("//div[@class='journey-horizontalTimeline']//*[name()='svg' and @id='" + contactType.toLowerCase() + "_Layer_1']"));
        this.wait(1);
        int firstLocation = emailsJourney.size();
        int desiredLocation = emailsJourney.size() - desiredChat + 1;
        WebElement firstContactContent=null;
        WebElement desiredContactContent=null;
        if(contactType.equals("sms") || contactType.equals("voice")){
            firstContactContent = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("(//div[@class='journey-horizontalTimeline']//*[name()='svg' and @id='" + contactType + "_Layer_1'])[" + firstLocation + "]/..//*[name()=\"circle\" and @pointer-events='all']")));
            desiredContactContent = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("(//div[@class='journey-horizontalTimeline']//*[name()='svg' and @id='" + contactType + "_Layer_1'])[" + desiredLocation + "]/..//*[name()=\"circle\" and @pointer-events='all']")));
        }

        else {
            firstContactContent = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("(//div[@class='journey-horizontalTimeline']//*[name()='svg' and @id='" + contactType + "_Layer_1'])[" + firstLocation + "]")));
            desiredContactContent = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("(//div[@class='journey-horizontalTimeline']//*[name()='svg' and @id='" + contactType + "_Layer_1'])[" + desiredLocation + "]")));
        }
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", firstContactContent);
        firstContactContent.click();
        if (desiredChat != 1) {
            this.wait(3);
            Actions act = new Actions(driver);
            if (isClickable(desiredContactContent)) {
                log.info("Open Email details: " + desiredChat);
            }
            else {
                for (int i = 0; i <= 100; i++) {
                    act.moveToElement(firstContactContent).click().perform();
                    act.doubleClick(firstContactContent).perform();
                    if (isClickable(desiredContactContent)) {
                        log.info("Open Email details: " + desiredChat);
                        break;
                    }
                }
            }

        }
        this.wait(3); //waiting for loading info
    }



    public int sendMultiLineChatToCustomer(String message) {
        int failedFlag = 0;
        try {
            List<String> messages = new ArrayList<>();
            if (message.contains(";")) {
                messages = Arrays.asList(message.split(";"));
            } else {
                messages = Collections.singletonList(message);
            }
            log.info(String.format("------------------------Sending message %s From Workspaces-----------------------------------------------------------", message));
            int i = 1;
            for (String msg : messages) {
                Actions actions = new Actions(driver);
                for (WebElement elMessageArea : messageArea) {
                    if (elMessageArea.isDisplayed()) {
                        if (i != 1 && messages.size() > 1) {
                            actions.keyDown(Keys.SHIFT)
                                    .sendKeys(Keys.RETURN)
                                    .build()
                                    .perform();
                            actions.keyUp(Keys.SHIFT).perform();
                        }
                        elMessageArea.sendKeys(msg);
                        wait(1);
                    }
                }
                i++;
            }
            for (WebElement btnSend : btnSendMessage) {
                if (btnSend.isDisplayed()) {
                    btnSend.click();
                    wait(2);
                }
            }
        } catch (Exception ex) {
            log.info("FAILED: Chat session is interrupted");
            failedFlag++;
            ex.printStackTrace();
        }
        return failedFlag;
    }

    public boolean verifyTimestampChatMessage(String message, String timeExpected) throws ParseException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        List<WebElement> listTimestamp = driver.findElements(By.xpath("//md-content[@class='messenger-messages__inner _md ps ps--active-y']//span[text()='" + message + "']//../..//span[@puppeteer-id='message-info__receive-time']"));
        String format = "hh:mm a";
        for (WebElement time : listTimestamp) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", time);
            String timestamp = time.getText();
            String time1 = timestamp.split("/")[2];
            String time2 = time1.split(" ")[1] + " " + time1.split(" ")[2];
            log.info("Actual: " + time2.trim());
            Date expectedDate = new SimpleDateFormat(format).parse(timeExpected);
            Date actualDate = new SimpleDateFormat(format).parse(time2.trim());
            log.info(expectedDate);
            log.info(actualDate);
            if (abs(expectedDate.getTime() - actualDate.getTime()) > 60000) {
                log.info("FAILED.Time stamp show incorrectly ");
                log.info("Expected: " + expectedDate);
                log.info("Actual: " + actualDate);
                log.info("Actual22: " + abs(expectedDate.getTime() - actualDate.getTime()));
                return false;
            }
        }
        return true;
    }
    public boolean verifyRecjectionCode (String expected) {
        try {
            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//button[@aria-label='Details']")))).click();
            String actualRejectCode = wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//div[@class='popup']/span")))).getText();
            Actions action = new Actions(driver);
            action.sendKeys(Keys.ESCAPE).build().perform();
            if(actualRejectCode.equals(expected)) {
                log.info("The actual rejection code is same: "+expected);
                return true;
            }else {
                log.info("Failed: The actual rejection code is not same: "+expected);
                return false;
            }
        }catch (Exception e) {
            return false;
        }
    }

    public String getInformationParticipantOnInteractionDetail(String interactionID, String option){
        String value = "";
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@id='ow_Card_More_btn_" + interactionID + "']"))).click();
        log.info("Clicking Interaction Details label");
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@id='ow_interaction_details_"+ interactionID +"']"))).click();
        wait(2);
        log.info("Clicking Participants");
        labelParticipant.click();
        log.info("Getting the "+ option +" of Participants");
        if (option.equals("AGENT")){
            value = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@id='ow_paricipant_AGENT_"+ interactionID +"']"))).getText();
        }
        else if (option.equals("CUSTOMER")) {
            value = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@id='ow_paricipant_CUSTOMER_"+ interactionID +"']"))).getText();
        }

        return value;
    }
    public boolean searchAutoPhrase(String inputSearch, String expected) {
        try {
            widgetChatPhrases.click();
            searchPhrases.clear();
            searchPhrases.sendKeys(inputSearch);
            WebElement resultSearch = driver.findElement(By.xpath("//div[@class='md-button md-no-style']//div//bdi[text()='" + expected + "']/../../button"));
            if (resultSearch.isDisplayed()) {
                return true;
            } else {
                log.info("FAILED: No found this element");
                return false;
            }

        } catch (Exception e) {
            log.info("Exception occurred when search AutoPhrase ");
            return false;
        }

    }
    @Step("Verify Text Display Or Not In Type A Message Field ")
    public boolean verifyTextDisplayOrNotInTypeAMessageField(String expectedText) {
        List<WebElement> ele = driver.findElements(By.xpath("//textarea[@placeholder='Type a message...']"));
        for (WebElement element : ele) {
            if (element.isDisplayed()) {
                if (element.getText().contains(expectedText)) {
                    log.info(element.getText());
                    log.info("Text is display");
                    return true;

                }
            }

        }
        return false;
    }

    public boolean verifyCharactersLeftSMS(String exceed){
        for (WebElement elMessageArea : messageArea) {
            if(elMessageArea.isDisplayed()) {
                int i = 1;
                while (i<=34){
                    if(i<=24) {
                        elMessageArea.sendKeys("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
                    }else{
                        elMessageArea.sendKeys("aaaaaaaaaa");
                        String limit = String.valueOf(100-(10-(34-i))*10);
                        wait(1);
                        if (!(getCharactersLeft.getText().equals("Characters left: " + limit))) {
                            log.info(getCharactersLeft.getText());
                            log.info("Characters left: " + limit);
                            log.info("FAILED: The Characters left is display incorrectly");
                            return false;
                        }
                    }
                    i++;
                }
                if(exceed != null) {
                    elMessageArea.sendKeys(exceed);
                    wait(1);
                    String overLimit = String.valueOf(-exceed.length());
                    wait(1);
                    if (!(getCharactersLeft.getText().equals("Characters left: " + overLimit))) {
                        log.info(getCharactersLeft.getText());
                        log.info("Characters left: " + overLimit);
                        log.info("FAILED: Exceed limit: " + overLimit);
                        return false;
                    }
                    String colorCharactersLeft = getCharactersLeft.getCssValue("color");
                    String colorExcessInputLimitSMS = excessInputLimitSMS.getCssValue("color");
                    log.info(colorCharactersLeft);
                    log.info(colorExcessInputLimitSMS);
                    if (!(excessInputLimitSMS.getText().equals(exceed))) {
                        log.info("FAILED: The Characters left is display incorrectly: " + exceed);
                        return false;
                    }
                    if (!colorCharactersLeft.equals("rgba(213, 0, 0, 1)")) {
                        log.info("FAILED: The Characters left is display incorrectly: " + colorCharactersLeft);
                        return false;
                    }
                    if (!colorExcessInputLimitSMS.equals("rgba(213, 0, 0, 1)")) {
                        log.info("FAILED: The Excess Input Limit display incorrectly: " + colorExcessInputLimitSMS);
                        return false;
                    }
                }
            }
        }
        return true;
    }

    @Step("Verify missed message is display on workcard")
    public boolean verifyMissedMessageDisplayOnWorkcard(int missedMessage) {
        try {
            wait(3);
            if (driver.findElement(By.xpath("//*[@data-missed=" + missedMessage + "]")).isDisplayed()) {
                log.info("The" + missedMessage + "missed message is displayed on workcard");
                return true;
            }
        } catch (Exception e) {
            log.info("Missed message not displayed on work card");
        }
        return false;
    }

    @Step("Verify missed message is display on workcard")
    public boolean verifyMissedMessageDisplayOnWorkcardByInteractionID(int missedMessage, String interactionID) {
        try {
            wait(3);
            if (driver.findElement(By.xpath("//*[@interaction-id=\""+interactionID+"\"]//*[@data-missed=" + missedMessage + "]")).isDisplayed()) {
                log.info("The" + missedMessage + "missed message is displayed on workcard");
                return true;
            }
        } catch (Exception e) {
            log.info("Missed message not displayed on work card");
        }
        return false;
    }


    @Step("Verify vertical scrollbar is displayed or not on the customer messages tab")
    public int verifyVerticalScrollbarDisplayOrNot() {
        int height = 0;
        try {
            WebElement messengerTab = driver.findElement(By.xpath("//md-tab-content[@class='_md md-active']//md-content[@cc-scrollbar='vertical']"));
            WebElement scroll = driver.findElement(By.xpath("//md-tab-content[@class='_md md-active']//md-content[@cc-scrollbar='vertical']//div[@class='ps__thumb-y']"));
            moveMouseToElement(messengerTab);
            log.info("Move Mouse on the tab message");
            log.info("The vertical scrollbar is still displaying");
            String str = scroll.getCssValue("top");
            String result = str.substring(0, str.length() - 2);
            height = Integer.parseInt(result);
            log.info("Current position of scrollbar: " + height);
            return height;
        } catch (Exception e) {
            log.info("Vertical scrollbar is not displayed on WS", e);
        }
        return height;
    }

    public boolean moveVerticalScrollbarOnTop(String interactionID) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            if (verifyVerticalScrollbarDisplayOrNot() != 0) {
                log.info("Moves vertical scroll bar on the top");
                WebElement elementTop = driver.findElement(By.xpath("(//div[@interaction-id='" + interactionID + "']//md-tab-content[@class='_md md-active']//md-content[@cc-scrollbar='vertical']//strong[@class='message-info__participantName'])[1]"));
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", elementTop);
                wait(1);
                int topEx = verifyVerticalScrollbarDisplayOrNot();
                log.info(topEx);
                if (topEx <= 30) {
                    return true;
                } else {
                    log.info("FAILED");
                    return false;
                }
            }
        } catch (Exception e) {
            log.info("No such element" + e);
            return false;
        }
        return false;
    }

    public boolean moveVerticalScrollbarToTheBottom(String interactionID) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            int initialPosition = verifyVerticalScrollbarDisplayOrNot();
            log.info("Moves vertical scroll bar to the bottom");
            WebElement elementBottom = driver.findElement(By.xpath("(//div[@interaction-id='" + interactionID + "']//md-tab-content[@class='_md md-active']//md-content[@cc-scrollbar='vertical']//strong[@class='message-info__participantName'])[last()]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", elementBottom);
            wait(1);
            int heightBottom = verifyVerticalScrollbarDisplayOrNot();
            log.info("Current bottom margin position of the scrollbar: " + heightBottom);
            log.info("Verify scrollbar moves to the bottom");
            if (heightBottom > initialPosition) {
                return true;
            } else {
                log.info("The scroll is at bottom");
                return false;
            }
        } catch (Exception e) {
            log.info("No such element" + e);
            return false;
        }
    }

    @Step("Verify notification message displayed on Agent side “New Message”")
    public boolean verifyNotificationNewMessageDisplayOrNot() {
        boolean b = false;
        try {
            wait(1);
            if (notificationNewMsg.size() > 0) {
                return true;
            }
        } catch (Exception e) {
            log.info("Notification New Message is not displayed on WS", e);
            e.printStackTrace();
        }
        return b;
    }

    public void clickLabelNewMessage() {
        wait(3);
        click(driver, dropdownNewMsg);
    }

    @Step("Verify message displays workcard supervisor side")
    public boolean verifyChatMessageDisplayedOnWorkcard (String messageText) {
        try {
            messageInWorkcard.getText();
            log.info("The workcard shows the message from Customer: " + messageText);
            if(wait.until(ExpectedConditions.textToBePresentInElement(messageInWorkcard, messageText))) {
                return true;
            }else {
                log.info(messageText+ ": Is not present in workcard");
                return false;
            }
        } catch (Exception e) {
            log.info("No such element");
            return false;
        }
    }

    @Step("Verify message displays workcard supervisor side")
    public boolean verifyChatMessageDisplayedOnWorkcardByInteractionID (String messageText, String interactionID) {
        try {
            WebElement messageInWorkcard = driver.findElement(By.xpath("//*[@interaction-id=\""+interactionID+"\"]//div[@class='card__details-description']"));
            log.info("The workcard shows the message from Customer: " + messageText);
            if(wait.until(ExpectedConditions.textToBePresentInElement(messageInWorkcard, messageText))) {
                return true;
            }else {
                log.info(messageText+ ": Is not present in workcard");
                return false;
            }
        } catch (Exception e) {
            log.info("No such element");
            return false;
        }
    }


    @Step("Get work-request-id by interaction ID on workcard")
    public String getWorkRequestID(String ID) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            WebElement workCard = driver.findElement(By.xpath("//card-container[@interaction-id='" + ID + "']"));
            if ((this.eXISTs(driver, workCard, 2) != null)) {
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                String workRequestID = workCard.getAttribute("work-request-id");
                log.info("Work Request ID: "+workRequestID);
                return workRequestID;
            } else {
                log.info("Workcard not found");
                return null;
            }
        } catch (Exception e) {
            log.info("Exception occured when selecting workcard");
            return null;
        }
    }
    @Step("Compose Chat without sending on Agent side")
    public void agentComposeChatWithoutSend(String message) {
        try {
            log.info(String.format("------------------------composing message %s From Workspaces------------------------", message));
            List<WebElement> messageArea = driver.findElements(By.xpath("//textarea[@aria-label=\"Type a message...\"]"));
            for (WebElement elMessageArea : messageArea) {
                if (elMessageArea.isDisplayed()) {
                    log.info("Inserting message body: " + elMessageArea);
                    elMessageArea.sendKeys(message);
                }
            }
        } catch (Exception e) {
            log.info("Chat session is interrupted");
        }
    }

    @Step("Verify space character is existing")
    public boolean verifyWhiteSpaceIsExisting() {
        List<WebElement> ele1 = driver.findElements(By.xpath("//div[@class='messenger-status layout-align-space-between-center layout-row']//p"));
        List<WebElement> ele2 = driver.findElements(By.xpath("//div[@class='messenger-status layout-align-space-between-center layout-row']//span"));
        List<WebElement> ele3 = driver.findElements(By.xpath("//div[@class='messenger-status layout-align-space-between-center layout-row']//strong"));
        String textEle1 = null;
        String textEle2 = null;
        String textEle3 = null;

        for (WebElement element : ele1) {
            if (element.isDisplayed()) {
                textEle1 = element.getText().trim();
                log.info(textEle1);
            }
        }
        for (WebElement element : ele2) {
            if (element.isDisplayed()) {
                textEle2 = element.getText().trim();
                log.info(textEle2);
            }
        }
        for (WebElement element : ele3) {
            if (element.isDisplayed()) {
                textEle3 = element.getText().trim();
                log.info(textEle3);
            }
        }
        if(textEle1.split(textEle2)[1].split(textEle3)[0].equals(" ")){
            log.info("The message is not missing one space character before the time");
            return true;
        } else {
            log.info("The message is missing one space character before the time");
            return false;
        }
    }
    public boolean checkTransferOfFileIsAvaliable(List<WebElement> elAttachments, String expectedFileName) {
        for (WebElement attachment : elAttachments) {
            int i = 0;
            if (attachment.getAttribute("innerText").contains(expectedFileName)) {
                log.info("--------------Attachment exist");
                i++;
                if (i > 0) return true;
            }

        }
        log.info("--------------Attachment not exist");
        return false;
    }

    @Step("Verify the name and size of the attachment displayed on the WS")
    public int VerifyTransferOfFileDisplayOnWS(List<String> filenames, boolean display) {
        int failedFlag = 0;
        wait(1);
        List<WebElement> elTransferFile = driver.findElements(By.xpath("//div[@class='context-widget layout-row flex']//a[@class='message-body__file-name']"));
        for (String fileName : filenames) {
            if (display) {
                if (!checkTransferOfFileIsAvaliable(elTransferFile, fileName)) {
                    log.info(String.format("FAILED. The transfer of a file: %s not found.", fileName));
                    failedFlag++;
                }
            } else {
                if (checkTransferOfFileIsAvaliable(elTransferFile, fileName)) {
                    log.info(String.format("FAILED. The transfer of a file: %s should be not found.", fileName));
                    failedFlag++;
                }
            }
        }
        return failedFlag;
    }

    @Step("Click on send chat")
    public void Click_Send_Chat() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            List<WebElement> SendButton = driver.findElements(By.xpath("//button[@title='Send message']"));
            for (WebElement sendButton : SendButton) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", sendButton);

                if (sendButton.isDisplayed()) {
                    sendButton.click();
                    log.info("Chat is sent successfully.");
                }
            }
        } catch (Exception e) {
            log.info("No such element");
        }
    }

    @Step("Verify modify transcript of Email")
    public boolean verifyModifyTranscriptOfEmail(int replayNumber) {

        try {
            WebElement contentEmail = driver.findElement(By.xpath("(//div[@id='email--textarea'])[" + (replayNumber + 1) + "]"));
            if (contentEmail.getAttribute("contenteditable").contains("false")) {
                log.info("Text is read only non editable");
                return true;
            }

        } catch (Exception e) {
            log.info("Text is add success");

        }

        return false;
    }

    @Step("Verify modify transcript of Chat")
    public boolean verifyModifyTranscriptOfChat(int replayNumber) {
        try {
            List<WebElement> elements = driver.findElements(By.xpath("(//div[@class='chat-transcript']//span)[" + (replayNumber + 1) + "]"));
            for (WebElement contentChat : elements) {
                String currentText = contentChat.getAttribute("innerHTML");
                if (currentText.contains("span")) {
                    log.info("Text is read only non editable");
                    return true;

                }
            }

        } catch (Exception e) {
            log.info("Text is add success");

        }

        return false;
    }

    /**
     * <h1>Get_Agent_Message_Transcript_By_Number</h1>
     * This method is used to get text of a chat message that is sent by agent. Display on CHS Transcript
     *
     * @param index number order of chat message , start from 1
     */
    public String Get_Agent_Message_Transcript_By_Number(int index){
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String sChatMessage=null;
        try {
            WebElement chatMessage= driver.findElement(By.xpath("(//span[@class='chat-body chat-body-agent'])["+index+"]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", chatMessage);
            if(chatMessage.isDisplayed()){
                sChatMessage= chatMessage.getText();
                return sChatMessage;
            }
            else {
                log.info("Can not find chat message by index :"+index);
            }
            return sChatMessage;
        }
        catch (Exception e){
            log.info("Can not find element: "+e);
            return sChatMessage;
        }

    }

    @Step("Verify Name Attachments Display")
    public boolean verifyAttachmentNameCustomerHistory(List<String> attachments) {
        List<WebElement> elAttachments = driver.findElements(By.xpath("//span[@class='chat-body chat-body-agent']//div[@class='file-attachment__name flex-auto']"));
        List<String> value = new ArrayList<String>();
        for (WebElement Attachments : elAttachments) {
            value.add(Attachments.getText());
        }
        if (value.equals(attachments)) {
            log.info("The attachment file names show full correctly");
            return true;
        } else {
            log.info("The attachment file names show incorrectly");
            return false;
        }

    }
    @Step("Check a string whether is a URL")
    public boolean isValidURL(String urlString) {
        try {
            URL url = new URL(urlString);
            url.toURI();
            log.info("It's a URL");
            return true;
        } catch (Exception e) {
            log.info("It's not a URL");
            return false;
        }
    }

    @Step("Verify Attachment On CHS is not a URL")
    public int verifyAttactmentOnCHSIsNotURL(String fileName) {
        int failedFlag = 0;
        WebElement element = driver.findElement(By.xpath("//*[@ng-if='msg.attachment']//*[@class='file-attachment__name flex-auto' and @role='button']"));
        String file = element.getText();
        if (isValidURL(file) || !file.equals(fileName)) {
            failedFlag++;
            log.info("The attachment name is a URL or the filename is incorrect");
        }
        return failedFlag;
    }
    @Step("Download and Verify Attachments received Display On CHS Body")
    public int downloadAndVerifyAttachmentOnCHSBody(List<String> filenames) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String home = System.getProperty("user.home");
        String downloadDirectory = home + "/Downloads/";
        deleteFilesInFolder(downloadDirectory, filenames);
        int failedFlag = 0;

        List<String> downloadedAttachments = new ArrayList<String>();
        for (String filename : filenames) {
            WebElement elAttachment = 	wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//*[@ng-if='msg.attachment']//*[@class='file-attachment__name flex-auto' and @role='button'][text()='" + filename + "']"))));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", elAttachment);
            elAttachment.click();
            downloadedAttachments.add(elAttachment.getText());
            this.wait(2);

            log.info("Downloaded the attachments: " + downloadedAttachments);
            log.info(String.format("Verify attachment downloaded in %s", downloadDirectory));
            if (!checkAttachmentIsCorrect(downloadedAttachments, filename)) {
                failedFlag++;
                log.info(String.format("FAILED. The attachment: %s not found", filename));
            }
        }
        return failedFlag;
    }

    @Step("Download and Verify Attachments received Display On Customer Journey")
    public int downloadAndVerifyAttachmentOnCustomerJourney(List<String> filenames) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String home = System.getProperty("user.home");
        String downloadDirectory = home + "/Downloads/";
        deleteFilesInFolder(downloadDirectory, filenames);
        int failedFlag = 0;

        List<String> downloadedAttachments = new ArrayList<String>();
        for (String filename : filenames) {
            WebElement elAttachment = 	wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//*[contains(@class,'uploaded-attachment_name flexAuto')][text()='" + filename + "']"))));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", elAttachment);
            elAttachment.click();
            downloadedAttachments.add(elAttachment.getText());
            this.wait(2);

            log.info("Downloaded the attachments: " + downloadedAttachments);
            log.info(String.format("Verify attachment downloaded in %s", downloadDirectory));
            if (!checkAttachmentIsCorrect(downloadedAttachments, filename)) {
                failedFlag++;
                log.info(String.format("FAILED. The attachment: %s not found", filename));
            }
        }
        return failedFlag;
    }
    @Step("Clear the matched keyword and verify")
    public boolean clearKeywordAndverify(String keyWord) throws ParseException, InterruptedException {
        boolean result = false;
        removeCharByBackspace(keyWord.length()+1,Collections.singletonList(searchBoxOnTranscript));
        wait(3); //Waiting for clear the matched keyword
        String innerHtmlContent = contentOnCustomerJourney.getAttribute("innerHTML");
        String match= getFilterResult.getText();
        if (!match.contains("Match")&&!innerHtmlContent.contains("<mark data-markjs=")) {
            result = true;
        }
        return result;
    }

    @Step
    public boolean verifyIconOnWorkCard(String iconName, String interactionId){
        try{
            WebDriverWait wait = new WebDriverWait(driver, 10);
            WebElement icon = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//span[@class='card__header-icon aoc-"+iconName+"' and contains(@puppeteer-id,'"+interactionId+"')]")));
            if(icon.isDisplayed()){
                return true;
            }else{
                log.info(iconName+" is not display");
                return false;
            }
        }catch (Exception e){
            log.info("No such element");
            return false;
        }
    }
    @Step
    public boolean verifyColorElement(WebElement element, String expectedColor){
        try{
            WebDriverWait wait = new WebDriverWait(driver, 10);
            wait.until(ExpectedConditions.visibilityOf(element));
            String color = element.getCssValue("color");
            if(!color.equals(expectedColor)){
                log.info("Element is not display");
                return false;
            }
        }catch (Exception e){
            log.info("Element is not display");
            return false;
        }
        return  true;
    }

    public int VerifyAgentCanNotModifyTheTextToDisplay() {
        int failedFlag = 0;
        try {
            if (!elTextToDisplay.getAttribute("placeholder").equals("<<Selection in Editor>>") && elTextToDisplay.getAttribute("disabled") == null ){
                failedFlag++;
                log.info("Failed: the Text should not be modified");
            }
        } catch (Exception e) {
            log.info("FAILED: No found this element");
            failedFlag++;
        }
        return failedFlag;
    }
    @Step("Get plain text email transcript on Customer History Search.")
    public String getEmailPlainTextInCustomerHistorySearch (int desiredEmail,String contentFrom) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            WebElement emailContent = driver.findElement(By.xpath("//cc-history-detail-item[@puppeteer-id='customerHistorySearch-history-details-item__"+desiredEmail+"']//div[@class='email email-"+contentFrom+"']//textarea[@aria-label='Email signature text editor']"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", emailContent);
            emailContent.sendKeys(Keys.chord(Keys.CONTROL, "a"));
            emailContent.sendKeys(Keys.chord(Keys.CONTROL, "c"));
            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
            String actualText  = (String) c.getData(DataFlavor.stringFlavor);
            emailContent.click();
            return actualText;

        }catch (Exception e){
            log.info("Failed: No such element.");
            return null;
        }
    }
    public void searchCustomerHistoryByKeywordWithParameterNumber(String key, String value1, String value2, int number) {
        //click Add more parameter
        btnAddMoreSearchParameters.click();

        WebElement searchByCHS=wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("(*//div[contains(@class,'widget widget--customer-history-search')]//md-select[contains(@placeholder,'Search by')])["+number+"]"))));
        searchByCHS.click();
        this.wait(2);
        Actions actions = new Actions(driver);
        switch (key) {
            case "Date":
                WebElement searchByDate= driver.findElement(By.xpath("(*//div[text()='Date'])["+number+"]"));
                wait.until(ExpectedConditions.elementToBeClickable(searchByDate));
                searchByDate.click();
                this.wait(2);
                actions.sendKeys(Keys.ESCAPE).perform();
                wait.until(ExpectedConditions.elementToBeClickable(inputDateFrom));
                inputDateFrom.clear();
                inputDateFrom.sendKeys(value1);
                this.wait(2);
                wait.until(ExpectedConditions.elementToBeClickable(inputDateTo));
                inputDateTo.clear();
                inputDateTo.sendKeys(value2);
                this.wait(2);
                break;
            case "Customer Email":
                WebElement searchByCustomerEmail= driver.findElement(By.xpath("(*//div[text()='Customer Email'])["+number+"]"));
                wait.until(ExpectedConditions.elementToBeClickable(searchByCustomerEmail));
                actions.moveToElement(searchByCustomerEmail).click().perform();
                this.wait(2);
                actions.sendKeys(Keys.ESCAPE).perform();
                wait.until(ExpectedConditions.elementToBeClickable(inputCustomerEmail));
                inputCustomerEmail.clear();
                inputCustomerEmail.sendKeys(value1);
                break;
            case "Subject":
                WebElement searchBySubject= driver.findElement(By.xpath("(*//div[text()='Subject'])["+number+"]"));
                wait.until(ExpectedConditions.elementToBeClickable(searchBySubject));
                searchBySubject.click();
                this.wait(2);
                actions.sendKeys(Keys.ESCAPE).perform();
                wait.until(ExpectedConditions.elementToBeClickable(inputSubject));
                inputSubject.clear();
                inputSubject.sendKeys(value1);
                break;
            case "To Address":
                WebElement searchByToAddress= driver.findElement(By.xpath("(*//div[text()='To address'])["+number+"]"));
                wait.until(ExpectedConditions.elementToBeClickable(searchByToAddress));
                searchByToAddress.click();
                this.wait(2);
                actions.sendKeys(Keys.ESCAPE).perform();
                wait.until(ExpectedConditions.elementToBeClickable(inputToAddress));
                inputToAddress.clear();
                inputToAddress.sendKeys(value1);
                break;
        }
        wait.until(ExpectedConditions.elementToBeClickable(btnSearchCHS));
        btnSearchCHS.click();
        this.wait(2);
    }

    public Map<String, String> getCustomerJourneySummary(){
        Map<String, String> result = new HashMap<>();
        if(!driver.findElements(By.xpath("//label[contains(text(),'Status')]/following-sibling::label[@class='summaryHeaderContent']")).isEmpty()){
            String Status= driver.findElement(By.xpath("//label[contains(text(),'Status')]/following-sibling::label[@class='summaryHeaderContent']")).getText();
            result.put("Status",Status);
        }
        if(!driver.findElements(By.xpath("//label[contains(text(),'AgentId')]/following-sibling::label[@class='summaryHeaderContent']")).isEmpty()){
            String AgentId= driver.findElement(By.xpath("//label[contains(text(),'AgentId')]/following-sibling::label[@class='summaryHeaderContent']")).getText();
            result.put("AgentId",AgentId);
        }
        if(!driver.findElements(By.xpath("//label[contains(text(),'Topic')]/following-sibling::label[@class='summaryHeaderContent']")).isEmpty()){
            String Topic= driver.findElement(By.xpath("//label[contains(text(),'Topic')]/following-sibling::label[@class='summaryHeaderContent']")).getText();
            result.put("Topic",Topic);
        }
        if(!driver.findElements(By.xpath("//label[contains(text(),'Disposition')]/following-sibling::label[@class='summaryHeaderContent']")).isEmpty()){
            String Disposition= driver.findElement(By.xpath("//label[contains(text(),'Disposition')]/following-sibling::label[@class='summaryHeaderContent']")).getText();
            result.put("Disposition",Disposition);
        }
        if(!driver.findElements(By.xpath("//label[contains(text(),'Matched On Type')]/following-sibling::label[@class='summaryHeaderContent']")).isEmpty()){
            String MatchedOnType = driver.findElement(By.xpath("//label[contains(text(),'Matched On Type')]/following-sibling::label[@class='summaryHeaderContent']")).getText();
            result.put("MatchedOnType",MatchedOnType);
        }
        if(!driver.findElements(By.xpath("//label[contains(text(),'Routing Strategy')]/following-sibling::label[@class='summaryHeaderContent']")).isEmpty()){
            String RoutingStrategy = driver.findElement(By.xpath("//label[contains(text(),'Routing Strategy')]/following-sibling::label[@class='summaryHeaderContent']")).getText();
            result.put("RoutingStrategy",RoutingStrategy);
        }
        return result;
    }

    public String getLabelContactPreviousInCustomerDetail (String channel) {
        try{
            wait(1);
            String labelContact = driver.findElement(By.xpath("//tr[2]/td[4]")).getText();
            log.info("Label Contact is"+ labelContact);
        }catch (Exception e){
            log.info("No such element");
        }
        return channel;
    }

    public String getLabelContactPreviousInCHS (String channel) {
        try{
            wait(1);
            String labelContact = driver.findElement(By.xpath("//tr[3]/td[5]")).getText();
            log.info("Label Contact is"+ labelContact);
        }catch (Exception e){
            log.info("No such element");
        }
        return channel;
    }

    @Step("Scroll down to WebElement")
    public void scrollDown(WebElement element) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
        log.info("Scorll Down Completed");
    }

    public void searchAtCustomerSearchByKey(String key, String value) {
        //System.out.println("background: " + surnameBtnCustomerSearch.getCssValue("background"));
        if(surnameBtnCustomerSearch.getCssValue("background").contains("rgb(75, 170, 57)")) {
            wait.until(ExpectedConditions.elementToBeClickable(surnameBtnCustomerSearch)).click();
            //System.out.println("background: " + surnameBtnCustomerSearch.getCssValue("background"));
            this.wait(2);
        }
        if(nameBtnCustomerSearch.getCssValue("background").contains("rgb(75, 170, 57)")) {
            wait.until(ExpectedConditions.elementToBeClickable(nameBtnCustomerSearch)).click();
            this.wait(2);
        }
        if(emailBtnCustomerSearch.getCssValue("background").contains("rgb(75, 170, 57)")) {
            wait.until(ExpectedConditions.elementToBeClickable(emailBtnCustomerSearch)).click();
            this.wait(2);
        }
        if(phoneBtnCustomerSearch.getCssValue("background").contains("rgb(75, 170, 57)")) {
            wait.until(ExpectedConditions.elementToBeClickable(phoneBtnCustomerSearch)).click();
            this.wait(2);
        }
        if(socialBtnCustomerSearch.getCssValue("background").contains("rgb(75, 170, 57)")) {
            wait.until(ExpectedConditions.elementToBeClickable(socialBtnCustomerSearch)).click();
            this.wait(2);
        }
        switch (key) {
            case "Surname":
                wait.until(ExpectedConditions.elementToBeClickable(surnameBtnCustomerSearch)).click();
                wait.until(ExpectedConditions.elementToBeClickable(inputSurname));
                inputSurname.clear();
                inputSurname.sendKeys(value);
                this.wait(2);
                break;
            case "Name":
                wait.until(ExpectedConditions.elementToBeClickable(nameBtnCustomerSearch)).click();
                wait.until(ExpectedConditions.elementToBeClickable(inputName));
                inputName.clear();
                inputName.sendKeys(value);
                this.wait(2);
                break;
            case "Email":
                wait.until(ExpectedConditions.elementToBeClickable(emailBtnCustomerSearch)).click();
                wait.until(ExpectedConditions.elementToBeClickable(inputEmail));
                inputEmail.clear();
                inputEmail.sendKeys(value);
                this.wait(2);
                break;
            case "Phone":
                wait.until(ExpectedConditions.elementToBeClickable(phoneBtnCustomerSearch)).click();
                wait.until(ExpectedConditions.elementToBeClickable(inputPhone));
                inputPhone.clear();
                inputPhone.sendKeys(value);
                this.wait(2);
                break;
            case "Social":
                wait.until(ExpectedConditions.elementToBeClickable(socialBtnCustomerSearch)).click();
                wait.until(ExpectedConditions.elementToBeClickable(inputSocial));
                inputSocial.clear();
                inputSocial.sendKeys(value);
                this.wait(2);
                break;
        }
        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//button[@class=\"search-button md-button md-ink-ripple\"]")))).click();
        this.wait(2);
    }

    public void searchCHByKey(String key, String value1, String value2) {
        wait.until(ExpectedConditions.elementToBeClickable(searchFieldCustomerHistory)).click();
        Actions actions = new Actions(driver);
        switch (key) {
            case "Customer":
                wait.until(ExpectedConditions.elementToBeClickable(searchByCustomer));
                actions.moveToElement(searchByCustomer).click().perform();
                this.wait(2);
                wait.until(ExpectedConditions.elementToBeClickable(inputCustomer));
                inputCustomer.clear();
                inputCustomer.sendKeys(value1);
                this.wait(2);
                break;
            case "Date":
                wait.until(ExpectedConditions.elementToBeClickable(searchByDate));
                actions.moveToElement(searchByDate).click().perform();
                this.wait(2);
                wait.until(ExpectedConditions.elementToBeClickable(inputDateFrom));
                actions.moveToElement(inputDateFrom).click().perform();
                inputDateFrom.clear();
                inputDateFrom.sendKeys(value1);
                this.wait(2);
                wait.until(ExpectedConditions.elementToBeClickable(inputDateTo));
                inputDateTo.clear();
                inputDateTo.sendKeys(value2);
                this.wait(2);
                break;
            case "Customer Email":
                wait.until(ExpectedConditions.elementToBeClickable(searchByCustomerEmailCH)).isDisplayed();
                actions.moveToElement(searchByCustomerEmailCH).click().perform();
                this.wait(2);
                wait.until(ExpectedConditions.elementToBeClickable(inputCustomerEmail));
                inputCustomerEmail.clear();
                inputCustomerEmail.sendKeys(value1);
                break;
            case "Subject":
                wait.until(ExpectedConditions.elementToBeClickable(searchBySubject));
                actions.moveToElement(searchBySubject).click().perform();
                this.wait(2);
                wait.until(ExpectedConditions.elementToBeClickable(inputSubject));
                inputSubject.clear();
                inputSubject.sendKeys(value1);
                break;
            case "To Address":
                wait.until(ExpectedConditions.elementToBeClickable(searchByToAddress));
                actions.moveToElement(searchByToAddress).click().perform();
                this.wait(2);
                wait.until(ExpectedConditions.elementToBeClickable(inputToAddress));
                inputToAddress.clear();
                inputToAddress.sendKeys(value1);
                break;
        }
        wait.until(ExpectedConditions.elementToBeClickable(btnSearchCH));
        btnSearchCH.click();
        this.wait(2);
    }

    public int getRowsSearchHistoryResult() {
//        List<WebElement> rows = driver.findElements(By.xpath("//cc-history-search[@widget=\"customerHistory\"]//tr[@ng-repeat-start=\"item in customerSearchResults track by $index\"]"));
        List<WebElement> rows = driver.findElements(By.xpath("//tr[@ng-repeat-start=\"item in customerSearchResults track by $index\"]"));
        int count = rows.size();
        return count;
    }


    public void selectRowsPerPagesOfSearchResultCH(int amountRowsPerPages) {
        wait.until(ExpectedConditions.elementToBeClickable(fieldPaginationPage)).click();
        String xpathRowsPerPages = String.format("//md-option[@ng-repeat=\"opts in ::pagination.recordsPerPageOptions\"][@value=\"%s\"]", amountRowsPerPages);
        WebElement recordPerPage =  driver.findElement(By.xpath(xpathRowsPerPages));
        Actions actions = new Actions(driver);
        wait(2);
        actions.moveToElement(recordPerPage).click().perform();
    }

    @Step("In Customer Search for the record result > 5, get the scroll bar height of the result table.")
    public int getScrollBarHeightCH() {
        WebElement scrollBar = driver.findElement(By.xpath("//div[@class=\"ch-scrollable-area ps ps--active-y\"]//div[@class=\"ps__thumb-y\"]"));
        int height = Integer.parseInt(scrollBar.getCssValue("height").split("px")[0]);
        return height;
    }

    public boolean verifyFromToFieldCHEmpty() {
        WebElement inputStart = driver.findElement(By.xpath("//md-datepicker[@ng-model=\"tmpUserInput.startDate\"]"));
        WebElement inputEnd = driver.findElement(By.xpath("//md-datepicker[@ng-model=\"tmpUserInput.endDate\"]"));
        String dateFrom = inputStart.getAttribute("class");
        String dateTo = inputEnd.getAttribute("class");
        if (!dateFrom.contains("ng-empty") || !dateTo.contains("ng-empty")) {
            return false;
        }
        return true;
    }

    public int getPaginationRecord() {
        WebElement pagination = driver.findElement(By.xpath("(//div[@class=\"ch-pagination layout-column\"]//div[@class=\"ch-pagination-block\"])[3]"));
        String paginationRecord = pagination.getText().split("of")[1].trim();
        return Integer.parseInt(paginationRecord);
    }

    @Step("Download Attachments received on supervisor side")
    public int downloadFileMessageDisplayOnWS(List<String> fileName) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String home = System.getProperty("user.home");
        String downloadDirectory = home + "/Downloads/";
        deleteFilesInFolder(downloadDirectory, fileName);
        int failedFlag = 0;
        List<WebElement> elAttachments = driver.findElements(By.xpath("//div[contains(@class,'message-body__file-box layout-column')]//a[@target='_blank']"));
        for (WebElement elAttachment : elAttachments) {
            try {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", elAttachment);
                elAttachment.click();
                log.info("Downloaded the attachments");
                this.wait(2);
            } catch (Exception e) {
            }
        }
        for (String fileDownload : fileName) {
            File filePath = new File(downloadDirectory + fileDownload);
            if (!filePath.exists()) {
                log.info(String.format("FAILED. The attachment: %s not found", fileDownload));
                failedFlag++;
            } else {
                log.info(String.format("The attachment: %s found", fileDownload));
            }
        }


        return failedFlag;
    }
    @Step("Verify plain text chat transcript on Customer History")
    public int VerifyChatBodyPlainTextOnCustomerHistory(int desired, String sChatBodyText)  {
        int failedFlag = 0;
        log.info("Open Customer Details");
        Click_Widget("Customer_Details");
        this.wait(2);
        log.info("Open email details on Customer History");
        WebElement btnOpenDetailsCH = driver.findElement(By.xpath("(//div[contains(@ng-switch,'customerHistory')]//button[@class='md-primary md-button md-ink-ripple aoc-add'])[" + desired + "]/../..//button[contains(@type,'button')]"));
        if (btnOpenDetailsCH.isDisplayed()) {
            btnOpenDetailsCH.click();
            this.wait(1);
        } else {
            log.info("FAILED. Cannot find to button Transcript open");
            failedFlag += 1;
        }
        log.info("Copy plain text chat transcript in Customer History");

        WebElement BodyPlainText = driver.findElement(By.xpath("(//cc-history-detail-item[@item='case.detail'])[" + desired + "]//div[@class='chat-transcript']"));
        String text = BodyPlainText.getText();

        log.info("INFO. Chat content on Customer History: " + text);
        log.info("Verify chat plain text transcript on Customer History");
        if (!text.contains(sChatBodyText)) {
            failedFlag++;
            log.info("FAILED. Chat Content on Customer History show incorrectly");
        }
        this.wait(2);
        log.info("Close chat details on Customer History");
        WebElement btnCloseDetailsCH = driver.findElement(By.xpath("(//div[contains(@ng-switch,'customerHistory')]//button[@class='md-primary md-button md-ink-ripple aoc-add'])[" + desired + "]/../..//button[contains(@type,'button')]"));
        if (btnCloseDetailsCH.isDisplayed()) {
            btnCloseDetailsCH.click();
            this.wait(1);
        } else {
            log.info("FAILED. Cannot find to button Transcript close");
            failedFlag += 1;
        }
        return failedFlag;
    }
    public String randomUpperCaseCharacter(String data) {
        int i = data.length();
        String upperCaseRandom = null;
        for (int j = 0; j < data.length(); j++) {
            int random = (int) Math.floor(Math.random() * i);
            if (Character.isLowerCase(data.charAt(random)) && !Character.isDigit(data.charAt(random))) {
                String wordRandom = String.valueOf(data.charAt(random));
                upperCaseRandom = data.replace(wordRandom, wordRandom.toUpperCase());
                break;
            }
        }
        return upperCaseRandom;
    }

    public boolean verify_Message_Transcript(String messsage){
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            WebElement chatMessage= driver.findElement(By.xpath("//span[@class='chat-body-preformatted' and contains(text(),'"+messsage+"')]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", chatMessage);
            if(chatMessage.isDisplayed()){
                return true;
            }else {
                log.info("Message is not display");
                return false;
            }
        }
        catch (Exception e){
            log.info("No such element ");
            return false;
        }
    }
    @Step("Agent adds Attachment to email body")
    public CCClientLoginPage Attach_File(String attachmentFolderPath, List<String> listOfAttachments) {

        try {
            log.info("Clicking for attachBtn");
            attachBtn.click();
            this.wait(2);

            String scriptPath = System.getProperty("user.dir") + EnvSetup.sAutoITScriptRelativePath + "uploadFile.exe";
            for (String file : listOfAttachments) {
                String filePath = attachmentFolderPath + file;
                wait.until(ExpectedConditions.elementToBeClickable(seleteAttachmentBtn)).click();
                this.wait(3);
                Runtime.getRuntime().exec(scriptPath + " \"" + filePath + "\"");
                this.wait(7);
            }
            wait.until(ExpectedConditions.elementToBeClickable(uploadAttachmentBtn)).click();
            Thread.sleep(5000);

        } catch (Exception e) {
            // To send exception to log file
            log.info("Failed to attach files to email body:", e);
        }
        return this;
    }
    @Step("Get plain text email body in preview mode")
    public String getPlainTextEmailBodyInPreviewMode() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            WebElement emailBody = driver.findElement(By.xpath("//cc-email-editor[@ng-model='inboundEmail.body']//textarea"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", emailBody);
            emailBody.sendKeys(Keys.chord(Keys.CONTROL, "a"));
            emailBody.sendKeys(Keys.chord(Keys.CONTROL, "c"));
            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
            String text = (String) c.getData(DataFlavor.stringFlavor);
            return text;
        } catch (Exception e) {
            log.info("FAILED: No such element body email");
            return null;
        }
    }
    public boolean verifyTextAfterUsedCtrlDelete(String text) {
        try {
            Actions actions = new Actions(driver);
            actions.keyDown(Keys.CONTROL).sendKeys(Keys.DELETE).keyUp(Keys.CONTROL).build().perform();
            actions.keyDown(Keys.CONTROL).sendKeys("a").keyUp(Keys.CONTROL).build().perform();
            actions.keyDown(Keys.CONTROL).sendKeys("c").keyUp(Keys.CONTROL).build().perform();
            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
            String Text  = (String) c.getData(DataFlavor.stringFlavor);
            log.info("Actual text: "+Text);
            if(Text.equals(text)) {
                return true;
            } else {
                return false;
            }
        }catch (Exception e) {
            return false;
        }
    }

    @Step("Verify Account and Topic are displayed in Journey Home")
    public boolean verifyAccountAndServiceDisplayedInJourneyHome(String Service, String AccountID) {
        try {
            boolean result1 = false;
            boolean result2 = false;
            wait(1);
            List<WebElement> account = driver.findElements(By.xpath("//button[@class='mdc-tab']"));
            for (WebElement customer : account) {
                if (customer.getText().equals(AccountID)) {
                    customer.click();
                    result1 = true;
                    log.info("Choose account to check completed");
                    log.info("Account ID " + AccountID + " displayed correctly in Journey Home");
                    break;
                }
            }
            wait(1);
            List<WebElement> servicesVoice = driver.findElements(By.xpath("//button[@class='mdc-tab topic-mdc-tab']"));
            for (WebElement service : servicesVoice) {
                if (service.getText().equals(Service)) {
                    service.click();
                    log.info("Choose service to check completed");
                    log.info("Service " + Service + " displayed correctly in Journey Home");
                    result2 = true;
                    break;
                }
            }
            if(result1 && result2){
                return true;
            }else{
                log.info("Account Id or Service displayed incorrectly");
                return false;
            }
        }
        catch (Exception e) {
            return false;
        }
    }

    public String get_Selected_Disposition_Code(String ID){
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String selectedDispo=null;
        try{
            log.info("Clicking disposition code label");
            WebElement dispositionCodeLabel = driver.findElement(By.xpath("//md-menu-item[@id='ow_disposition_code_" + ID + "']/md-menu/button/span[text()='Disposition Codes']"));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", dispositionCodeLabel);
            Thread.sleep(1000);
            WebElement dispoName = driver.findElement(By.xpath("//button[@class='code_size md-button md-ink-ripple ow_disposition_reason_code_"+ ID +" aoc-accept']"));
            selectedDispo = dispoName.getText();
            Actions action = new Actions(driver);
            Thread.sleep(500);
            action.sendKeys(Keys.ESCAPE).build().perform();
            action.sendKeys(Keys.ESCAPE).build().perform();

        }
        catch (Exception e){
            log.info("Failed. Can not find selected disposition code: "+e);
        }
        return selectedDispo;

    }

    public boolean verify_Customer_Journey_is_not_available() {
        try {
            WebElement warningMessage = driver.findElement(By.xpath("//h2[contains(text(),'Customer Journey is not available')]"));
            if (!warningMessage.isDisplayed()) {
                log.info("The warning message is not displayed");
                return false;
            }
            return true;
        } catch (Exception e) {
            log.info("No such element ");
            return false;
        }
    }

    @Step("Get ScreenPop URL")
    public List<String> getScreenPopURL() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        List<String> urlList = new ArrayList<>();
        ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
        if (tabs.size() > 1) {
            int i = 1;
            for (String tab : tabs) {
                driver.switchTo().window(tab);
                if (i > 1) {
                    urlList.add(driver.getCurrentUrl());
                }
                i++;
            }
        }
        driver.switchTo().window(tabs.get(0));
        return urlList;
    }

    @Step("Get Title new tabs")
    public List<String> getTitleNewTabs() {
        List<String> urlList = new ArrayList<>();
        ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
        if (tabs.size() > 1) {
            int i = 1;
            for (String tab : tabs) {
                driver.switchTo().window(tab);
                if (i > 1) {
                    urlList.add(driver.getTitle());
                }
                i++;
            }
        }
        driver.switchTo().window(tabs.get(0));
        return urlList;
    }

    @Step("Get name screen pop is displaying")
    public List<String> getNameScreenPopInternal() {
        try {
            List<String> nameScreenpops = new ArrayList<>();
            List<WebElement> tabScreenpops = driver.findElements(By.xpath("//div[@class='widget widget--screen-pop']//md-tab-item"));
            for (WebElement name : tabScreenpops) {
                if(name.isDisplayed()) {
                    log.info("Screen pop : " + name.getText());
                    nameScreenpops.add(name.getText());
                }
            }
            return nameScreenpops;
        }catch (Exception e){
            log.info("No such tab Screen pop external");
            return null;
        }
    }

    public boolean verifyInternalScreenPopDisplay(String screenpopName, String url){
        boolean b=false;
        String xpathIframe="//iframe[@src='"+url+"']";
        Click_Widget("Screenpop");
        wait(2);

        WebElement screenpop = driver.findElement(By.xpath("// md-tab-item[contains(text(),\"" + screenpopName + "\")]"));
        wait.until(ExpectedConditions.elementToBeClickable(screenpop)).click();

        if ((this.eXISTs(driver, By.xpath(xpathIframe), 5) != null)) {
            WebElement iframe= driver.findElement(By.xpath(xpathIframe));
            if(iframe.isDisplayed()){
                b = true;
                log.info("Screen pop "+url+" is display internal");
            }


        } else {
            log.info("Not found internal screen pop "+url);
        }
        return b;
    }

    public int getScreenpopAvailableOnDom(String screenpopName){
        try {
            List<WebElement> list = driver.findElements(By.xpath("//div[@class='widget widget--screen-pop']//md-tab-item[contains(text(),'"+screenpopName+"')]"));
            if(list.size() !=0) {
                return list.size();
            }
        }catch (Exception e){
            log.info("No such element on Dom");
        }
        return 0;
    }

    @Step("Verify screenPop widgets can switch")
    public int verifyScreenPopWidgetsCanSwitch(String name) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int failedFlag = 0;
        Click_Widget("Screenpop");
        wait(2);
        List <String> nameList = Arrays.asList(name.split(";"));
        for(String n:nameList) {
            try {
                WebElement screenpop = driver.findElement(By.xpath("// md-tab-item[contains(text(),\"" + n + "\")]"));
                wait.until(ExpectedConditions.elementToBeClickable(screenpop)).click();
            } catch (Exception e) {
                failedFlag++;
            }
        }
        return failedFlag;
    }
    @Step("Check Priority ScreenPop")
    public int checkPriorityScreenpop(String name) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int failedFlag = 0;
        List <String> indexes =  new ArrayList<>();
        List <String> nameList = Arrays.asList(name.split(";"));
        for(String n:nameList){
            WebElement screenpop = driver.findElement(By.xpath("//md-tab-item[contains(text(),\""+n+"\")]"));
            if (screenpop.isDisplayed()) {
                indexes.add(screenpop.getAttribute("id").split("item-")[1]);
            }

        }
        if(indexes.size()>=2){
            for(int i = 0 ;i < indexes.size()-1;i++){
                if (Integer.parseInt(indexes.get(i+1))-Integer.parseInt(indexes.get(i))!=1){
                    failedFlag++;
                }
            }
        }

        return failedFlag;
    }

    @Step("Check Element exist or not")
    public boolean checkElementExist(WebElement el) {
        boolean present = false;
        try {
            el.isDisplayed();
            present = true;
        } catch (Exception e) {
            present = false;
        }
        return present;
    }

    @Step("Get title of this page")
    public String getTitleThisPage() {
        return driver.getTitle();
    }

    @Step("Choose address need consult")
    public void make_Consult_Voice(String sCustomerNumber, String consultTo, String consultAddress) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        switch (consultTo){

            case "Services":
                wait(3);
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                driver.findElement(By.xpath("//*[@aria-label='Consult "+sCustomerNumber+"']")).click();
                wait(1);
                driver.findElement(By.xpath("//md-menu-content[@aria-label='Consult']//md-menu-item[@ng-if='canShowServices']//button[@role='menuitem']")).click();

                WebElement consultAdd = driver.findElement(By.xpath("aria-label='Consult "+consultAddress+"'"));
                if (consultAdd.isDisplayed()) {
                    consultAdd.click();
                    log.info("Completed choose Servives to Consult");
                    break;
                }
                if(!consultAdd.isDisplayed()) {
                    WebElement search = driver.findElement(By.xpath("//body/div[@aria-hidden='false']/md-menu-content[@role='menu']/md-menu-item[@role='search']/form[@layout='row']/md-input-container/input"));
                    search.sendKeys(consultAddress);
                    executor.executeScript("arguments[0].click();", consultAdd);
                    log.info("Completed choose Servives to Consult");
                    break;
                }
                break;

            case "Team":
                wait(3);
                executor = (JavascriptExecutor) driver;
                WebElement consultBtn = driver.findElement(By.xpath("//*[@aria-label='Consult "+sCustomerNumber+"']"));
                executor.executeScript("arguments[0].click();", consultBtn);
                wait(1);
                driver.findElement(By.xpath("//*[@aria-label='Consult']//*[text()='Team']")).click();
                wait(1);

//                WebElement consultAdd1 = driver.findElement (By.xpath("//button[contains(@id,'Consult') and @aria-label='Consult team member "+consultAddress+"']"));
                wait(1);
                WebElement consultAdd1 = driver.findElement (By.xpath("//button[contains(@id,'Consult') and @aria-label='Consult team member "+consultAddress+"']"));
                wait(1);
                if (consultAdd1.isDisplayed()) {
                    executor.executeScript("arguments[0].click();", consultAdd1);
                    log.info("Choose Agent to consult successfully");
                    break;
                }
                if(!consultAdd1.isDisplayed()) {
                    WebElement search = driver.findElement(By.xpath("//body/div[@aria-hidden='false']/md-menu-content[@role='menu']/md-menu-item[@role='search']/form[@layout='row']/md-input-container/input"));
                    search.sendKeys(consultAddress);
                    executor.executeScript("arguments[0].click();", consultAdd1);
                    log.info("Completed choose Servives to Consult");
                    break;
                }
                break;
        }
        log.info("Completed the consulted call");
    }

    @Step("Check Participants Conference")
    public boolean checkParticipantsConference (String participant) {
        boolean result = false;
        try {
            wait.until(ExpectedConditions.visibilityOf(dropdownConferenceParticipant));
            dropdownConferenceParticipant.click();
            List<WebElement> partList = driver.findElements(By.xpath("*//li[@ng-repeat='participant in card.participants']"));
            List<String> actual = new ArrayList<>();
            List<String> participants = Arrays.asList(participant.split(";"));
            WebDriverWait wait5 = new WebDriverWait(driver, 5);
            for(WebElement part: partList) {
                actual.add(wait5.until(ExpectedConditions.visibilityOf(part)).getText());
                log.info(part.getText());
            }

            for(String i: actual) {
                for(String j:participants) {
                    if (i.equals(j)) {
                        log.info(i);
                        return true;
                    }
                }

            }
        } catch (Exception e) {
            log.info(e.getMessage());
            result = false;
        }
        return result;
    }

    public void switchToCoachingTab() {
        wait(2);
        if (!coachingTab.getAttribute("class").contains("md-active")) {
            wait.until(ExpectedConditions.elementToBeClickable(coachingTab)).click();
        }
    }

    public void switchToCustomerTab(String nameCustomer) {
        wait(2);
        String upperCaseNameCustomer = nameCustomer.toUpperCase();
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//md-tab-item[text()='" + upperCaseNameCustomer + " LASTNAME ']"))).click();
    }

    public int checkIconFile(String nameFile){
        try{
            wait(1);
            List<WebElement> iconFile = driver.findElements(By.xpath("//div[contains(text(),'"+nameFile+"')]//..//span[@class='aoc-file']"));
            return iconFile.size();
        }catch (Exception e){
            log.info("Not found icon file on ws");
            return 0;
        }
    }

    @Step("Close current URL tab")
    public void closeCurentURLTab(String expectedUrl) {
        ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
        wait(2);
        if (tabs.size() > 1) {
            for (String tab : tabs) {
                driver.switchTo().window(tab);
                if (driver.getCurrentUrl().equalsIgnoreCase(expectedUrl)) {
                    driver.close();
                }
            }
        }
        driver.switchTo().window(tabs.get(0));
    }
    @Step("Getting interaction of an outbound contact on WS")
    public String getInteractionIDOfOutbound(String contactType) {
        WebElement wc = driver.findElement(By.xpath("(//span[@aria-label='Active Outbound " + contactType + " Interaction'])"));
        String WCid = wc.getAttribute("id");
        String interactionId = WCid.split("_")[3];
        return interactionId;
    }

    @Step("Verify timestamp on notification")
    public boolean verifyTimestampOnNotification(String time, int desired) {
        boolean b = false;
        try {
            wait.until(ExpectedConditions.elementToBeClickable(BtnNotifications)).click();
            wait(12); //waiting for loading notification of broadcast messages on WS
            WebElement TimeStamp = driver.findElement(By.xpath("(//div[@class='time-stamp'])[" + desired + "]"));
            if (TimeStamp.isDisplayed()) {
                String timeString = TimeStamp.getText();
                DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("h:mm a");
                LocalTime Time = LocalTime.parse(timeString, inputFormatter);
                DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("hh:mm a");
                String formattedTime = Time.format(outputFormatter);
                if (formattedTime.contains(time)) {
                    log.info("Time notification: " + formattedTime);
                    b = true;
                }
            }
            Actions action = new Actions(driver);
            action.sendKeys(Keys.ESCAPE).build().perform();

        } catch (Exception e) {
            log.info("FAILED: No such element");
            b = false;
        }
        return b;
    }

    @Step("Verify broadcast message displayed on WS")
    public boolean verifyBroadcastMessageDisplayedOnWS(String Message, String sSupFullName) {
        boolean b = false;
        try {
            List<WebElement> BroadcastMessage = driver.findElements(By.xpath("//span[@class='toast__heading--text']"));
            for (WebElement broadcastMsg : BroadcastMessage) {
                if (broadcastMsg.isDisplayed()) {
                    String message = broadcastMsg.getText();
                    log.info("Broadcast message: " + broadcastMsg.getText());
                    String MsgOnWS = "From " + sSupFullName + ": " + Message;
                    if (message.equals(MsgOnWS)) {
                        b = true;
                    }break;
                }
            }
        } catch (Exception e) {
            log.info("Broadcast Message is not displayed on WS");
        }
        return b;
    }

    public String getToastMessageDisplay(int waitTime) throws InterruptedException {
        int seconds = 0;
        String toastMsg = null;
        for (WebElement toast : toastMessages) {
            if (!checkElementExist(toast) && waitTime > seconds) {
                seconds++;
            }
            else{
                Thread.sleep(2000);
                System.out.println("TOAST: " + toast.getText());
                toastMsg = toast.getText();
            }
        }
        return toastMsg;
    }
    public boolean verifyFieldsCustomerHistorySearch(int i, String fieldName, String expected) {
        log.info("---Verify '" + fieldName + "' field in Customer History Search.");
        WebElement field = driver.findElement(By.xpath("//cc-history-detail-item[@puppeteer-id='customerHistorySearch-history-details-item__" + i + "']"));
        String actual = wait.until(ExpectedConditions.visibilityOf(field)).getText();
        log.info("Expected: " + expected);
        log.info("Actual: " + actual);
        if (actual.toLowerCase().contains(expected.toLowerCase())) {
            log.info("FAILED. Field show incorrectly");
            return false;
        } else {
            log.info("Field show correctly");
            return true;
        }
    }
    public int OpenTranscriptAndCompareEmailAddressOnTheCustomerJourney(String sEmailKeyWord, String mailboxName, String mailbox, String toEmailAddress, String ccEmailAddress, String bccEmailAddress) {
        int failedFlag = 0;
        List<WebElement> journeyEmailDetailsFields = driver.findElements(By.xpath("//div[@class=\"journey-email-header\"]")); //journey-email-details
        int numOfJourneyDetails = journeyEmailDetailsFields.size();
        log.info("Num OF JOURNEY: " + numOfJourneyDetails);

        for (WebElement journeyEmailDetail : journeyEmailDetailsFields) {
            if (journeyEmailDetail.getText().contains("FW")) {
                String journeyContent = journeyEmailDetail.getText();
                log.info("INFO. Email fields on Transcript show: " + journeyContent);
                if (!journeyContent.trim().contains("Subject: " + sEmailKeyWord)) {
                    failedFlag++;
                    log.info("FAILED. Email field \"Subject\" on Transcript show incorrectly");
                }
                log.info("From: " + mailboxName.toLowerCase()+ " <" + mailbox.toLowerCase() + ">");
                log.info(journeyContent.trim().toLowerCase());
                if (!journeyContent.trim().toLowerCase().contains("from: " + mailboxName.toLowerCase()+ " <" + mailbox.toLowerCase() + ">")) {
                    failedFlag++;
                    log.info("FAILED. Email field \"From\" on Transcript show incorrectly");
                }
                if (!journeyContent.trim().contains("To: " + toEmailAddress.trim())) {
                    failedFlag++;
                    log.info("FAILED. Email field \"To\" on Transcript show incorrectly");
                }

                if (!journeyContent.trim().contains("Cc: " + ccEmailAddress.trim())) {
                    failedFlag++;
                    log.info("FAILED. Email field \"Cc\" on Transcript show incorrectly");
                }

                if (journeyContent.trim().contains("Bcc: " + bccEmailAddress.trim())) {
                    failedFlag++;
                    log.info("FAILED. Email field \"Bcc\" on Transcript show incorrectly");
                }
            }
            break;
        }
        return failedFlag;
    }

    public boolean fillMultiAddressEmail(WebElement field, List<String> emailAddresses) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", field);
            field.click();
            for (String emailAddress : emailAddresses) {
                field.sendKeys(emailAddress);
                field.sendKeys(Keys.ENTER);
            }
            return true;
        } catch (Exception e) {
            log.info("FAILED: No Such Element");
            return false;
        }
    }

    public List<String> getListSuggestedContent(String option){
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        List<String> stringListSuggestedContent= new ArrayList<>();
        List<WebElement> elementsAutoPhrases=null;
        try{
            if(option.equals("phrases")){
                ChatSuggestedPhrasesTab.click();
                wait(1);
                elementsAutoPhrases= driver.findElements(By.xpath("//md-list-item[@class='widget--suggested-content-phrases-listItem _md-button-wrap md-with-secondary _md md-clickable']"));
            }
            if(option.equals("urls")){
                ChatPagePushURLsTab.click();
                wait(1);
                elementsAutoPhrases= driver.findElements(By.xpath("//md-list-item[@class='widget--suggested-content-phrases-listItem _md-button-wrap _md md-clickable']"));
            }
            if(elementsAutoPhrases.size()>0){
                for( WebElement autophrase: elementsAutoPhrases){
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", autophrase);
                    stringListSuggestedContent.add(autophrase.getText());
                }
            }
        }
        catch (Exception ex){
            ex.printStackTrace();
        }
        return stringListSuggestedContent;
    }
    public boolean verifyStatusTouchpointCustomerJourney(String StatusTouchpoint) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", transcripIcon);
            WebElement status = driver.findElement(By.xpath("//label[@class='timelineContentStatus-Label'][normalize-space()='" + StatusTouchpoint + "']"));
            if (status.isDisplayed()) {
                if (status.getText().contains(StatusTouchpoint)) {
                    return true;
                } else {
                    log.info("FAILED. Touchpoint " + StatusTouchpoint + "incorrectly");
                    return false;
                }
            }else return false;
        } catch (Exception e) {
            return false;
        }
    }

    public boolean CompareEmailAddressOnTheCustomerJourney(String sEmailKeyWord, String mailboxName, String mailbox, String toEmailAddress, String ccEmailAddress, String bccEmailAddress) {
        try{
            List<WebElement> journeyEmailDetailsFields = driver.findElements(By.xpath("//div[@class=\"journey-email-header\"]")); //journey-email-details
            int numOfJourneyDetails = journeyEmailDetailsFields.size();
            log.info("Num OF JOURNEY: " + numOfJourneyDetails);
            for (WebElement journeyEmailDetail : journeyEmailDetailsFields) {
                if (journeyEmailDetail.getText().contains("FW")) {
                    String journeyContent = journeyEmailDetail.getText();
                    log.info("INFO. Email fields on Transcript show: " + journeyContent);
                    if (!journeyContent.contains("Subject: " + sEmailKeyWord)) {
                        log.info("FAILED. Email field \"Subject\" on Transcript show incorrectly");
                        return false;
                    }
                    if (!journeyContent.trim().toLowerCase().contains("from: " + mailboxName.toLowerCase() + " <" + mailbox.toLowerCase() + ">")) {
                        log.info("FAILED. Email field \"From\" on Transcript show incorrectly");
                        return false;
                    }

                    if (!journeyContent.contains("To: " + toEmailAddress)) {
                        log.info("FAILED. Email field \"To\" on Transcript show incorrectly");
                        return false;
                    }
                    if (!journeyContent.contains("Cc: " + ccEmailAddress)) {
                        log.info("FAILED. Email field \"Cc\" on Transcript show incorrectly");
                        return false;
                    }
                    if (journeyContent.contains("Bcc: " + bccEmailAddress)) {
                        log.info("FAILED. Email field \"Bcc\" on Transcript show incorrectly");
                        return false;
                    }
                }
            }
            return true;
        }catch (Exception ex){
            log.info("FAILED: To verify email addresses on the Customer Journey ");
            return false;
        }
    }

    @Step("Get the body content's on Customer History Search")
    public Map<String, String> getBodyDetailContentOnCHS(String contentFindInTranscript) throws ParseException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        Map<String, String> result = new HashMap<String, String>();
        log.info("Get Body CONTENT in Customer History Search");
        List<WebElement> contents = driver.findElements(By.xpath("(//div[@id='email--textarea']/div[contains(text(),'"+contentFindInTranscript+"')])"));

        for (int i = 1; i < contents.size() + 1; i++) {
            WebElement content = driver.findElement(By.xpath("(//div[@id='email--textarea']/div[contains(text(),'"+contentFindInTranscript+"')])["+i+"]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", content);
            result.put("Content"+i, content.getText());
        }


        return result;
    }
    @Step("Check ForWard Email Details On TheCustomer Journey")
    public int OpenTranscriptAndCompare_FW_EmailDetailsOnTheCustomerJourney(String sEmailKeyWord, String fromEmailAddressName, String fromEmailAddress, String toEmailAddress, String sEmailBodyText) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int failedFlag = 0;
        log.info("Open Transcript");
        WebElement transcripIcon = driver.findElement(By.xpath("//div[@class=\"transcriptButtonContainer transcriptLabel\"]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", transcripIcon);
        if (transcripIcon.isDisplayed()) {
            transcripIcon.click();
            this.wait(5);
        } else {
            log.info("Cannot find to Transcript.");
        }
        List<WebElement> journeyEmailDetailsFields = driver.findElements(By.xpath("//div[@class=\"journey-email-header\"]")); //journey-email-details
        int numOfJourneyDetails = journeyEmailDetailsFields.size();
        log.info("Num OF JOURNEY: " + numOfJourneyDetails);

        for (WebElement journeyEmailDetail : journeyEmailDetailsFields) {
            if (journeyEmailDetail.getText().contains("FW")) {
                String journeyContent = journeyEmailDetail.getText();
                log.info("INFO. Email fields on Transcript show: " + journeyContent);
                if (!journeyContent.trim().contains("Subject: " + sEmailKeyWord)) {
                    failedFlag++;
                    log.info("FAILED. Email field \"Subject\" on Transcript show incorrectly");
                }
                if (!journeyContent.trim().contains("From: " + fromEmailAddressName + " <" + fromEmailAddress + ">")) {
                    failedFlag++;
                    log.info("FAILED. Email field \"From\" on Transcript show incorrectly");
                }
                if (!journeyContent.trim().contains("To: " + toEmailAddress.trim())) {
                    failedFlag++;
                    log.info("FAILED. Email field \"To\" on Transcript show incorrectly");
                }
            }
            break;
        }
        WebElement journeyEmailDetailsContent = driver.findElement(By.xpath("//p[@class=\"email-body-content\"]"));
        log.info("INFO. Email content on Transcript show: " + journeyEmailDetailsContent.getText());
        if (!journeyEmailDetailsContent.getText().contains(sEmailBodyText)) {
            failedFlag++;
            log.info("FAILED. Email body content on Transcript show incorrectly");
        }
        return failedFlag;
    }
    public List<LocalDate> getCHSDateTimeList(){
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        List<LocalDate> dateTimeList= new ArrayList<>();
        boolean hasMorePage= true;
        log.info("Get Customer History Search Date and Time List");
        do{
            int rowCount = getRowsSearchHistoryResult();
            for (int i = 1; i <= rowCount; i++) {
                WebElement latestTime = driver.findElement(By.xpath("(//cc-history-results[@widget='customerHistory']//tr[@ng-repeat-start])["+i+"]//td[1]"));
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", latestTime);
                String strDateTime = latestTime.getText();
                String time = strDateTime.split("\n")[0] + " " + strDateTime.split("\n")[1];
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("M/d/yy h:mm a"); // creating a formatter object with the given format
                LocalDate dateTime = LocalDate.parse(time, formatter);
                dateTimeList.add(dateTime);
            }
            if(btnNextPageCH.isDisplayed() && btnNextPageCH.isEnabled()){
                btnNextPageCH.click();
                wait(1);
            }
            else hasMorePage=false;
        }while (hasMorePage);
        return dateTimeList;
    }

    public void selectAvailableDeferTime (String timeDefer) {
        try {
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//md-content[@class='_md']//md-radio-button[@value='"+timeDefer+"']"))).click();
            log.info("Clicking available defer time");
        } catch (Exception e) {
            log.info("No such element");
        }
    }

    @Step("Compose SMS Beyond Character Limit")
    public int composeSMSBeyondCharacterLimit(String exceed){
        int failedFlag = 0;
        for (WebElement elMessageArea : messageArea) {
            if(elMessageArea.isDisplayed()) {
                int i = 1;
                while (i<=34){
                    if(i<=24) {
                        elMessageArea.sendKeys("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
                    }else{
                        elMessageArea.sendKeys("aaaaaaaaaa");
                        String limit = String.valueOf(100-(10-(34-i))*10);
                        wait(1);
                        if (!(getCharactersLeft.getText().equals("Characters left: " + limit))) {
                            log.info(getCharactersLeft.getText());
                            log.info("Characters left: " + limit);
                            log.info("FAILED: The Characters left is display incorrectly");
                            failedFlag++;
                        }
                    }
                    i++;
                }
                if(exceed != null) {
                    elMessageArea.sendKeys(exceed);
                    wait(1);
                }
            }
        }
        return failedFlag;
    }
    @Step("Verify message display when Supervisor Coaching for Messaging channel")
    public boolean verifyAsyncMessageOnCoachingTab(String messageText) {
        try {
            wait(1);
            WebElement coachingTab= driver.findElement(By.xpath("//div[contains(@class,'tab__MENTOR')]//md-content[@class='messenger-messages__inner _md ps']"));
            wait.until(ExpectedConditions.textToBePresentInElement(coachingTab, messageText));
            log.info("Inside verify chat session messages at Agent window:\n" + coachingTab.getText());
            return true;
        } catch (Exception e) {
            log.error("The text specified not found inside coaching session at Agent window." + " " + messageText);
            e.printStackTrace();
            return false;
        }
    }

    @Step("Verify message on notification")
    public boolean verifyMessageOnNotification(String message) {
        boolean b = false;
        try {
            wait.until(ExpectedConditions.elementToBeClickable(BtnNotifications)).click();
            wait(10); //waiting for loading notification of broadcast messages on WS
            List<WebElement> Msg = driver.findElements(By.xpath("//div[@class='message']"));
            for (WebElement msg : Msg) {
                if (msg.getText().contains(message)) {
                    log.info("Message notification: " + msg.getText());
                    b = true;
                }
                break;
            }
            Actions action = new Actions(driver);
            action.sendKeys(Keys.ESCAPE).build().perform();

        } catch (Exception e) {
            log.info("FAILED: No such element");
            b = false;
        }
        return b;
    }

    @Step("Clear message on notification")
    public void clearMessageOnNotification() {
        try {
            wait.until(ExpectedConditions.elementToBeClickable(BtnNotifications)).click();
            wait(10); //waiting for loading notification of broadcast messages on WS
            if(btnClearNotification.isDisplayed()){
                btnClearNotification.click();
            }
            Actions action = new Actions(driver);
            action.sendKeys(Keys.ESCAPE).build().perform();

        } catch (Exception e) {
            log.info("No such element");
            e.printStackTrace();
            Actions action = new Actions(driver);
            action.sendKeys(Keys.ESCAPE).build().perform();
        }
    }


    @Step("Download Attachments received on supervisor side for async message channel")
    public int downloadFileAsyncMessageDisplayOnWS(List<String> fileName) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String home = System.getProperty("user.home");
        String downloadDirectory = home + "/Downloads/";
        deleteFilesInFolder(downloadDirectory, fileName);
        int failedFlag = 0;
        List<WebElement> elAttachments = driver.findElements(By.xpath("//a[@class='async-wrapper__file-link' ]"));
        for (WebElement elAttachment : elAttachments) {
            try {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", elAttachment);
                elAttachment.click();
                log.info("Downloaded the attachments");
                this.wait(2);
            } catch (Exception e) {
            }
        }
        for (String fileDownload : fileName) {
            File filePath = new File(downloadDirectory + fileDownload);
            if (!filePath.exists()) {
                log.info(String.format("FAILED. The attachment: %s not found", fileDownload));
                failedFlag++;
            } else {
                log.info(String.format("The attachment: %s found", fileDownload));
            }
        }
        return failedFlag;
    }

    /**
     * <h1>searchWorkCode</h1> This method is use for search for a work code on work card and verify if it's found or not
     *
     * @param workcode as name of the Work code that need to find
     * @param ID as interaction ID of Work card
     * @return true/false
     */
    public boolean searchWorkCode(String workcode, String ID) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        Boolean isWorkCodeFound=false;
        try {
            WebDriverWait wait = new WebDriverWait(driver, 10);
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_More_btn_" + ID + "']"))).click();
            log.info("Clicking Work codes label");
            WebElement workCodeLabel = driver.findElement(By.xpath("//md-menu-item[@id='ow_work_code_" + ID + "']/md-menu/button/span[text()='Work Codes']"));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", workCodeLabel);
            Thread.sleep(2000);
            WebElement searchCode= driver.findElement(By.xpath("//*[@aria-label='Search Work Code']"));
            wait.until(ExpectedConditions.visibilityOf(searchCode));
            searchCode.clear();
            Thread.sleep(1000);
            searchCode.sendKeys(workcode);
            Thread.sleep(1000);
            WebElement codeFound= driver.findElement(By.xpath("//*[@aria-label='"+ workcode +"']"));
            log.info("Work code found= "+workcode);
            isWorkCodeFound=true;
            Actions action = new Actions(driver);
            action.sendKeys(Keys.ESCAPE).build().perform();
            action.sendKeys(Keys.ESCAPE).build().perform();
        }
        catch (Exception exception){
            log.info("Can not find work code");
            isWorkCodeFound=false;
        }
        return isWorkCodeFound;
    }

    public boolean verifyNameOfMessageOnContactWidget(String expectedName) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        List<WebElement> agentLabel = driver.findElements(By.xpath("//strong[@class='message-info__participantName'][normalize-space()='" + expectedName + "']"));
        for (WebElement element : agentLabel) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
            log.info(element.getText().trim());
            log.info(expectedName);
            if (element.isDisplayed()) {
                element.getText().trim().equals(expectedName);
                return true;

            }
        }
        return false;
    }

    public boolean verifyNameOfMessageOnContactWidget(String message, String expectedName) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String sender=null;
        List<WebElement> agentLabel = driver.findElements(By.xpath("//span[@class='message-body__text' and contains(text(),'"+message+"')]/../..//strong[@class='message-info__participantName']"));
        for (WebElement element : agentLabel) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
            if (element.isDisplayed()) {
                sender= element.getText().trim();
                if(sender.equals(expectedName)){
                    log.info(sender+ " is sender name of '"+message+"'");
                    return true;
                }
            }
        }
        log.info("Sender name for message '"+message+" is not as expected. Expected is "+expectedName+". But found "+sender);
        return false;
    }


    public void makeDNCallOnTeam(String sFullName){
        try{
            WebElement itemMember = driver.findElement(By.xpath("//cc-team-view[@widgetname='expandedTeamView']//span[text()='"+sFullName+"']"));
            moveMouseToElement(itemMember);
            wait(1);
            WebElement btnCall = driver.findElement(By.xpath("//cc-team-view[@widgetname='expandedTeamView']//span[text()='"+sFullName+"']//..//..//..//button[@id='ow_click_to_call']"));
            if(btnCall.isDisplayed()){
                btnCall.click();
                log.info("Make DN call on Team successfully");
            }
        }catch (Exception e){
            log.info("Make DN call is unsuccessful - No such element: " +sFullName);
        }
    }
    @Step("Check if there is active work card on Workspaces")
    public boolean checkActiveWorkCardWithInteractionID(String InteractionID) {
        try {
            WebElement btnEnd = driver.findElement(By.id("ow_Card_End_btn_" + InteractionID));
            if (btnEnd.isDisplayed()) {
                log.info("Active work card is displayed");
                return true;
            } else {
                log.info("Active work card not present");
                return false;
            }
        } catch (Exception e) {
            log.info("Exception occurred in Check_For_Active_Work_Card call function ");
            return false;
        }

    }

    @Step("Click to call in Customer Detail")
    public void clickToCallInCustomerDetail (String sCustomerNumber) {
        try {
            List<WebElement> backButton = driver.findElements(By.xpath("//button[@class='back-button md-button md-ink-ripple']"));
            if(backButton.size() == 0){
                wait.until(ExpectedConditions.elementToBeClickable(moreInfoCustomerDetail)).click();
            }
            WebElement phone = driver.findElement(By.xpath("//span[@class='click-to-call__clickable-number'][normalize-space()='"+sCustomerNumber+"']"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", phone);
            phone.click();
            //            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[@class='click-to-call__clickable-number'][normalize-space()='"+sCustomerNumber+"']"))).click();
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[@ng-click='makeOutboundCall(address)']//span[text()='"+sCustomerNumber+"']"))).click();
            log.info("Clicking successfully");
        } catch (Exception e) {
            log.info("No such element");
        }
    }

    @Step("Verify Button On Work Card Available")
    public boolean verifyButtonOnWorkCardAvailable (String InteractionID) {
        try {
            if (wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@id='ow_Card_More_btn_"+InteractionID+"']"))).isDisplayed()){
                log.info("More button is display");
            };
            if (wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@id='ow_Card_Transfer_"+InteractionID+"_btn']"))).isDisplayed()){
                log.info("Transfer button is display");
            };
            if (wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@id='ow_Card_End_btn_"+InteractionID+"']"))).isDisplayed()){
                log.info("End button is display");
            };
            return true;
        } catch (Exception e) {
            log.info("No such element");
            return false;
        }
    }

    public boolean keyboardShortcutGoNotReady () {
        try {
            Actions actions = new Actions(driver);
            actions.keyDown(Keys.CONTROL).keyDown(Keys.ALT).sendKeys("p").keyUp(Keys.CONTROL).keyUp(Keys.ALT).perform();
            wait(1); //wait for agent state change to ready
            if (Get_Agent_State().equals("Not_Ready")){
                return true;
            }else return false;

        }catch (Exception e) {
            return false;
        }
    }

    public boolean keyboardShortcutGoReady () {
        try {
            Actions actions = new Actions(driver);
            actions.keyDown(Keys.CONTROL).keyDown(Keys.ALT).sendKeys("o").keyUp(Keys.CONTROL).keyUp(Keys.ALT).perform();
            if (Get_Agent_State().equals("Ready")){
                return true;
            }else return false;

        }catch (Exception e) {
            return false;
        }
    }

    public Actions actions(){
        Actions actions = new Actions(driver);
        return actions;
    }

    public boolean keyboardShortcutFinishWork () {
        try {
            Actions actions = new Actions(driver);
            actions.keyDown(Keys.CONTROL).keyDown(Keys.ALT).sendKeys("l").keyUp(Keys.CONTROL).keyUp(Keys.ALT).perform();
            log.info("Agent state: "+ Get_Agent_State());
            if (Get_Agent_State().equals("Connected")){
                return true;
            }else return false;

        }catch (Exception e) {
            return false;
        }
    }

    public List<String> GetListWorkCodes(String ID) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        Actions action = new Actions(driver);
        wait(1);
        List<String> workcodesList= new ArrayList<>();
        log.info("Open and get list Work codes");
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_More_btn_" + ID + "']"))).click();
        log.info("Clicking Work codes label");
        WebElement workCodeLabel = driver.findElement(By.xpath("//md-menu-item[@id='ow_work_code_" + ID + "']/md-menu/button/span[text()='Work Codes']"));
        action.moveToElement(workCodeLabel).click().build().perform();
        Thread.sleep(2000);
        List<WebElement> wcNames = driver.findElements(By.xpath("//button[contains(@class,'ow_work_code_reason_code_" + ID + "')]"));
        log.info("Work codes list size= "+wcNames.size());
        for (int i = 0; i < wcNames.size(); i++) {
            wait.until(ExpectedConditions.visibilityOf(wcNames.get(i)));
            workcodesList.add(wcNames.get(i).getText());
            log.info(wcNames.get(i).getText());
        }

        action.sendKeys(Keys.ESCAPE).build().perform();
        action.sendKeys(Keys.ESCAPE).build().perform();
        wait(1);
        return workcodesList;
    }

    public List<String> GetListDispositionCodes(String ID) throws InterruptedException {
        Actions action= new Actions(driver);
        wait(1);
        List<String> dispoCodesList= new ArrayList<>();
        log.info("Open and get list Work codes");
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_More_btn_" + ID + "']"))).click();
        log.info("Clicking Disposition codes label");
        WebElement dispositionCodeLabel = driver.findElement(By.xpath("//md-menu-item[@id='ow_disposition_code_" + ID + "']/md-menu/button/span[text()='Disposition Codes']"));
        action.moveToElement(dispositionCodeLabel).click().build().perform();
        Thread.sleep(2000);

        List<WebElement> dispoName = driver.findElements(By.xpath("//button[contains(@class,'ow_disposition_reason_code_" + ID + "')]"));
        log.info("Disposition codes list size= "+dispoName.size());
        for (int i = 0; i < dispoName.size(); i++) {
            dispoCodesList.add(dispoName.get(i).getText());
            log.info(dispoName.get(i).getText());
        }

        action.sendKeys(Keys.ESCAPE).build().perform();
        action.sendKeys(Keys.ESCAPE).build().perform();
        wait(1);
        return dispoCodesList;

    }

    public List<String> GetListDeferCodes(){
        List<String> deferCodesList= new ArrayList<>();
        log.info("Open and get list Defer codes");
        wait.until(ExpectedConditions.elementToBeClickable(Defer)).click();

        List<WebElement> deferCodes = driver.findElements(By.xpath("//md-radio-button[contains(@ng-repeat, 'reason in deferReasons')]"));
        log.info("Defer codes list size= "+deferCodes.size());
        for (int i = 0; i < deferCodes.size(); i++) {
            deferCodesList.add(deferCodes.get(i).getAttribute("aria-label"));
        }
        wait(1);
        Actions action = new Actions(driver);
        action.sendKeys(Keys.ESCAPE).build().perform();
        wait(1);

        return deferCodesList;
    }


    @Step("Click to call in Customer Detail")
    public void editAndClickToCallInCustomerDetail (String sCustomerNumber, String sEditNumber) {
        try {
            wait.until(ExpectedConditions.elementToBeClickable(moreInfoCustomerDetail)).click();
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[@class='click-to-call__clickable-number'][normalize-space()='"+sCustomerNumber+"']"))).click();
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[@ng-click='addToDialer(address)']//span[text()='"+sCustomerNumber+"']"))).click();
            wait.until(ExpectedConditions.elementToBeClickable(btn8438)).click();
            if (inputCallOutbound.isDisplayed()){
                inputCallOutbound.clear();
                inputCallOutbound.sendKeys(sEditNumber);
                log.info("Edit number completed");
            }
            wait.until(ExpectedConditions.elementToBeClickable(btnCallOutbound)).click();
            log.info("Clicking successfully");
        } catch (Exception e) {
            log.info("No such element");
        }
    }
    @Step("click Tabs in Setting Widget")
    public void click_Tabs_in_Setting_Widget (String tabName) {
        try{
            wait(2);
            WebElement sButton = driver.findElement(By.xpath("//md-tab-item/span[contains(text(),'"+tabName+"')]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", sButton);
            sButton.click();
            wait(2);

        }catch (Exception e){
            e.getMessage();
            log.info("Failed no such element");
        }
    }
    @Step("Select Layout")
    public void Select_Layout (String LayoutName) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try{
            wait(1);
            WebElement sDropdown = driver.findElement(By.xpath("//md-select[@aria-label='Select a layout']/md-select-value/span/../span[@class='md-select-icon']"));
            if(sDropdown.isDisplayed()){
                sDropdown.click();
            }
            wait(2);
            WebElement sButton = driver.findElement(By.xpath("//md-content[@class='_md']/md-option/div[contains(text(),'"+LayoutName+"')]"));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", sButton);
            wait(2);

        }catch (Exception e){
            log.info("FAILED: No such element");
        }
    }
    @Step("check Layout Updated Or Not")
    public boolean check_Layout_Updated_Or_Not (int layoutNumber, String WidgetName1, String WidgetName2, String WidgetName3, String WidgetName4, String WidgetName5, String WidgetName6) {
        switch (layoutNumber) {
            case 0:
                log.info("Verify widget: " +WidgetName1);
                List<WebElement> widget = driver.findElements(By.xpath("//div[@class='context-widget layout-row flex']/div/div[contains(@class,'widget--" + WidgetName1.replace(" ","-").toLowerCase() + "')]"));
                for (WebElement wid : widget){
                    if (wid.isDisplayed()) {
                        log.info("Widget are correct");
                        return true;
                    }
                }
                break;
            case 1:
                log.info("Verify widget1: " +WidgetName1);
                String widGet1 = String.format("(//div[@class='layout-row flex']//div[@class='context-tab layout-row flex']//div[@class='context-widget layout-row flex'])[1]//div[@class='widget widget--%s']", WidgetName1.replace(" ","-").toLowerCase());
                String widGet2 = String.format("(//div[@class='layout-row flex']//div[@class='context-tab layout-row flex']//div[@class='context-widget layout-row flex'])[2]//div[@class='widget widget--%s']", WidgetName2.replace(" ","-").toLowerCase());
                WebElement widget1 = driver.findElement(By.xpath(widGet1));
                log.info("Verify widget2: " +WidgetName2);
                WebElement widget11 = driver.findElement(By.xpath(widGet2));
                if (widget1.isDisplayed() && widget11.isDisplayed()) {
                    log.info("Widget1 and Widget2 are correct");
                    return true;
                }
                break;
            case 2:
                log.info("Verify widget1: " +WidgetName1);
                WebElement widget2 = driver.findElement(By.xpath("(//div[@class='context-tab layout-row flex']/..//div[@class='context-widget layout-row flex-70'])/..//div[@class='widget widget--"+WidgetName1.replace(" ", "-").toLowerCase()+"']"));
                log.info("Verify widget2: " +WidgetName2);
                WebElement widget22 = driver.findElement(By.xpath("(//div[@class='context-tab layout-row flex']/..//div[@class='context-widget layout-row flex-70'])/..//div[@class='widget widget--"+WidgetName2.replace(" ", "-").toLowerCase()+"']"));
                if (widget2.isDisplayed() && widget22.isDisplayed()) {
                    log.info("Widget1 and Widget2 are correct");
                    return true;
                }
                break;
            case 3:
                log.info("Verify widget1: " +WidgetName1);
                WebElement widget3 = driver.findElement(By.xpath("(//div[@class='context-tab layout-row flex']/div[@class='layout-column flex'])[1]/..//div[@class='widget widget--"+WidgetName1.replace(" ", "-").toLowerCase()+"']"));
                log.info("Verify widget2: " +WidgetName2);
                WebElement widget33 = driver.findElement(By.xpath("(//div[@class='context-tab layout-row flex']/div[@class='layout-column flex'])[1]/..//div[@class='widget widget--"+WidgetName2.replace(" ", "-").toLowerCase()+"']"));
                if (widget3.isDisplayed() && widget33.isDisplayed()) {
                    log.info("Widget1 and Widget2 are correct");
                    return true;
                }
                break;
            case 4:
                log.info("Verify widget1: " +WidgetName1);
                WebElement widget4 = driver.findElement(By.xpath("(//div[@class='context-tab layout-row flex']/div[@class='layout-column flex'])[1]/..//div[@class='widget widget--"+WidgetName1.replace(" ", "-").toLowerCase()+"']"));
                log.info("Verify widget2: " +WidgetName2);
                WebElement widget44 = driver.findElement(By.xpath("(//div[@class='context-tab layout-row flex']/div[@class='layout-column flex'])[1]/..//div[@class='widget widget--"+WidgetName2.replace(" ", "-").toLowerCase()+"']"));
                log.info("Verify widget3: " +WidgetName3);
                WebElement widget444 = driver.findElement(By.xpath("(//div[@class='context-tab layout-row flex']/div[@class='layout-column flex'])[2]/..//div[@class='widget widget--"+WidgetName3.replace(" ", "-").toLowerCase()+"']"));
                if (widget4.isDisplayed() && widget44.isDisplayed() && widget444.isDisplayed()) {
                    log.info("Widget1 & Widget2 & Widget3 are correct");
                    return true;
                }
                break;
            case 5:
                log.info("Verify widget1: " +WidgetName1);
                WebElement widget5 = driver.findElement(By.xpath("(//div[@class='context-tab layout-row flex']/div[@class='layout-column flex'])[1]/..//div[@class='widget widget--"+WidgetName1.replace(" ", "-").toLowerCase()+"']"));
                log.info("Verify widget2: " +WidgetName2);
                WebElement widget55 = driver.findElement(By.xpath("(//div[@class='context-tab layout-row flex']/div[@class='layout-column flex'])[2]/..//div[@class='widget widget--"+WidgetName2.replace(" ", "-").toLowerCase()+"']"));
                log.info("Verify widget3: " +WidgetName3);
                WebElement widget555 = driver.findElement(By.xpath("(//div[@class='context-tab layout-row flex']/div[@class='layout-column flex'])[2]/..//div[@class='widget widget--"+WidgetName3.replace(" ", "-").toLowerCase()+"']"));
                if (widget5.isDisplayed() && widget55.isDisplayed() && widget555.isDisplayed()) {
                    log.info("Widget1 & Widget2 & Widget3 are correct");
                    return true;
                }
                break;
            case 6:
                log.info("Verify widget6: " +WidgetName1);
                String widGet6 = String.format("(//div[@class='context-tab layout-column flex']//div[@class='layout-row flex']//div[@class='context-widget layout-row flex'])[1]//div[@class='widget widget--%s']", WidgetName1.replace(" ","-").toLowerCase());
                String widGet66 = String.format("(//div[@class='context-tab layout-column flex']//div[@class='layout-row flex']//div[@class='context-widget layout-row flex'])[2]//div[@class='widget widget--%s']", WidgetName2.replace(" ","-").toLowerCase());
                String widGet666 = String.format("//div[@class='context-tab layout-column flex']//div[@class='layout-column flex']//div[@class='widget widget--%s']", WidgetName3.replace(" ","-").toLowerCase());
                WebElement widget6 = driver.findElement(By.xpath(widGet6));
                log.info("Verify widget66: " +WidgetName2);
                WebElement widget66 = driver.findElement(By.xpath(widGet66));
                log.info("Verify widget666: " +WidgetName3);
                WebElement widget666 = driver.findElement(By.xpath(widGet666));
                if (widget6.isDisplayed() && widget66.isDisplayed() && widget666.isDisplayed()) {
                    log.info("Widget1, Widget2 and Widget3 are correct");
                    return true;
                }
                break;
            case 7:
                log.info("Verify widget1: " +WidgetName1);
                WebElement widget7 = driver.findElement(By.xpath("((//div[@class='context-tab layout-column flex']/div)[1]/div)[1]/div/div[contains(@class,'widget--"+WidgetName1.replace(" ", "-").toLowerCase()+"')]"));
                log.info("Verify widget2: " +WidgetName2);
                WebElement widget77 = driver.findElement(By.xpath("((//div[@class='context-tab layout-column flex']/div)[2]/div)[1]/div/div[contains(@class,'widget--"+WidgetName2.replace(" ", "-").toLowerCase()+"')]"));
                log.info("Verify widget3: " +WidgetName3);
                WebElement widget777 = driver.findElement(By.xpath("((//div[@class='context-tab layout-column flex']/div)[2]/div)[2]/div/div[contains(@class,'widget--"+WidgetName3.replace(" ", "-").toLowerCase()+"')]"));
                if (widget7.isDisplayed() && widget77.isDisplayed() && widget777.isDisplayed()) {
                    log.info("Widget1 & Widget2 & Widget3 are correct");
                    return true;
                }
                break;
            case 8:
                if (driver.findElement(By.xpath("((//div[@class='context-tab layout-column flex']/div)[1]/div)[1]//div/h5[contains(@class,'"+WidgetName1.replace(" ", "-").toLowerCase()+"')]")).isDisplayed()
                        && driver.findElement(By.xpath("((//div[@class='context-tab layout-column flex']/div)[1]/div)[2]//div/h5[contains(@class,'"+WidgetName2.replace(" ", "-").toLowerCase()+"')]")).isDisplayed()
                        && driver.findElement(By.xpath("((//div[@class='context-tab layout-column flex']/div)[2]/div)[1]//div/h5[contains(@class,'"+WidgetName3.replace(" ", "-").toLowerCase()+"')]")).isDisplayed()
                        && driver.findElement(By.xpath("((//div[@class='context-tab layout-column flex']/div)[2]/div)[1]//div/h5[contains(@class,'"+WidgetName3.replace(" ", "-").toLowerCase()+"')]")).isDisplayed()) {
                    log.info("Widget1 & Widget2 & Widget3 & Widget4 are correct");
                    return true;
                }
                break;
            default:
                log.info("Widget Not Found");
                return false;
        }
        return true;
    }

    @Step("role: agent,customer,bot,...")
    public boolean verifyLinkMessage(String link, String role){
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try{
            String mainTab = driver.getWindowHandle();
            WebElement linkMessage = driver.findElement(By.xpath("//*[@class='messenger-messages__inner _md ps ps--active-y']//div[contains(@class,'messenger-message--"+role+"')]//a[text()='"+link+"']"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", linkMessage);
            linkMessage.click();
            ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
            if (tabs.size() > 1) {
                int i = 1;
                for (String tab : tabs) {
                    driver.switchTo().window(tab);
                    if (i > 1) {
                        if(driver.getCurrentUrl().equals(link)){
                            driver.close();
                            driver.switchTo().window(mainTab);
                            return true;
                        }
                    }
                    i++;
                }
            }
        }catch (Exception e){
            log.info("No such element link message");
        }
        return false;
    }
    public String  getTextBodyEmailAdhoc(){
        String sBodyAdhoc=null;
        try {
            wait(1);
            for( WebElement body: bodyAdhoc){
                if(body.isDisplayed()){
                    sBodyAdhoc= body.getText();
                    log.info("Body email adhoc: "+ sBodyAdhoc);
                }
            }
            return sBodyAdhoc;
        }
        catch (Exception e){
            log.info("FAILED: No such element body email adhoc");
        }

        return sBodyAdhoc;
    }

    @Step("Get list of ID of inline images on email body when agent accept a new email contact")
    public List<String> getListInlineImagesIDOfInbound() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        log.info("Get ID of images");
        wait(3);
        List<String> imagesID= new ArrayList<>();
        try {
            List<WebElement> imagesElements= driver.findElements(By.xpath("//img[@data-url]"));
            if (imagesElements.size()>0){
                for(WebElement element: imagesElements){
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
                    String imgLink = (element.getAttribute("data-url"));
                    System.out.println(imgLink);
                    String ID = imgLink.substring(imgLink.length() - 36, imgLink.length());
                    imagesID.add(ID);
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
            log.info("Can not find ID of images");
        }
        return imagesID;
    }

    public boolean verifyInlineImageOfInboundEmailDisplay(String imageID){
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        boolean isDisplay = false;
        String actualImageSrc = "";
        try {
            List<WebElement> elInlineImageInbound=driver.findElements(By.xpath("//img[@data-url]"));
            for(WebElement img: elInlineImageInbound){
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", img);
                if (img.isDisplayed()) {
                    actualImageSrc = img.getAttribute("data-url");
                    if (actualImageSrc.contains(imageID)){
                        isDisplay=true;
                        break;
                    }
                }
            }

        } catch (Exception ex) {
            log.info("Not found the expected inline image");
            ex.printStackTrace();
        }
        return isDisplay;
    }

    public List<String> getListEmailCategory() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        List<String> emailCategoryList = new ArrayList<>();
        js = (JavascriptExecutor) driver;
        log.info("Get list Email Category on workspaces");
        wait(2);//wait time make sure elements loaded
        Set<String> uniqueElements = new LinkedHashSet<>();
        WebElement scrollBarElement = driver.findElement(By.xpath("//md-content[@id='templates-md-content']//div[@class='md-virtual-repeat-scroller']"));
        while (true) {
            // Get the current list of elements
            List<WebElement> categoryList = driver.findElements(By.xpath("//div[@class=\"template-name flex\"]"));
            // Check if there are new elements
            boolean isNewElementsAdded = false;
            for (WebElement element : categoryList) {
                isNewElementsAdded |= uniqueElements.add(element.getText());
            }
            // If no new elements were added, break the loop
            if (!isNewElementsAdded) {
                break;
            }
            // Scroll down of the page
            js.executeScript("arguments[0].scrollTop += 100;", scrollBarElement);

            // Wait for a moment to load new elements
            try {
                Thread.sleep(1000); // Adjust the sleep time based on your specific case
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        emailCategoryList.addAll(uniqueElements);
        //remove the "All" category
        emailCategoryList.remove(0);
        log.info("Email Category List size= " + emailCategoryList.size());
        wait(1);
        return emailCategoryList;
    }
    @Step("Verify icon Forwarded Email displayed on Interaction Log")
    public boolean verifyIconForwardEmailDisplayedOrNot() {
        boolean b = false;
        try {
            wait.until(ExpectedConditions.elementToBeClickable(openInteractionLog)).click();
            wait(1);
            if (iconForwardEmailInteractionLog.isDisplayed()) {
                b = true;
                Actions action = new Actions(driver);
                action.sendKeys(Keys.ESCAPE).build().perform();
            }
        } catch (Exception e) {
            b = false;
            Actions action = new Actions(driver);
            action.sendKeys(Keys.ESCAPE).build().perform();
        }
        return b;
    }

    @Step("Accept any alert dialog on browser")
    public void alertAccept() {
        try {
            WebDriverWait wait = new WebDriverWait(driver, 10);
            wait.until(ExpectedConditions.alertIsPresent());
            Alert alert = driver.switchTo().alert();
            alert.accept();
            Thread.sleep(10 * 1000);
        } catch (Exception e) {
            //exception handling
            e.getMessage();
        }
    }
    public void clickCompleteAsConference() {
        try {
            wait.until(ExpectedConditions.elementToBeClickable(completeasConference)).click();
        } catch (Exception e) {
            log.info("Failed no such element");
        }

    }

    @Step("Verify no interactions log to display")
    public boolean verifyNoInteractionsLogToDisplay() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        boolean b = false;
        try {
            Actions action = new Actions(driver);
            JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;
            jsExecutor.executeScript("arguments[0].style.left='0px'; arguments[0].style.top='0px';", openInteractionLog);
            openInteractionLog.click();
            wait(1);  //wait
            if (txtNoInteractionsDisplay.isDisplayed()) {
                b = true;
                action.sendKeys(Keys.ESCAPE).build().perform();
            }else{
                b = false;
                action.sendKeys(Keys.ESCAPE).build().perform();
            }
        } catch (Exception e) {
            log.info("FAILED: No such element");
            Actions action = new Actions(driver);
            action.sendKeys(Keys.ESCAPE).build().perform();
        }
        return b;

    }

    @Step("Checking the alerting work card is the conference")
    public boolean checkingForAlertingWorkCardIsConference () {
        boolean b = false;
        try {
            log.info("------------------------Waiting for the workcard alert to display------------------------------------------------");
            if ((this.eXISTs(driver, By.xpath("//div[@class='card card--alerting card--voice']//span[@aria-label='CONFERENCE']"), 10) != null)) {
                List<WebElement> voiceConference = driver.findElements(By.xpath("//div[@class='card card--alerting card--voice']//span[@aria-label='CONFERENCE']"));
                if (voiceConference.size() > 0) {
                    b = true;
                } else {
                    log.info("Not found alerting workcards conference");
                }
            } else {
                b = false;
            }
        } catch (Exception e) {
            b = false;
        }
        return b;
    }

    public boolean verifyWidgetName(String widget, String widgetName) {
        List<WebElement> wids = driver.findElements(By.xpath(String.format("//div[contains(@class,'widget--%s')]//h5[contains(@class,'widget__header')]//span[@translate]", widget.replace(" ", "-").toLowerCase())));
        if(wids.size() == 0){
            wids = driver.findElements(By.xpath(String.format("//div[contains(@class,'widget--%s')]//h5[contains(@class,'widget__header')]",widget.replace(" ","-").toLowerCase())));
        }
        for(WebElement wid : wids) {
            wait(2);
            if(wid.isDisplayed() && wid.getText().equals(widgetName)){
                System.out.println(wid.getText());
                return true;
            }
        }
        return false;
    }


    /**
     The exp the icon: Outgoing Voice,Missed Voice...
     */

    @Step("Verify Interaction Log")
    public boolean verifyInteractionLog(String logTab, int  index, String icon, String time, String service) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            try {
                wait.until(ExpectedConditions.elementToBeClickable(openInteractionLog)).click();
            }catch(Exception ex) {
                if(checkElementExist(btnInteractionLog)) {
                    btnInteractionLog.click();
                }
                else{
                    ex.getMessage();
                    log.info("Not found button InteractionLog.");
                }
            }
            wait(3);
            switch (logTab){
                case "all":
                    interactionLogAllTab.click();
                    break;
                case "missed":
                    interactionLogMissedTab.click();
                    break;
                case "incoming":
                    interactionBtnNextTab.click();
                    interactionLogIncomingTab.click();
                    break;
                case "outgoing":
                    interactionBtnNextTab.click();
                    interactionLogOutgoingTab.click();
                    break;
                default:
                    log.info("Not map log tab: "+logTab);
                    return false;
            }
            wait(2);
            WebElement actualIcon = driver.findElement(By.xpath("(//md-content[@aria-label='Interaction Log']//md-tab-item[contains(@class,'md-active')]//..//..//..//..//md-tab-content[contains(@class,'md-active')]//md-card)["+index+"]//span[contains(@class,'icon')]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", actualIcon);
            WebElement actualTime = driver.findElement(By.xpath("(//md-content[@aria-label='Interaction Log']//md-tab-item[contains(@class,'md-active')]//..//..//..//..//md-tab-content[contains(@class,'md-active')]//md-card)["+index+"]//span[contains(@puppeteer-id,'time')]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", actualTime);
            WebElement actualService = driver.findElement(By.xpath("(//md-content[@aria-label='Interaction Log']//md-tab-item[contains(@class,'md-active')]//..//..//..//..//md-tab-content[contains(@class,'md-active')]//md-card)["+index+"]//strong"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", actualService);

            String textIcon = actualIcon.getAttribute("aria-label");
            String textTime = actualTime.getText();
            String textService = actualService.getText();

            log.info("Icon: "+textIcon);
            log.info("Time: "+textTime);
            log.info("Service: "+textService);

            if(!textIcon.equals(icon)){
                log.info("The icon display incorrectly");
                return false;
            }
            if(!textService.equals(service)){
                log.info("The service display incorrectly");
                return false;
            }

            String format = "hh:mm:ss a";
            Date expectedDate = new SimpleDateFormat(format).parse(time);
            Date actualDate = new SimpleDateFormat(format).parse(textTime);
            if (abs(expectedDate.getTime() - actualDate.getTime()) > 60000) {
                log.info("FAILED.Time display incorrectly ");
                log.info("Expected: " + expectedDate);
                log.info("Actual: " + actualDate);
                return false;
            }
            actions().sendKeys(Keys.ESCAPE).build().perform();
            wait(1);
            return true;
        } catch (Exception e) {
            e.getMessage();
            log.info("No such element");
            actions().sendKeys(Keys.ESCAPE).build().perform();
            wait(1);
        }
        return false;
    }

    @Step("Verify Channel Icon On Agent State RONA")
    public boolean verifyChannelIconOnAgentStateRONA (String messageTooltipChannelIcon, int secs) {
        boolean b = false;
        if ((this.eXISTs(driver, By.xpath("//span[@aria-label=\"" + messageTooltipChannelIcon + "\"]"), secs) != null)) {
            WebElement textState = driver.findElement(By.xpath("//span[@aria-label=\"" + messageTooltipChannelIcon + "\"]"));
            String borderColor = textState.getCssValue("color");
            String hexColor = org.openqa.selenium.support.Color.fromString(borderColor).asHex();
            if (hexColor.equals("#fab107")) {
                log.info("The color is orange");
                b = true;
            } else {
                log.info("FAILED: The color is not orange");
                b = false;
            }
        }
        return b;
    }

    public void trunkAccessCode(boolean enable){
        try{
            if(enable){
                if(btnEnable8438.isDisplayed()){
                    btnEnable8438.click();
                    wait(1);
                }
            }else{
                if(btn8438.isDisplayed()){
                    btn8438.click();
                    wait(1);
                }
            }
        }catch (Exception e){
            log.info("No such element button trunk access code");
        }
    }

    public boolean clickTtoCallInteractionLog(String logTab, int  index, String phone, boolean call) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            wait.until(ExpectedConditions.elementToBeClickable(openInteractionLog)).click();
            wait(1);
            switch (logTab){
                case "all":
                    interactionLogAllTab.click();
                    break;
                case "missed":
                    interactionLogMissedTab.click();
                    break;
                case "incoming":
                    interactionBtnNextTab.click();
                    interactionLogIncomingTab.click();
                    break;
                case "outgoing":
                    interactionBtnNextTab.click();
                    interactionLogOutgoingTab.click();
                    break;
                default:
                    log.info("Not map log tab: "+logTab);
                    return false;
            }
            wait(2);
            WebElement item = driver.findElement(By.xpath("(//md-content[@aria-label='Interaction Log']//md-tab-item[contains(@class,'md-active')]//..//..//..//..//md-tab-content[contains(@class,'md-active')]//md-card)["+index+"]//md-card-content"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", item);
            moveMouseToElement(item);
            wait(1);
            WebElement btnClickToCall = driver.findElement(By.xpath("(//md-content[@aria-label='Interaction Log']//md-tab-item[contains(@class,'md-active')]//..//..//..//..//md-tab-content[contains(@class,'md-active')]//md-card)["+index+"]//md-card-content//button[@id='ow_click_to_call']"));
            if(!btnClickToCall.isDisplayed()){
                log.info("No such botton click to call");
                return false;
            }
            moveMouseToElement(btnClickToCall);
            wait(1);
            WebElement tooltipClickToCall = driver.findElement(By.xpath("//div[@class='cc-tooltip bottom' and text()='Click to call "+phone+", "+phone+"']"));
            if(!tooltipClickToCall.isDisplayed()){
                log.info("No such tooltip botton click to call");
                return false;
            }

            if(call){
                btnClickToCall.click();
                return true;
            }
            actions().sendKeys(Keys.ESCAPE).build().perform();
            wait(1);
            return true;
        } catch (Exception e) {
            log.info("No such element");
            actions().sendKeys(Keys.ESCAPE).build().perform();
            wait(1);
        }
        return false;
    }

    public void clearInteractionLogs(){
        try{
            wait.until(ExpectedConditions.elementToBeClickable(openInteractionLog)).click();
            wait(1);
            if(btnClearInteractionLog.isDisplayed()){
                btnClearInteractionLog.click();
                log.info("Cleared interaction logs");
                actions().sendKeys(Keys.ESCAPE).build().perform();
                wait(1);
            }
        }catch (Exception e){
            log.info("No interaction logs");
            actions().sendKeys(Keys.ESCAPE).build().perform();
            wait(1);
        }
    }

    public boolean verifyUseCodeDisplayOrNotOnWS(String sUseCode) {
        try {
            if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
                driver.switchTo().window(driver.getWindowHandle());
            log.info("dropdown-button");
            WebDriverWait wait = new WebDriverWait(driver, 10);
            driver.findElement(By.xpath("//button[@puppeteer-id='agent--dropdown-button']")).click();
            wait(1);
            wait.until(ExpectedConditions.visibilityOfElementLocated((By.xpath("//button[@puppeteer-id='go-not-ready--dropdown-button']")))).click();
            log.info("Clicking on Search field, then input not ready code");
            WebElement inputSearch = driver.findElement(By.xpath("//input[@puppeteer-id='not-ready__reason-codes-search-input']"));
            wait(1);
            Actions action = new Actions(driver);
            inputSearch.clear();
            wait(1);
            inputSearch.sendKeys(sUseCode);
            wait(1);
//            List <WebElement> UserCode = driver.findElements(By.xpath("//div[@class='key-value__value not-ready_code_size' and contains(text(),'" + sUseCode + "')]"));
            List <WebElement> UserCode = driver.findElements(By.xpath("//div[starts-with(@class,'key-value__') and contains(text(),'" + sUseCode + "')]"));
            wait(1); // wait user code display
            if (UserCode.size() > 0) {
                action.sendKeys(Keys.ESCAPE).build().perform();
                action.sendKeys(Keys.ESCAPE).build().perform();
                return true;
            }else {
                action.sendKeys(Keys.ESCAPE).build().perform();
                action.sendKeys(Keys.ESCAPE).build().perform();
                return false;
            }
        } catch (Exception e) {
            log.info("No such element");
            Actions action = new Actions(driver);
            action.sendKeys(Keys.ESCAPE).build().perform();
            action.sendKeys(Keys.ESCAPE).build().perform();
            e.getMessage();
            return false;
        }
    }

    public boolean verifyWorkCodeDisplayOrNotOnWS(String sWorkCode, String ID) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            Actions action = new Actions(driver);
            WebDriverWait wait = new WebDriverWait(driver, 10);
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_More_btn_" + ID + "']"))).click();
            WebElement workCodeLabel = driver.findElement(By.xpath("//md-menu-item[@id='ow_work_code_" + ID + "']/md-menu/button/span[text()='Work Codes']"));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", workCodeLabel);
            wait(1); // wait work code display
            List<WebElement> workCodeName = driver.findElements(By.xpath("//button[contains(@class,'ow_work_code_reason_code_" + ID + "')][@aria-label='" + sWorkCode + "']"));
            if (workCodeName.size() > 0) {
                action.sendKeys(Keys.ESCAPE).build().perform();
                action.sendKeys(Keys.ESCAPE).build().perform();
                return true;
            }else {
                action.sendKeys(Keys.ESCAPE).build().perform();
                action.sendKeys(Keys.ESCAPE).build().perform();
                return false;
            }

        } catch (Exception e) {
            log.info("No such element");
            Actions action = new Actions(driver);
            action.sendKeys(Keys.ESCAPE).build().perform();
            action.sendKeys(Keys.ESCAPE).build().perform();
            return false;
        }
    }

    public boolean verifyDispositionCodeDisplayOrNotOnWS(String sDispositionCode, String ID) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            Actions action = new Actions(driver);
            WebDriverWait wait = new WebDriverWait(driver, 10);
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_More_btn_" + ID + "']"))).click();
            WebElement dispositionCodeLabel = driver.findElement(By.xpath("//md-menu-item[@id='ow_disposition_code_" + ID + "']/md-menu/button/span[text()='Disposition Codes']"));
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", dispositionCodeLabel);
            wait(1); // wait disposition code display
            List<WebElement> dispositionName = driver.findElements(By.xpath("//button[contains(@class,'ow_disposition_reason_code_" + ID + "')][@aria-label='" + sDispositionCode + "']"));
            if (dispositionName.size() > 0) {
                action.sendKeys(Keys.ESCAPE).build().perform();
                action.sendKeys(Keys.ESCAPE).build().perform();
                return true;
            }else {
                action.sendKeys(Keys.ESCAPE).build().perform();
                action.sendKeys(Keys.ESCAPE).build().perform();
                return false;
            }

        } catch (Exception e) {
            log.info("No such element");
            Actions action = new Actions(driver);
            action.sendKeys(Keys.ESCAPE).build().perform();
            action.sendKeys(Keys.ESCAPE).build().perform();
            return false;
        }
    }

    public List<String> getListTransferToService(String ID) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        wait(1);
        List<String> serviceList= new ArrayList<>();
        log.info("Open and get list TransferToService");
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_Transfer_" + ID + "_btn']"))).click();
        log.info("Clicking service label");
        WebElement serviceLabel = driver.findElement(By.xpath("//*[@puppeteer-id='consult-menu__services-Transfer_" + ID + "']"));
        JavascriptExecutor executor = (JavascriptExecutor) driver;
        executor.executeScript("arguments[0].click();", serviceLabel);
        Thread.sleep(2000);

        List<WebElement> wcNames = driver.findElements(By.xpath("//div[contains(@class,'md-active')]//button[@puppeteer-id='consult-menu__services-list-item_"+ID+"']"));
        log.info("Service list size= "+wcNames.size());
        for (int i = 0; i < wcNames.size(); i++) {
            serviceList.add(wcNames.get(i).getText());
        }

        Actions action = new Actions(driver);
        action.sendKeys(Keys.ESCAPE).build().perform();
        action.sendKeys(Keys.ESCAPE).build().perform();
        wait(1);
        return serviceList;
    }

    public String Get_Agent_Reason_Code() {
        String State = "null";
        for(int i = 0; i < 10; i++) {
            if (driver.findElements(By.xpath("//*[@id='ow_Icon_State1']")).size()> 0){
                break;
            }
            wait(1);
        }
        wait.until(ExpectedConditions.visibilityOf(lblAgentState1));
        String a1state = lblAgentState1.getText();
        if (a1state.equalsIgnoreCase("999 - Additional Work")) {
            State = "999 - Additional Work";
            log.info("Reason code agent current state : " + State);
            return State;
        } else {
            State = a1state;
        }
        return State;
    }

    public boolean verifyButtonHoldOnWorkcard(String interactionID, boolean hold) {
        WebDriverWait wait5 = new WebDriverWait(driver,5);
        if(hold) {
            WebElement btnHold = driver.findElement(By.xpath("//button[@puppeteer-id='hold-interaction--" + interactionID + "']"));
            wait5.until(ExpectedConditions.visibilityOf(btnHold));
            if(btnHold.isDisplayed()) {
                return true;
            }
        }
        else{
            WebElement btnUnHold = driver.findElement(By.xpath("//button[@puppeteer-id='unhold-interaction--" + interactionID + "']"));
            wait5.until(ExpectedConditions.visibilityOf(btnUnHold));
            if(btnUnHold.isDisplayed()) {
                return true;
            }
        }
        return false;
    }

    @Step("Verify text color for the agent state")
    public boolean verifyBackgroundColorAgentState(String sExpectedColor) {
        WebElement State = driver.findElement(By.xpath("//*[@id='ow_Icon_State2']"));
        if (State.isDisplayed()) {
            String Color = State.getCssValue("background");
            String sColor = Color.substring(0,(Color.indexOf(")")+1));
            String hexColor = org.openqa.selenium.support.Color.fromString(sColor).asHex();
            log.info("Color is " + sExpectedColor + ", hex: " + hexColor);
            switch (sExpectedColor.toLowerCase()) {
                case "orange":
                    if (hexColor.equalsIgnoreCase("#fab107")) {
                        log.info("The color is orange");
                    } else {
                        log.info("FAILED: The color is not orange");
                        return false;
                    }
                    break;
                case "gray":
                    if (hexColor.equalsIgnoreCase("#6a788a") || hexColor.equalsIgnoreCase("#5a646e")) {
                        log.info("The color is gray");
                    } else {
                        log.info("FAILED: The color is not gray");
                        return false;
                    }
                    break;
                case "green":
                    if (hexColor.equalsIgnoreCase("#008000")) {
                        log.info("The color is green");
                    } else {
                        log.info("FAILED: The color is not green");
                        return false;
                    }
                    break;
            }
        }
        return true;
    }

    public boolean verifyConsultServiceBtn(boolean clickConsultBtn, String interactionID) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            WebElement consultBtn = driver.findElement(By.xpath(String.format("//*[@id='ow_Card_Consult_%s_btn']", interactionID)));
            WebElement consultToServiceBtn = driver.findElement(By.xpath(String.format("//button[@puppeteer-id='consult-menu__services-Consult_%s']", interactionID)));
            WebDriverWait wait3 = new WebDriverWait(driver, 3);
            if (clickConsultBtn) {
                moveMouseToElement(consultBtn);
                wait3.until(ExpectedConditions.visibilityOf(consultBtn));
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();", consultBtn);
                if (consultToServiceBtn.isDisplayed()) {
                    return true;
                }
            }
            else if (consultToServiceBtn.isDisplayed()) {
                return true;
            }
        }
        catch (Exception ex) {
            ex.getMessage();
            return false;
        }
        return false;
    }

    public boolean verifyIconTransferOnWorkCardContent(String interactionID) {
        try {
            WebElement icon = driver.findElement(By.xpath("//card-container[@interaction-id='" + interactionID + "']//md-icon[@class='service-icon aoc-transfer-forward aoc']"));
            WebDriverWait wait2 = new WebDriverWait(driver, 2);
            if (wait2.until(ExpectedConditions.visibilityOf(icon)).isDisplayed()) {
                return true;
            }
        }
        catch (Exception ex) {
            ex.getMessage();
        }
        return false;
    }

    /**
     * <h1>getAgentStateOnTeamViewer</h1> This method is for get Agent state display on Team Viewer
     *
     * @param agentFullName agent full name
     * @return Map<String, String>
     * example: [color: "rgb(250, 177, 7)", avatartext: "HA", status: "Not Ready Pending"]
     */
    public Map<String, String> getAgentStateOnTeamViewer(String agentFullName){
        Map<String, String> agentState = new HashMap<>();
        List<WebElement> expandMyTeam=driver.findElements(By.xpath("//button[@aria-label='Expand my team']"));
        if(expandMyTeam.size()>0){
            driver.findElement(By.xpath("//button[@aria-label='Expand my team']")).click();
        }

        WebElement avatar= driver.findElement(By.xpath("//cc-team-view[@widgetName='expandedTeamView']//span[contains(text(),'"+agentFullName+"')]/../../cc-text-avatar"));
        WebElement agentStatus= driver.findElement(By.xpath("//cc-team-view[@widgetName='expandedTeamView']//span[contains(text(),'"+agentFullName+"')]/following-sibling::p"));

        String color=avatar.getCssValue("background-color");
        String avatartext = avatar.getText();
        String status= agentStatus.getText();

        agentState.put("color",color);
        agentState.put("avatartext",avatartext);
        agentState.put("status",status);

        return agentState;
    }
    @Step("Checking color of all channel display on Workspace")
    public Map<String, String> checkColorOfAllChannelWS() {
        wait(1);
        try {
            Map<String, String> state = new HashMap<>();
            List<WebElement> listChannels = driver.findElements(By.xpath("//cc-state-panel//span[contains(@class,'state-panel__icon')]"));
            for (WebElement channel : listChannels) {
                String channelName = channel.getAttribute("id").split("_")[2];
                String channelColor = channel.getCssValue("color");
                log.info(channelName + ":" + channelColor);
                state.put(channelName, channelColor);
            }
            return state;
        } catch (Exception e) {
            log.info("Exception: " + e);
        }
        return null;
    }

    public boolean isAgentLogin(){
        if ((driver.findElements(By.xpath("//button[@puppeteer-id='agent--dropdown-button']"))).size() == 1) {
            return true;
        }else
            return false;
    }

    public void acceptAllAlertingContact() {
        switch (checkStatusOfAllAgentChannels()) {
            case 1://not ready
                Put_Agent_In_Available_State_from_ACW();
                break;
            case 2://logout
                Put_Agent_In_Ready_State();
                break;
        }
        try {
            if ((this.eXISTs(driver, By.xpath(".//button[@ng-click='accept()']"), 30) != null)) {
                int numOfContacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']")).size();
                while (numOfContacts > 0) {
                    List<WebElement> contacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']"));
                    for (WebElement contact : contacts) {
                        contact.click();
                    }
                    wait(5);
                    numOfContacts = driver.findElements(By.xpath(".//button[@ng-click='accept()']")).size();
                }
            }
        } catch (Exception e) {
            log.info("Exception occured in Accepting call function ");
        }

    }

    @Step("Cleanup existing contacts when Testcase run failed")
    public void cleanUpExistingContact() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        log.info("Cleaning up existing workcards.");
        try {
            RefreshWS();
        } catch (AWTException e) {
            e.printStackTrace();
        }
        try {
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            wait(3);
            List<WebElement> count = driver.findElements(By.xpath("//card-header[@card='card']"));
            log.info("Number of existing workcards: " + count.size());

            for (int i = 1; i <= count.size(); i++) {

                executor.executeScript("arguments[0].scrollIntoView(true);", count.get(count.size()-i));
                executor.executeScript("arguments[0].click();", count.get(count.size()-i));
                if (driver.findElements(By.xpath("(//card-header[@card='card'])["+(count.size()-i+1)+"]/..//div[@aria-label='Your email was rejected']")).size() == 1) {
                    log.info("This is an rejected email.");
                    Click_Widget("EMAIL");
                    log.info("Click Close Interaction button");
                    List<WebElement> btnCloseInts = driver.findElements(By.xpath("//button/span[.='Close interaction']"));
                    executor.executeScript("arguments[0].click();", btnCloseInts.get(btnCloseInts.size()-1));
                    wait(1);
                    executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("//button[.='Close Interaction']")));
                } else if (driver.findElements(By.xpath("(//card-header[@card='card'])["+(count.size()-i+1)+"]/..//div[@aria-label='E-mail verification is required']")).size() == 1) {
                    log.info("This is an approval email.");
                    Click_Widget("EMAIL");
                    log.info("Click Review email");
                    List<WebElement> btnReviews = driver.findElements(By.xpath("//button/span[.='Review']"));
                    executor.executeScript("arguments[0].click();", btnReviews.get(btnReviews.size()-1));
                    log.info("Approve the Email");
                    email_approval_feature();
                } else if (driver.findElements(By.xpath("(//card-header[@card='card'])["+(count.size()-i+1)+"]/..//*[@aria-label ='Force end']")).size() == 1) {
                    log.info("Force End button displayed");
                    executor.executeScript("arguments[0].click();", driver.findElements(By.xpath("(//card-header[@card='card'])["+(count.size()-i+1)+"]/..//*[@aria-label ='Force end']")));
                } else if (driver.findElements(By.xpath("(//card-header[@card='card'])["+(count.size()-i+1)+"]/..//button[@ng-click='unhold()']")).size() == 1) {
                    log.info("This is a hold call");
                    log.info("Unhold contact");
                    executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("(//card-header[@card='card'])["+(count.size()-i+1)+"]/..//button[@ng-click='unhold()']")));
                    wait(1);
                    executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("(//card-header[@card='card'])["+(count.size()-i+1)+"]/..//button[@ng-click='end()']")));
                } else {
                    executor.executeScript("arguments[0].click();", driver.findElement(By.xpath("(//card-header[@card='card'])["+(count.size()-i+1)+"]/..//button[@ng-click='end()']")));
                    wait(1);
                }
                if (driver.findElements(By.xpath("//button[.='End Interaction']")).size() == 1) {
                    log.info("This is an adhoc email.");
                    log.info("Click End Interaction");
                    driver.findElement(By.xpath("//button[.='End Interaction']")).click();
                } else
                    complete_ACW();
                log.info("Closed existing contact " + i);
            }
        } catch (Exception cardException) {
            log.info("Active work card not found while logging out the agent");
        }

    }

    public boolean goToTheExpectedTab(String interactionID, String tab) {
        WebDriverWait wait3 = new WebDriverWait(driver, 3);
        boolean tabClicked = false;
        while (!tabClicked) {
            try {
                WebElement tabItem =  driver.findElement(By.xpath(String.format("//div[@interaction-id='%s']//md-tab-item[text()='%s']", interactionID, tab)));
                if (!tabItem.isDisplayed()) {
                    WebElement nextBtn = driver.findElement(By.xpath(String.format("//div[@interaction-id='%s']//md-next-button", interactionID)));
                    nextBtn.click();
                    wait3.until(ExpectedConditions.visibilityOf(tabItem));
                }
                else {
                    tabItem.click();
                    tabClicked = true;
                }
            } catch (Exception ex) {
                ex.getMessage();
            }
        }
        return tabClicked;
    }

    public boolean verifyRedundantBorderAccountTabCustomerDetail(String interactionID) {
        try {
            List<WebElement> accounts = driver.findElements(By.xpath(String.format("//div[@interaction-id='%s']//div[@class='account-td']", interactionID)));
            List<WebElement> accountBodys = driver.findElements(By.xpath(String.format("//div[@interaction-id='%s']//div[@class='account-td']//span[text()='Account ID:']", interactionID)));
            if(accounts.size()==accountBodys.size()) {
                return true;
            }
        }
        catch (Exception ex) {
            ex.getMessage();
        }
        return false;
    }

    public boolean verifyScrollbarAccountTabCustomerDetail(String interactionID) {
        try {
            List<WebElement> scrollBar = driver.findElements(By.xpath(String.format("//div[@class='widget widget--customer-details' and @interaction-id='%s']//div[@class='ps__rail-y']", interactionID)));
            if(scrollBar.size()==1) {
                return true;
            }
        }
        catch (Exception ex) {
            ex.getMessage();
            return false;
        }
        return false;
    }

    @Step("Get detail content plain text on Customer History Search")
    public Map<String, String> getDetailContentPlainTextOnCHS(int emailNumber, int replayNumber) throws ParseException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        Map<String, String> result = new HashMap<String, String>();
        log.info("Get DATE AND TIME in Customer History Search.");
        WebElement latestTime = driver.findElement(By.xpath("//button[@puppeteer-id='customerHistorySearch-history-results_toggle-interaction-details__" + emailNumber + "']//parent::td/parent::tr/td[1]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", latestTime);
        result.put("Time On Title", latestTime.getText());

        log.info("Get STATUS in Customer History Search.");
        WebElement status = driver.findElement(By.xpath("//button[@puppeteer-id='customerHistorySearch-history-results_toggle-interaction-details__" + emailNumber + "']//parent::td/parent::tr/td[2]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", status);
        result.put("Status", status.getText());

        log.info("Get PRIORITY in Customer History Search.");
        WebElement priority = driver.findElement(By.xpath("//button[@puppeteer-id='customerHistorySearch-history-results_toggle-interaction-details__" + emailNumber + "']//parent::td/parent::tr/td[3]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", priority);
        result.put("Priority", priority.getText());

        log.info("Get ID in Customer History Search.");
        WebElement id = driver.findElement(By.xpath("//span[@ng-if='detail.latestActionId']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", id);
        String sID = id.getText().split(":")[1].trim();
        result.put("ID", sID);

        log.info("Get CUSTOMER NAME in Customer History Search.");
        WebElement name = driver.findElement(By.xpath("//span[@ng-if='detail.name']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", name);
        String sName = name.getText().split(":")[1].trim();
        result.put("Name", sName);

        log.info("Get TO in Customer History Search.");
        WebElement to = driver.findElement(By.xpath("//span[@ng-if='detail.to']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", to);
        String sTo = to.getText().split(":")[1].trim();

        log.info("Get FROM in Customer History Search.");
        WebElement lastFrom = driver.findElement(By.xpath("//span[@ng-if='detail.from']"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", lastFrom);
        String sLastFrom = lastFrom.getText().split(":")[1].trim();

        WebElement from = driver.findElement(By.xpath("(//span[@class='email-header-from flex'])[" + (replayNumber + 1) + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", from);
        String sFrom = from.getText().split(":")[1].trim();

        log.info("Get CC in Customer History Search.");
        if (driver.findElements(By.xpath("//*[@puppeteer-id='customerHistorySearch-history-details-item__" + emailNumber + "']//md-title-text/span")).size() >= 5) {
            WebElement cc = driver.findElement(By.xpath("//span[@ng-if='detail.cc']"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", cc);
            String sCC = to.getText().split(":")[1].trim();
            result.put("CC", sCC);
        }

        if (replayNumber == 0) {
            result.put("To", sTo);
            result.put("From", sLastFrom);
        } else {
            result.put("From", sFrom);
            if (sFrom.equals(sLastFrom)) {
                result.put("To", sTo);
            } else {
                result.put("To", sLastFrom);
            }
        }
        log.info("Get SUBJECT in Customer History Search");
        WebElement subject = driver.findElement(By.xpath("(//span[@class='email-header-subject flex'])[" + (replayNumber + 1) + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", subject);
        result.put("Subject", subject.getText());

        log.info("Get CONTENT in Customer History Search");
        List<WebElement> contents = driver.findElements(By.xpath("(//div[@id='email--textarea'])[" + (replayNumber + 1) + "]/p"));

        String contentText = null;
        for(WebElement content: contents) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", content);
            contentText += content.getText();
        }
        result.put("Content", contentText);

        log.info("Get TIME stamp in Customer History Search");
        WebElement timeStamp = driver.findElement(By.xpath("(//span[@class='email-header-date flex'])[" + (replayNumber + 1) + "]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", timeStamp);
        result.put("Time", timeStamp.getText());
        return result;
    }

    public Map<String,List<String>> getDetailCustomerJourneyTimeLineContent(String channel) {
        Map<String, List<String>> timeLineContent = new HashMap<>();
        try {
            //Get list of timestamp on Customer Journey
            List<WebElement> listTimeStampEL = driver.findElements(By.xpath("//div[@id='cd-timeline']//div[contains(@class,'timelineTimestamp')]"));
            List<String> listTimeStamp = new ArrayList<>();
            for (WebElement timeStampEL : listTimeStampEL) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", timeStampEL);
                listTimeStamp.add(timeStampEL.getText().replace("\n", " "));
            }
            listTimeStamp = Lists.reverse(listTimeStamp);
            log.info("timeStamp: " + listTimeStamp);
            timeLineContent.put("timeStamp", listTimeStamp);

            //Get number of image channel on Customer Journey Workflow
            List<WebElement> listIconChannelEL = driver.findElements(By.xpath("//div[@id='cd-timeline']//div[contains(@class,'cd-timeline-img')]//*[@id='" + channel.toLowerCase() + "_Layer_1']"));
            String numberIconChannel = String.valueOf(listIconChannelEL.size());
            timeLineContent.put("imgChannel", Arrays.asList(numberIconChannel));
            log.info("numberIconChannel: " + numberIconChannel);

            //Get Workflow with agentExt
            List<WebElement> listWorkFlowEL = driver.findElements(By.xpath("//div[@id='cd-timeline']//div[@class='timelineContent-StatusRow']"));
            List<String> listWorkFlow = new ArrayList<>();
            for (int i = 0; i < listWorkFlowEL.size(); i++) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", listWorkFlowEL.get(i));
                listWorkFlow.add(listWorkFlowEL.get(i).getText().replace("\n", " "));
            }
            listWorkFlow = Lists.reverse(listWorkFlow);
            log.info("workFlow: " + listWorkFlow);
            timeLineContent.put("workFlow", listWorkFlow);
        } catch (Exception ex) {
            ex.getMessage();
            return null;
        }
        return timeLineContent;
    }


    public boolean verifyListTimeStampCustomerJourney(List<String> listDateTime, boolean channelVoice) {
        boolean flag = false;
        for (int i = 0; i < listDateTime.size() - 1; i++) {
            String timer1 = listDateTime.get(i);
            String timer2 = listDateTime.get(i + 1);
//                String outputFormat = "dd/MM/yyyy HH:mm:ss";
            try {
                timer1 = timer1.replaceAll("(\\d+)(st|nd|rd|th)", "$1");
                timer2 = timer2.replaceAll("(\\d+)(st|nd|rd|th)", "$1");
                SimpleDateFormat inputDateFormat = new SimpleDateFormat("MMM dd yyyy HH:mm:ss Z", Locale.ENGLISH);
//                    SimpleDateFormat outputDateFormat = new SimpleDateFormat(outputFormat);
                TimeZone inputTimeZone = TimeZone.getTimeZone(inputDateFormat.getTimeZone().getID());
                inputDateFormat.setTimeZone(inputTimeZone);
                Date datetime1 = inputDateFormat.parse(timer1);
                Date datetime2 = inputDateFormat.parse(timer2);
                if (channelVoice) {
                    if (datetime1.compareTo(datetime2) < 0 || datetime1.compareTo(datetime1) == 0) {
                        flag = true;
                    } else {
                        flag = false;
                        log.info("datetime1: " + datetime1);
                        log.info("datetime2: " + datetime2);
                    }
                }
                else {
                    if (datetime1.compareTo(datetime2) < 0) {
                        flag = true;
                    } else {
                        flag = false;
                        log.info("datetime1: " + datetime1);
                        log.info("datetime2: " + datetime2);
                    }
                }

            } catch (ParseException e) {
                e.printStackTrace();
            }
        }
        return flag;
    }

    @Step("Get text body plain text email reply")
    public String getTextBodyPlainTextEmailReply() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", bodyEmailPlainTextReply);
            bodyEmailPlainTextReply.sendKeys(Keys.chord(Keys.CONTROL, "a"));
            bodyEmailPlainTextReply.sendKeys(Keys.chord(Keys.CONTROL, "c"));
            Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
            // Get data stored in the clipboard that is in the form of a string (text)
            String text = (String) c.getData(DataFlavor.stringFlavor);
            log.info("Body email reply with plain text: " + text);
            return text;
        } catch (Exception e) {
            log.info("FAILED: No such element body email reply with plain text");
            return null;
        }
    }

    public String getAutoAnswerTimer() {
        WebDriverWait wait3 = new WebDriverWait(driver, 3);
        wait3.until(ExpectedConditions.visibilityOf(autoAnswerTimer));
        return autoAnswerTimer.getText();
    }

    public int getTotalSecondAutoAnswerTimer(String timer) {
        int totalSecond = 0;
        timer = timer.replace("- ", "");
        String[] parts1 = timer.split(":");

        int minutes = Integer.parseInt(parts1[0]);
        int seconds = Integer.parseInt(parts1[1]);
        if (timer.startsWith("-")) {
            minutes = -minutes;
            seconds = -seconds;
        }
        totalSecond = minutes*60+seconds;

        return totalSecond;
    }

    public boolean verifyVisibility(WebElement el, int secs) {
        WebDriverWait waitsecs = new WebDriverWait(driver, secs);
        try {
            if(waitsecs.until(ExpectedConditions.visibilityOf(el)).isDisplayed()) {
                return true;
            }
        } catch (Exception e) {
            e.getMessage();
        }
        return false;
    }

    public boolean waitingForWorkcardRona(String channel) {
        if(Check_For_Call_Alert(channel, 180)) {
            boolean flag = VerifyElementVisibility(cardAlert);
            if(flag){
                int secs = 0;
                while(secs <= 102){
                    boolean isVisibility = verifyVisibility(cardAlert, 0);
                    if(!isVisibility) return true;
                    secs++;
                    wait(1);
                }
                System.out.println("waitingForWorkcardRona: " + secs + " seconds.");
            }
        }
        return false;
    }

    public boolean verifyCssValueOfElement(WebElement element, String css, String exValue) {
        try{
            WebDriverWait wait = new WebDriverWait(driver, 10);
            wait.until(ExpectedConditions.visibilityOf(element));
            String acValue = element.getCssValue(css);
            if(!acValue.equals(exValue)){
                log.info("The "+css+" actual: "+acValue);
                return false;
            }
        }catch (Exception e){
            log.info("No such element or css attribute");
            return false;
        }
        return true;
    }

    @Step("Click the plus sign ( + ) to add a email template")
    public void clickPlusSignInsertTemplate(String templateName) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            wait(2);
            WebElement plusSignInsertTemplate = driver.findElement(By.xpath("//div[text()='" + templateName + "']/..//button[@ng-click='insertTemplate(template)']"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", plusSignInsertTemplate);
            plusSignInsertTemplate.click();
        } catch (Exception e) {
            log.info("FAILED: No such element");
        }
    }

    public boolean verifyWorkcardFocused(String channel) {
        try{
            WebElement workcardActive = driver.findElement(By.xpath("//card-group[contains(@class,'card-group--active')]"));
            WebElement wordcardFocus = workcardActive.findElement(By.xpath("//div[contains(@class,'card--" + channel.toLowerCase() + "') and contains(@class,'card--focused')]"));
            if (verifyVisibility(wordcardFocus, 3) && verifyCssValueOfElement(workcardActive, "border-color", "rgb(0, 128, 0)")) {
                return true;
            }
        }catch (Exception ex) {
            ex.getMessage();
        }
        return false;
    }

    public String getChannelInteractionID(String channel) {
        try {
            String xpath = "//card-container[@interaction-channel='"+channel.toUpperCase()+"']";
            WebElement cardAlert = driver.findElement(By.xpath(xpath));
            if(verifyVisibility(cardAlert, 3)) {
                String interactionID = cardAlert.getAttribute("interaction-id");
                log.info("interaction-id: " + interactionID);
                return interactionID;
            }
        }catch (Exception ex) {
            ex.getMessage();
        }
        return null;
    }

    public String getCardHeaderTimer(String channel) {
        try {
            String xpath = "//card-container[@interaction-id='" + getChannelInteractionID(channel) + "']//*[contains(@class,'card__header-timer')]";
            WebElement cardHeaderTimer = driver.findElement(By.xpath(xpath));
            if(verifyVisibility(cardHeaderTimer,3)) {
                return cardHeaderTimer.getText();
            }
        }catch (Exception ex) {
            ex.getMessage();
        }
        return null;
    }

    public boolean checkWorkCardActive(String interactionID) {
        try {
            WebElement workCardActive = driver.findElement(By.xpath("//card-container[@interaction-id='" + interactionID + "']//div[@ng-switch-when='ACTIVE']"));
            if(verifyVisibility(workCardActive,3)) {
                return true;
            }
        }
        catch (Exception ex) {
            ex.getMessage();
        }
        return false;
    }

    public boolean verifyResultSearchTemplateAndCategory(String numberOfResults, List<String> listCategoryTemplate){
        try{
            wait(2);
            List<WebElement> results = driver.findElements(By.xpath("//div[contains(@class,'template-name')]"));
            List<String> resultNameEx = new ArrayList<String>();
            List<String> resultName = new ArrayList<String>();
            resultNameEx.add("Found matches: "+numberOfResults);
            for(String listEx : listCategoryTemplate){
                resultNameEx.add(listEx);
            }
            for(WebElement actual : results){
                resultName.add(actual.getText());
            }
            log.info("Expected: "+resultNameEx);
            log.info("Actual: "+resultName);
            if(!resultName.equals(resultNameEx)){
                log.info("The results incorrectly");
                return false;
            }
        }catch (Exception e){
            log.info("Not found template or category: "+e);
            return false;
        }
        return true;
    }

    public void collapseCategoryTemplate(String folder){
        try{
            WebElement btnClooapse = driver.findElement(By.xpath("//div[contains(text(),'"+folder+"')]//../div/button"));
            btnClooapse.click();
        }catch (Exception e){
            log.info("No such element: "+e);
        }
    }

    @Step("Close notification")
    public void closeNotification() {
        wait(3);
        if (bannerNotifications.size() != 0) {
            wait.until(ExpectedConditions.elementToBeClickable(BtnNotifications)).click();
        }
    }
    @Step("click Contacts shortened by icon")
    public boolean clickContactShortenedByIcon(String ID) {
        try{
            wait(3);
            WebElement icon = driver.findElement(By.xpath("//div[@ng-click='scrollerAPI.activatePrevious();']/cc-scroller-icons-item[@interaction-id='"+ID+"']"));
            if (icon.isDisplayed()){
                icon.click();
            }
        }catch (Exception e){
            log.info("FAILED: No such element");
            return false;
        }
        return true;
    }


    @Step("Getting Interaction ID of Alerting work card base on channel type")
    public String getInteractionIdAlertingByChannelType(String Channel) {
        log.info("------------------------Getting the ID of the accepted WorkCard on the agent Workspace------------------------");
        String IDGeneratedDynamically = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//span[@aria-label='Alerting " + Channel + " Interaction']"))).getAttribute("id");
        String[] IDGeneratedDynamically_trimmed = IDGeneratedDynamically.split("_");
        String ID = IDGeneratedDynamically_trimmed[3];
        return ID;
    }

    public boolean verifyAutoAnswerIconByInteractionID (String interactionID) {
        try {
            WebElement autoAnsIcon = driver.findElement(By.xpath("//card-container[@interaction-id='"+interactionID+"']//span[@class='card__header-icon aoc-auto-answer']"));
            if(verifyVisibility(autoAnsIcon,3)) {
                return true;
            }
        }
        catch (Exception ex) {
            ex.getMessage();
        }
        return false;
    }

    public boolean verify_Inline_Image_Display(String expectedImageSrc, boolean isDisplay) {
        // If running in Docker, switch to the current window handle
        if (EnvSetup.run_with_Docker.equalsIgnoreCase("yes")) {
            driver.switchTo().window(driver.getWindowHandle());
        }

        boolean display = false;
        String actualImageSrc = "";

        List<WebElement> inlineImages = driver.findElements(By.xpath("//img[@alt=\"image\"]"));

        // Loop through all inline image elements
        if(inlineImages.size()>0) {
            for (WebElement el : inlineImages) {
                if (el.isDisplayed()) {
                    System.out.println(el);
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", el);
                    actualImageSrc = el.getAttribute("src");

                    // Compare image source and handle display condition
                    if (expectedImageSrc.equalsIgnoreCase(actualImageSrc)) {
                        display = true;
                    }
                }
            }
        }
        else log.info("There's no image on WS");

        if (isDisplay==display){
            return true;
        }
        else {
            return false;
        }
    }


    @Step("Getting service name of accepted workcard compressed layout")
    public String getServiceNameofAcceptedContactCompressLayout(String interactionID) {
        try {
            WebElement serviceName = driver.findElement(By.xpath("//card-content[@ng-if='isCompressed']//div[@id='ow_Service_Name_"+interactionID+"']"));
            WebDriverWait wait3 = new WebDriverWait(driver,3);
            if(wait3.until(ExpectedConditions.visibilityOf(serviceName)).isDisplayed())
                return serviceName.getText();
        } catch (Exception e) {
            e.getMessage();
        }
        return null;
    }

    @Step("Press the key ")
    public void pressKey(Keys key){
        Actions actions = new Actions(driver);
        actions.sendKeys(key).build().perform();
    }


    public boolean waitingTimeOutForWorkCardRONA(String channel) {
        if(Check_For_Call_Alert(channel, 180)) {
            boolean flag = VerifyElementVisibility(cardAlert);
            if(flag){
                int timeout = 0;
                int second = 0;
                while(timeout <= 102){
                    if(channel.equalsIgnoreCase("chat")) {
                        second = getTotalSecondAutoAnswerTimer(getCardHeaderTimer("webchat"));
                    }
                    else{
                        second = getTotalSecondAutoAnswerTimer(getCardHeaderTimer(channel));
                    }
                    log.info("second: " + second);
                    if(Math.abs(second - 100) < 3) return true;
                    timeout++;
                    wait(1);
                }
                System.out.println("waitingForWorkcardRona: " + timeout + " seconds.");
            }
        }
        return false;
    }

    @Step("Create a image signature without save")
    public String CreateEmailSignatureWithImageWithoutSave(String imagePath, boolean autoInsert) throws InterruptedException, AWTException, IOException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String imageID = "";
        wait.until(ExpectedConditions.elementToBeClickable(htmlSignatures)).click();

        log.info("delete the existing Signature");
        htmlTextAreas.sendKeys(Keys.chord(Keys.CONTROL, "a"));
        this.wait(1);
        htmlTextAreas.sendKeys(Keys.chord(Keys.DELETE));
        this.wait(1);

        log.info("insert a new signature image");
        insertInlineImage(imagePath);
        Thread.sleep(1000);
        WebElement img = driver.findElement(By.xpath("(//img[@data-hash])[1]"));
        imageID = (img.getAttribute("data-hash"));
        log.info(imageID);

        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", autoInsertSignature);
        if (autoInsert) {
            if (!autoInsertSignature.getAttribute("aria-checked").equals("true")) {
                autoInsertSignature.click();
            }
        } else {
            if (autoInsertSignature.getAttribute("aria-checked").equals("true")) {
                autoInsertSignature.click();
            }
        }
        this.wait(2);
        return imageID;
    }

    public boolean verifyImageOnBodyEmailOutbound(int numberImage){
        try{
            List<WebElement> listImg = driver.findElements(By.xpath("//cc-email-editor[@ng-model=\"outboundEmail.body\"]//img"));
            if(listImg.size() != numberImage){
                log.info("The image on body email outbound is "+listImg.size());
                return false;
            }else {
                return true;
            }
        }catch (Exception e){
            log.info("No such element");
            return false;
        }
    }

    @Step("Copy content on Email Signature body")
    public String copySignatureBody(String type) {
        try {
            if (type.equals("HTML")) {
                htmlTextAreas.sendKeys(Keys.chord(Keys.CONTROL, "a"));
                htmlTextAreas.sendKeys(Keys.chord(Keys.CONTROL, "c"));
                Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
                String text = (String) c.getData(DataFlavor.stringFlavor);
                log.info("Body email signature: " + text);
                return text;
            } else if (type.equals("Plain")) {
                plainTextAreas.sendKeys(Keys.chord(Keys.CONTROL, "a"));
                plainTextAreas.sendKeys(Keys.chord(Keys.CONTROL, "c"));
                Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
                String text = (String) c.getData(DataFlavor.stringFlavor);
                log.info("Body email signature: " + text);
                return text;
            } else {
                log.info("Clipboard does not contain text data.");
                return null;
            }

        } catch (Exception e) {
            log.info("FAILED: No such element body email signature");
            return null;
        }
    }

    public int getCharactersLeftEmailSignature() {
        String charactersLeft = charactersLeftSignature.getText().split(":")[1].trim();
        return Integer.parseInt(charactersLeft);
    }

    @Step("Select work card by the order of work card")
    public boolean selectWorkCardByTheOrderOfWorkCard(int number) {
        try {
            if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
                driver.switchTo().window(driver.getWindowHandle());
            WebElement workCard = driver.findElement(By.xpath("(//card-container)["+number+"]"));
            if ((this.eXISTs(driver, workCard, 2) != null)) {
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();", workCard);
                log.info("Click on workcard successfully ");
                return true;
            } else {
                log.info("Workcard not found");
            }
        } catch (Exception e) {
            e.getMessage();
        }
        return false;
    }

    @Step("Verify message displays on chat UI")
    public boolean verifyChatSessionMessageByTheOrderOfWorkCard(String messageText, int workCardNumber) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            boolean found = false;
            String content = "";
            int i =0;
            while((i<2) && !found) {
                List<WebElement> messageContainers = driver.findElements(By.xpath("(//div[@master='true'])["+workCardNumber+"]"));
                for (WebElement container : messageContainers) {
                    if(VerifyElementVisibility(container)) {
                        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", container);
                        content = content + "\n" + container.getText();
                        if (container.getText().contains(messageText)) {
                            found = true;
                            break;
                        }
                    }
                }
                i++;
            }
            log.info("Inside verify chat session messages at Agent window:\n" + content);
            return found;
        } catch (Exception e) {
            log.error("The text specified not found inside chat session at Agent window." + " " + messageText);
            e.getMessage();
            return false;
        }
    }

    @Step("Agent switch tab chat with customer when supervisor coaching")
    public boolean agent_switch_tab_chat_by_number_of_workcard_with_customer_when_supervisor_coaching(String sCustName, int numberOfWorkCard) {
        try {
            driver.findElement(By.xpath("(//div[@class='context-tab layout-row flex']//*[name()='md-tab-item' and contains(text(),'" + sCustName.toUpperCase() + "')])["+numberOfWorkCard+"]")).click();
            log.info("Agent switch tab successfully");
            return true;
        } catch (Exception e) {
            log.info("The customer tab could not be found");
            return false;
        }
    }

    @Step("Check element Enabled or Disabled")
    public boolean checkElementEnabled(WebElement el) {
        boolean present = false;
        try {
            if(el.isDisplayed() && el.isEnabled()){
                log.info("The button is found and enabled");
                present = true;
            }else{
                log.info("The button is grayed out");
                present = false;
            }
        } catch (Exception e) {
            log.info("No such element");
            present = false;
        }
        return present;
    }

    public void waitingElementACWDisappear(String sInteractionId) {
        try {
            WebElement workCard = driver.findElement(By.xpath("//card-container[@interaction-id='" + sInteractionId + "']//span[@ng-bind-html=\"card.summaryMessage | EmojiDisplay\"]"));
            log.info("Xpath workCard: " + workCard);
            long startTime = System.currentTimeMillis();
            while (System.currentTimeMillis() - startTime < 100000) { // 100 seconds
                if(!checkElementExist(workCard)){
                    log.info("The element ACW has disappeared");
                    break;
                }
                wait(5); //Wait 5 seconds before checking again
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Step("Verify ACW work card not exist")
    public boolean VerifyACWWorkcardDisplayOrNotByInteractionID(String strInteractionId) {
        try {
            WebElement workCard = driver.findElement(By.xpath("//card-container[@interaction-id='" + strInteractionId + "']//button[@ng-click='completeACW()']"));
            if (workCard.isDisplayed()) {
                log.info("ACW work card is still displaying.");
                return Boolean.TRUE;
            }
        } catch (Exception e1) {
            return Boolean.FALSE;
        }
        return Boolean.FALSE;
    }

    private WebElement findClickableElement(List<WebElement> elements) {
        for (WebElement element : elements) {
            if (isClickable(element)) {
                return element;
            }
        }
        return null;
    }
    public String getCustomerNameCustomerDetails(){
        Click_Widget("Customer_Details");
        List<WebElement> customerNameCustomerDetail = driver.findElements(By.xpath("//cc-customer-details//div[@class=\"header\"]//strong")) ;
        WebElement el=findClickableElement(customerNameCustomerDetail);
        String customerName = el.getText();
        return customerName;
    }

    public int getTouchPoinCJ(String channel){
        try{
            List<WebElement> touchPoin = driver.findElements(By.xpath("//div[@class='journey-horizontalTimeline']//*[name()='svg' and @id='" + channel.toLowerCase() + "_Layer_1']"));
            return touchPoin.size();
        }catch (Exception e){
            log.info("No such element.");
        }
        return 0;
    }

    public void checkAutoInserEmailSignature(boolean autoInsert){
        List<WebElement> checkBoxs = driver.findElements(By.xpath("(//md-checkbox[contains(@aria-label,'Automatically insert my signature in all emails')])"));
        for (WebElement checkBox : checkBoxs) {
//            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", checkBox);
            if (checkBox.isDisplayed()) {
                if (autoInsert) {
                    if (!checkBox.getAttribute("aria-checked").equals("true")) {
                        checkBox.click();
                    }
                } else {
                    if (checkBox.getAttribute("aria-checked").equals("true")) {
                        checkBox.click();
                    }
                }
            }
        }
    }

    @Step("Get tooltip of element")
    public String getTooltip(WebElement element) {
        try {
            return element.getAttribute("aria-label");
        }catch (Exception e){
            log.info("Cannot get tooltip of element");
            return  null;
        }
    }
    @Step("Check any Emails On The Customer Journey")
    public int OpenTranscriptWithMultiEmailDetailsOnTheCustomerJourney(int index, String sEmailKeyWord, String fromEmailAddressName, String fromEmailAddress, String toEmailAddress, String sEmailBodyText) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int failedFlag = 0;
        log.info("Open Transcript");
        WebElement transcripIcon = driver.findElement(By.xpath("//div[@class=\"transcriptButtonContainer transcriptLabel\"]"));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", transcripIcon);
        if (transcripIcon.isDisplayed()) {
            transcripIcon.click();
            this.wait(5);
        } else {
            failedFlag++;
            log.info("Cannot find to Transcript.");
        }
        WebElement journeyEmailDetailsFields = driver.findElement(By.xpath("(//div[@class='journey-email-header'])["+index+"]")); //journey-email-details
        String journeyContent = journeyEmailDetailsFields.getText();
        log.info(journeyContent);
        if (!journeyContent.trim().contains("From: " + fromEmailAddressName + " <" + fromEmailAddress + ">")) {
            failedFlag++;
            log.info("FAILED. Email field \"From\" on Transcript show incorrectly");
        }
        if (!journeyContent.trim().contains("To: " + toEmailAddress.trim())) {
            failedFlag++;
            log.info("FAILED. Email field \"To\" on Transcript show incorrectly");
        }
        WebElement arrow = driver.findElement(By.xpath("(//div[@class='journey-email-header-arrow'])["+index+"]")); //journey-email-details
        arrow.click();
        wait(3);
        String journeyContent1 = journeyEmailDetailsFields.getText();
        log.info(journeyContent1);
        log.info("Subject: " + sEmailKeyWord);
        if (!journeyContent1.trim().contains("Subject: " + sEmailKeyWord)) {
            failedFlag++;
            log.info("FAILED. Email field \"Subject\" on Transcript show incorrectly");
        }
        WebElement journeyEmailDetailsContent = driver.findElement(By.xpath("(//p[@class='email-body-content'])["+index+"]"));
        log.info("INFO. Email content on Transcript show: " + journeyEmailDetailsContent.getText());
        log.info(sEmailBodyText);
        if (!journeyEmailDetailsContent.getText().contains(sEmailBodyText)) {
            failedFlag++;
            log.info("FAILED. Email body content on Transcript show incorrectly");
        }
        return failedFlag;
    }

    @Step("Get list of service after searching ")
    public List<String> getListTransferToServiceBySearch(String ID, String serviceName) throws InterruptedException {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        wait(1);

        log.info("Open TransferToService");
        wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='ow_Card_Transfer_" + ID + "_btn']"))).click();
        Thread.sleep(2000);

        log.info("Clicking service label");
        WebElement serviceLabel = driver.findElement(By.xpath("//*[@puppeteer-id='consult-menu__services-Transfer_" + ID + "']"));
        JavascriptExecutor executor = (JavascriptExecutor) driver;
        executor.executeScript("arguments[0].click();", serviceLabel);
        Thread.sleep(2000);

        log.info("Clicking on Search field, then input service name");
        WebElement inputSearch = driver.findElement(By.xpath("//input[@id='services_search_Transfer_" + ID + "']"));
        inputSearch.click();
        inputSearch.sendKeys(serviceName);
        Thread.sleep(2000);

        log.info("Get list of service");
        List<WebElement> wcNames = driver.findElements(By.xpath("//div[contains(@class,'md-active')]//button[@puppeteer-id='consult-menu__services-list-item_"+ID+"']"));
        List<String> serviceList= new ArrayList<>();
        log.info("Service list size= "+wcNames.size());
        for (int i = 0; i < wcNames.size(); i++) {
            serviceList.add(wcNames.get(i).getText());
        }
        log.info("Clear search");
        inputSearch.sendKeys(Keys.chord(Keys.CONTROL, "a"));
        this.wait(1);
        inputSearch.sendKeys(Keys.chord(Keys.DELETE));
        Actions action = new Actions(driver);
        action.sendKeys(Keys.ESCAPE).build().perform();
        action.sendKeys(Keys.ESCAPE).build().perform();
        wait(1);
        return serviceList;
    }

    @Step("Get tooltip of transfer icon")
    public String getTooltipOfTransferIcon(String strInteractionId) {
        try {
            WebElement element = driver.findElement(By.xpath("//card-container[@interaction-id='" + strInteractionId + "']//md-icon[@class=\"service-icon aoc-transfer-forward aoc\"]/.."));
            return element.getAttribute("aria-label");
        }catch (Exception e){
            log.info("Cannot get tooltip of element");
            return  null;
        }
    }



    @Step("Get color message on Transcript on Customer History")
    public boolean verifyColorMessageOnCHTranscript(String content, boolean link, String color) {
        if (EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        WebElement element;
        try {
            if(link) {
                element = driver.findElement(By.xpath("//*[@class=\"chat-transcript\"]//*[contains(text(),'" + content + "')]/../.."));
            } else {
                element = driver.findElement(By.xpath("//*[@class=\"chat-transcript\"]//*[contains(text(),'" + content + "')]/.."));
            }
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
            String bkgColor = element.getCssValue("background-color");
            String hexColor = org.openqa.selenium.support.Color.fromString(bkgColor).asHex();
            log.info("Color is " + color + ", hex: " + hexColor);
            switch (color.toLowerCase()) {
                case "grey":
                    if (hexColor.equalsIgnoreCase("#eeeeee")) {
                        log.info("The color is grey");
                    } else {
                        log.info("FAILED: The color is not grey");
                        return false;
                    }
                    break;
                case "orange":
                    if (hexColor.equalsIgnoreCase("#feefcd")) {
                        log.info("The color is orange");
                    } else {
                        log.info("FAILED: The color is not orange");
                        return false;
                    }
                    break;
                case "green":
                    if (hexColor.equalsIgnoreCase("#d7e8c3")) {
                        log.info("The color is green");
                    } else {
                        log.info("FAILED: The color is not green");
                        return false;
                    }
                    break;
            }
        } catch (Exception e) {
            log.info("FAILED: No found this element " + e.getMessage());
            return false;
        }
        return true;
    }
    public boolean verifyContentMessageSideOnTranscriptCJ(String content, boolean url,String side) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        boolean result = false;
        try {
            List<WebElement> elcontent = driver.findElements(By.xpath("//*[contains(@class,'modal-body')]//div[@class='journey-transcript-content']"));
            for(WebElement ele : elcontent) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", ele);
                String text = ele.getText();
                if(text.equals(content)){
                    WebElement parentElement;
                    if (url) {
                        parentElement = (WebElement) ((JavascriptExecutor) driver).executeScript("return arguments[0].parentNode.parentNode;", ele);
                    } else {
                        parentElement = (WebElement) ((JavascriptExecutor) driver).executeScript("return arguments[0].parentNode;", ele);
                    }
                    log.info(parentElement.getAttribute("class"));
                    if (parentElement.getAttribute("class").contains(side)) {
                        result = true;
                        break;
                    }
                }
            }
        } catch (Exception e) {
            log.info("FAILED: No found this element");
            result = false;
        }
        return result;
    }
    @Step("Verify color message on Transcript CJ")
    public boolean verifyColorMessageOnCJTranscript(String content, String color) {
        if (EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            List<WebElement> elcontent = driver.findElements(By.xpath("//*[contains(@class,'modal-body')]//div[@class='journey-transcript-content']"));
            for (WebElement ele : elcontent) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", ele);
                String text = ele.getText();
                WebElement parentElement;
                if (text.equals(content)) {
                    parentElement = (WebElement) ((JavascriptExecutor) driver).executeScript("return arguments[0].parentNode;", ele);
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", parentElement);
                    String bkgColor = parentElement.getCssValue("background-color");
                    String hexColor = org.openqa.selenium.support.Color.fromString(bkgColor).asHex();
                    log.info("Color is " + bkgColor + ", hex: " + hexColor);
                    switch (color.toLowerCase()) {
                        case "grey":
                            if (hexColor.equalsIgnoreCase("#eeeeee")) {
                                log.info("The color is grey");
                            } else {
                                log.info("FAILED: The color is not grey");
                                return false;
                            }
                            break;
                        case "orange":
                            if (hexColor.equalsIgnoreCase("#feefcd")) {
                                log.info("The color is orange");
                            } else {
                                log.info("FAILED: The color is not orange");
                                return false;
                            }
                            break;
                        case "green":
                            if (hexColor.equalsIgnoreCase("#d7e8c3")) {
                                log.info("The color is green");
                            } else {
                                log.info("FAILED: The color is not green");
                                return false;
                            }
                            break;
                    }
                }
            }
        } catch (Exception e) {
            log.info("FAILED: No found this element " + e.getMessage());
            return false;
        }
        return true;
    }

    @Step("Verify url side on Transcript on Customer History")
    public boolean verifyUrlSideOnTranscript(String content, String side) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        boolean result = false;
        try {
            WebElement elcontent = driver.findElement(By.xpath("//*[@class=\"chat-transcript\"]//*[contains(text(),'" + content + "')]/../../.."));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", elcontent);
            log.info(elcontent.getAttribute("Class"));
            if (elcontent.getAttribute("class").contains(side)) {
                result = true;
            }
        } catch (Exception e) {
            log.info("FAILED: No found this element");
            result = false;
        }
        return result;
    }

    @Step("Verify Customer Search By Key Result ")
    public int verifyCustomerSearchByKeyResult(String key,String value) {
        int failedFlag = 0;
        int customerNum = Integer.parseInt(driver.findElement(By.xpath("//div[@ng-if='customers.length > 0']//span")).getText().split(":")[1].trim());
        List<WebElement> customerList = driver.findElements(By.xpath("//button[@class='aoc-history-search md-button md-ink-ripple']"));
        if (customerNum != customerList.size()) {
            failedFlag++;
            log.info("FAILED. Customer list don't match with searching result ");
        }
        String valueNew = value.endsWith("*") ? value.substring(0, value.length() - 1) : null;
        List<WebElement> custListAva = driver.findElements(By.xpath("//cc-text-avatar[@ng-if='!customer.avatarUrl']"));
        List<WebElement> nameList = driver.findElements(By.xpath("//div[@class='md-list-item-text layout-align-center-start layout-column']/*[1]"));
        switch (key) {
            case "Surname":
                log.info("Verify Surname result:");
                for (WebElement ele : nameList) {
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", ele);
                    String fullName = ele.getText().trim().toLowerCase();
                    if ((valueNew != null && !fullName.contains(valueNew.toLowerCase())) || (valueNew == null && !fullName.endsWith(value.toLowerCase()))) {
                        failedFlag++;
                        log.info("FAILED. Customer surname doesn't match with searching");
                    }else{
                        log.info("Customer Surname is correct");
                    }
                }
                break;
            case "Name":
                log.info("Verify Name result:");
                for (WebElement ele : nameList) {
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", ele);
                    String fullName = ele.getText().trim().toLowerCase();
                    if ((valueNew != null && !fullName.startsWith(valueNew.toLowerCase())) || (valueNew == null && !fullName.startsWith(value.toLowerCase()))) {
                        failedFlag++;
                        log.info("FAILED. Customer surname doesn't match with searching");
                    } else{
                        log.info("Customer Name is correct");
                    }
                }
                break;
            case "Email":
                log.info("Verify Email result:");
                List<WebElement> cusEmailtList = driver.findElements(By.xpath("//div[@class='md-list-item-text layout-align-center-start layout-column']/*[2]"));
                for (WebElement emailCust : cusEmailtList) {
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", emailCust);
                    String email = emailCust.getText().trim().toLowerCase();
                    if ((valueNew != null && !email.contains(valueNew.toLowerCase())) || (valueNew == null & !email.equalsIgnoreCase(value))) {
                        failedFlag++;
                        log.info("FAILED. Customer email doesn't match with searching");
                    } else{
                        log.info("Customer Email is correct");
                    }
                }
                break;
            case "Phone":
                log.info("Verify Phone result:");
                for(int i =0;i < custListAva.size();i++){
                    WebElement ele =  driver.findElement(By.xpath("(//cc-text-avatar[@ng-if='!customer.avatarUrl'])[" + (i+1) + "]"));
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", ele);
                    ele.click();
                    this.wait(2);
                    WebElement teleTab = driver.findElement(By.xpath("//md-tab-item[contains(text(),'Telephone')]"));
                    wait.until(ExpectedConditions.elementToBeClickable(teleTab)).click();
                    List<WebElement> phoneEle = driver.findElements(By.xpath("//cc-phone-number[@address='getPhoneString(phone)']//span[@class='click-to-call__number']"));
                    int count = 0;
                    for (WebElement phone : phoneEle) {
                        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", phone);
                        if ((valueNew != null && phone.getText().trim().contains(valueNew)) || (valueNew == null && phone.getText().trim().equalsIgnoreCase(value))) {
                            count++;
                        }
                    }
                    if (count == 0) {
                        failedFlag++;
                        log.info("FAILED. Customer phone doesn't match with searching");
                    } else{
                        log.info("Customer Phone is correct");
                    }
                    WebElement backbtn = driver.findElement(By.xpath("//div[@class ='customer-details-back layout-row']//span[contains(text(),'Back')]"));
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", backbtn);
                    wait.until(ExpectedConditions.elementToBeClickable(backbtn)).click();
                }
                break;
            case "Social":
                log.info("Verify Social result:");
                for(int i =0;i < custListAva.size();i++){
                    WebElement elem =  driver.findElement(By.xpath("(//cc-text-avatar[@ng-if='!customer.avatarUrl'])[" + (i+1) + "]"));
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", elem);
                    elem.click();
                    this.wait(2);
                    WebElement socialTab = driver.findElement(By.xpath("//md-tab-item[contains(text(),'Social')]"));
                    wait.until(ExpectedConditions.elementToBeClickable(socialTab)).click();
                    List<WebElement> socialEle = driver.findElements(By.xpath("//div[@md-tabs-template='::tab.template']//table[@class='widget__table--information']//tr[contains(@ng-repeat,'social')]//td[2]"));
                    int count = 0;
                    for (WebElement social : socialEle) {
                        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", social);
                        if ((valueNew != null && social.getText().trim().toLowerCase().contains(valueNew.toLowerCase())) || (valueNew == null && social.getText().trim().equalsIgnoreCase(value))) {
                            count++;
                        }
                    }
                    if (count == 0) {
                        failedFlag++;
                        log.info("FAILED. Customer social doesn't match with searching");
                    } else{
                        log.info("Customer Social is correct");
                    }
                    WebElement backbtn = driver.findElement(By.xpath("//div[@class ='customer-details-back layout-row']//span[contains(text(),'Back')]"));
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", backbtn);
                    wait.until(ExpectedConditions.elementToBeClickable(backbtn)).click();
                }
                break;
        }
        return failedFlag;
    }

    @Step("Get Number of Customer from Customer Search")
    public int getResultFromCustomerSearch() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int custSize =0;
        try {
            WebElement ele = driver.findElement(By.xpath("//div[contains(@ng-if,'customers.length')]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", ele);
            String eleText = ele.getAttribute("ng-if").trim();
            if (eleText.contains("> 0")) {
                custSize = Integer.parseInt(ele.findElement(By.xpath(".//span")).getText().split(":")[1].trim());
                log.info("Nuber of customer matching is: " + custSize);
                return custSize;
            } else if(eleText.contains("=== 0")){
                log.info("@@@@@@Customer not found@@@@@@");
            }
        } catch (Exception e) {
            log.info("No such element " + e.getMessage());
        }
        return custSize;
    }
    @Step("Get Customer Name from Customer Search")
    public String getCustmerNameFromCustomerSearch(int customerIndex) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        String custName = null;
        try {
            WebElement ele = driver.findElement(By.xpath("(//div[@class='md-list-item-text layout-align-center-start layout-column']/*[1])[" + customerIndex + "]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", ele);
            custName = ele.getText().trim();
            log.info("Customer name is : " + custName);
            if (custName==null) {
                throw new Exception("FAILED: Customer Name on Customer Search is: " + custName);
            }
        } catch (Exception e) {
            log.info("FAILED: No found this element");
        }
        return custName;
    }
    public void clickToShowHistoryCustomerSearchByIndex(int indexCustomer){
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            WebElement showHistorybtn = driver.findElement(By.xpath("(//button[@class=\"aoc-history-search md-button md-ink-ripple\"])[" + indexCustomer + "]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", showHistorybtn);
            showHistorybtn.click();
        } catch (Exception e) {
            log.info("FAILED: No such element");
        }
    }
    @Step("Verify Customer from Customer search ")
    public boolean verifyCHSDropdownSetForCustomer(String customerName) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        boolean result = true;
        try {
            WebElement elcontent = driver.findElement(By.xpath("//md-select[contains(@placeholder,'Search by')]//div[@class='md-text']"));
            String customerActual = elcontent.getText().trim();
            if (!customerActual.equalsIgnoreCase("Customer")) {
                log.info("FAILED: Customer Search history doesn't show customer correctly");
                result = false;
            } else {
                WebElement custEle = driver.findElement(By.xpath("//input[@placeholder ='Customer']"));
                String custName = custEle.getAttribute("value").trim();
                if (!custName.equals(customerName)) {
                    log.info("FAILED: Customer Search history doesn't show customer's name correctly");
                    result = false;
                }
            }
        } catch (Exception e) {
            log.info("FAILED: No found this element");
            result = false;
        }
        return result;
    }
    @Step("Verify modify customer field on CHS")
    public boolean verifyModifyCustomerFieldOnCHS() {
        try {
            WebElement customerName = driver.findElement(By.xpath("//input[@ng-model='customerDisplayName']"));
            boolean readOnly = (Boolean) ((JavascriptExecutor) driver).executeScript("return arguments[0].readOnly;", customerName);
            if (readOnly) {
                log.info("Text is read only non editable");
                return true;
            }
        } catch (Exception e) {
            log.info("Text is add success");
        }
        return false;
    }
    @Step("Get contacts history by Customer on CHS ")
    public int getContactHistoryByCustomerOnCHS() {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        int contactSize =0;
        try {
            WebElement ele = driver.findElement(By.xpath("//div[contains(@ng-if,'customerSearchResultsReceived')]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true)", ele);
            String eleText = ele.getAttribute("ng-if").trim();
            if (eleText.contains("> 0")) {
                contactSize = getPaginationRecord();
                log.info("Number of history contacts is: " + contactSize);
                return contactSize;
            } else if(eleText.contains("=== 0")){
                log.info("@@@Customer doesn't have any contacts@@@");
                log.info("Number of history contacts is: " + contactSize);
            }
        } catch (Exception e) {
            log.info("FAILED: No such element");
        }
        return contactSize;
    }
    @Step("Verify Interaction Log Icon Color ")
    public boolean verifyInteractionLogIconColor(String logTab, int  index, String icon, String iconColor) {
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            try {
                wait.until(ExpectedConditions.elementToBeClickable(openInteractionLog)).click();
            }catch(Exception ex) {
                if(checkElementExist(btnInteractionLog)) {
                    btnInteractionLog.click();
                }
                else{
                    ex.getMessage();
                    log.info("Not found button InteractionLog.");
                    return false;
                }
            }
            wait(3);
            switch (logTab.toLowerCase()){
                case "all":
                    interactionLogAllTab.click();
                    break;
                case "missed":
                    interactionLogMissedTab.click();
                    break;
                case "incoming":
                    interactionBtnNextTab.click();
                    interactionLogIncomingTab.click();
                    break;
                case "outgoing":
                    interactionBtnNextTab.click();
                    interactionLogOutgoingTab.click();
                    break;
                default:
                    log.info("Not map log tab: "+logTab);
                    return false;
            }
            wait(2);
            WebElement actualIcon = driver.findElement(By.xpath("(//md-content[@aria-label='Interaction Log']//md-tab-item[contains(@class,'md-active')]//..//..//..//..//md-tab-content[contains(@class,'md-active')]//md-card)["+index+"]//span[contains(@class,'icon')]"));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", actualIcon);
            String textIcon = actualIcon.getAttribute("aria-label");
            log.info("Icon: "+textIcon);
            if(!textIcon.equals(icon)){
                log.info("The icon display incorrectly");
                return false;
            }
            String color = actualIcon.getCssValue("color");
            String hexColor = org.openqa.selenium.support.Color.fromString(color).asHex();
            log.info("Color is " + iconColor + ", hex: " + hexColor);
            switch (iconColor.toLowerCase()) {
                case "red":
                    if (hexColor.equalsIgnoreCase("#d50000")) {
                        log.info("The color is red");
                    } else {
                        log.info("FAILED: The color is not red");
                        return false;
                    }
                    break;
                case "green":
                    if (hexColor.equalsIgnoreCase("#4baa39")) {
                        log.info("The color is green");
                    } else {
                        log.info("FAILED: The color is not green");
                        return false;
                    }
                    break;
            }

            actions().sendKeys(Keys.ESCAPE).build().perform();
            wait(1);
            return true;
        } catch (Exception e) {
            log.info("No such element " + e.getMessage());
            actions().sendKeys(Keys.ESCAPE).build().perform();
            wait(1);
            return false;
        }
    }
    @Step("Get color message on Transcript on Customer History")
    public boolean verifyColorMessageSideOnTranscript(String content,boolean link, String color) {
        if (EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        WebElement element;
        try {
            if(link) {
                element = driver.findElement(By.xpath("//*[@class=\"chat-transcript\"]//*[contains(text(),'" + content + "')]/../.."));
            } else {
                element = driver.findElement(By.xpath("//*[@class=\"chat-transcript\"]//*[contains(text(),'" + content + "')]/.."));
            }
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);
            String bkgColor = element.getCssValue("background-color");
            String hexColor = org.openqa.selenium.support.Color.fromString(bkgColor).asHex();
            log.info("Color is " + color + ", hex: " + hexColor);
            switch (color.toLowerCase()) {
                case "grey":
                    if (hexColor.equalsIgnoreCase("#eeeeee")) {
                        log.info("The color is grey");
                    } else {
                        log.info("FAILED: The color is not grey");
                        return false;
                    }
                    break;
                case "orange":
                    if (hexColor.equalsIgnoreCase("#feefcd")) {
                        log.info("The color is orange");
                    } else {
                        log.info("FAILED: The color is not orange");
                        return false;
                    }
                    break;
                case "green":
                    if (hexColor.equalsIgnoreCase("#d7e8c3")) {
                        log.info("The color is green");
                    } else {
                        log.info("FAILED: The color is not green");
                        return false;
                    }
                    break;
            }
        } catch (Exception e) {
            log.info("FAILED: No found this element " + e.getMessage());
            return false;
        }
        return true;
    }
    @Step("Verify color message on Transcript CJ")
    public boolean verifyMessageColorOnTranscriptCJ(String content,String color) {
        if (EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            List<WebElement> elcontent = driver.findElements(By.xpath("//*[contains(@class,'modal-body')]//div[@class='journey-transcript-content']"));
            for (WebElement ele : elcontent) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", ele);
                String text = ele.getText();
                WebElement parentElement;
                if (text.equals(content)) {
                    parentElement = (WebElement) ((JavascriptExecutor) driver).executeScript("return arguments[0].parentNode;", ele);
                    ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", parentElement);
                    String bkgColor = parentElement.getCssValue("background-color");
                    String hexColor = org.openqa.selenium.support.Color.fromString(bkgColor).asHex();
                    log.info("Color is " + bkgColor + ", hex: " + hexColor);
                    switch (color.toLowerCase()) {
                        case "grey":
                            if (hexColor.equalsIgnoreCase("#eeeeee")) {
                                log.info("The color is grey");
                            } else {
                                log.info("FAILED: The color is not grey");
                                return false;
                            }
                            break;
                        case "orange":
                            if (hexColor.equalsIgnoreCase("#feefcd")) {
                                log.info("The color is orange");
                            } else {
                                log.info("FAILED: The color is not orange");
                                return false;
                            }
                            break;
                        case "green":
                            if (hexColor.equalsIgnoreCase("#d7e8c3")) {
                                log.info("The color is green");
                            } else {
                                log.info("FAILED: The color is not green");
                                return false;
                            }
                            break;
                    }
                }
            }
        } catch (Exception e) {
            log.info("FAILED: No found this element " + e.getMessage());
            return false;
        }
        return true;
    }

    @Step("Click to move sup's agent widget")
    public boolean go_to_MyAgent(){
        if(EnvSetup.run_with_Docker.equalsIgnoreCase("yes"))
            driver.switchTo().window(driver.getWindowHandle());
        try {
            JavascriptExecutor js = (JavascriptExecutor) driver;
            Actions act = new Actions(driver);
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", myAgentsTab);
            act.moveToElement(myAgentsTab).click().build().perform();
            return true;
        }catch (Exception e){
            log.info("FAILED: No such element");
            return false;
        }
    }

    @FindBy(xpath = "//input[@ng-model='filters.text']")
    public WebElement searchTeam;
    @FindBy(xpath = "//button[@aria-label='Collapse all expanded agents']")
    public WebElement collapseButton;
    @FindBy(xpath = "//button[@aria-label='Clear Filter']")
    public WebElement clearFilter;
    @Step("Search My Agents")
    public boolean searchMyAgent(String agentFullName){
        try {
            wait.until(ExpectedConditions.visibilityOf(searchTeam));
            try {
                log.info("Click collapse all agents button");
                collapseButton.click();
            } catch (Exception e) {
                log.info("Collapse all agents button is not visible");
            }
            try {
                log.info("Click clear filter button");
                clearFilter.click();
            } catch (Exception e) {
                log.info("clear Filter BUtton is not visible");
            }
            driver.findElement(By.xpath("//input[@ng-model='filters.text']")).sendKeys(agentFullName);
            wait(1);
            WebElement result = driver.findElement(By.xpath("//div[@aria-label='My Agents table']//p[contains(text(),'"+agentFullName+"')]"));
            if (!result.isDisplayed()){
                log.info("Not found agent: "+agentFullName);
                return false;
            }

        }catch (Exception e){
            log.info("No such element");
            return false;
        }
        return true;
    }

    @Step("Get WC Active Time")
    public int getWCActiveTime(String strInteractionId) {
        int result = 0;
        try {
            WebElement WCActiveTime = driver.findElement(By.xpath("//card-container[@interaction-id='" + strInteractionId + "']//*[contains(@id,'ow_card_timer')]"));
            String time = WCActiveTime.getText().trim();
            result = convertDurationToSeconds(time);
            log.info("WC Active Time: " + result + "s");
        } catch (Exception e) {
            log.info("Exception occured when get ACW timeout");
        }
        return result;
    }

    private int convertDurationToSeconds(String durationString) {
        String[] parts = durationString.split(":");
        int hours = 0;
        int minutes = 0;
        int seconds = 0;

        try {
            if (parts.length == 3) {
                hours = Integer.parseInt(parts[0]);
                minutes = Integer.parseInt(parts[1]);
                seconds = Integer.parseInt(parts[2]);
            } else if (parts.length == 2) {
                minutes = Integer.parseInt(parts[0]);
                seconds = Integer.parseInt(parts[1]);
            } else {
                System.out.println("Invalid duration format");
            }
            return hours * 3600 + minutes * 60 + seconds;
        } catch (NumberFormatException e) {
            System.out.println("Error parsing duration components");
            return -1;
        }
    }
}